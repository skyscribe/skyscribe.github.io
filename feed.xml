<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://skyscribe.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://skyscribe.github.io/" rel="alternate" type="text/html" /><updated>2019-01-13T14:45:27+08:00</updated><id>https://skyscribe.github.io/feed.xml</id><title type="html">驭风万里无垠</title><subtitle>汇小流以成江海，积跬步以至千里</subtitle><author><name>Fei Yan</name><email>skyscribe.yf@gmail.com</email></author><entry><title type="html">现代C++语言是否走上了歧路?</title><link href="https://skyscribe.github.io/post/2018/12/30/modern-cpp-reflection/" rel="alternate" type="text/html" title="现代C++语言是否走上了歧路?" /><published>2018-12-30T00:00:00+08:00</published><updated>2018-12-30T00:00:00+08:00</updated><id>https://skyscribe.github.io/post/2018/12/30/modern-cpp-reflection</id><content type="html" xml:base="https://skyscribe.github.io/post/2018/12/30/modern-cpp-reflection/">&lt;p&gt;C++标准的演进和推出速度过慢一直被内外社区批评，甚至当第一个21世纪的语言标准终于于2011年发布的时候，标准委员会的人都自嘲说我们是一门计算机语言，所以0x需要用十六进制数表示。
进入了第二个十年之后，社区的老学究们终于决定引入时髦的＂发布火车＂的模型，滚动地推出新的功能，之后新的语言标准总算按照一个大版本一个小版本间杂而出的方式推到了程序员的面前。
只是社区中对于新的语言的发展方向一直有很多不同的声音，最近的一次大规模声讨则是起源于Aras P在&lt;a href=&quot;https://aras-p.info/blog/2018/12/28/Modern-C-Lamentations/&quot;&gt;这篇名为哀悼现代C++&lt;/a&gt;的博客文章。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;作者是一位来自Unity的游戏开发程序员，而一般意义上认为C++仍然具有顽强生命力的领域中，游戏开发是很大的一块地盘；因此这篇来自游戏社区的自己人的反思更加惹人注目；
难道是死忠粉都不愿意继续坚持自己的语言宗教信仰而要改换门庭另投明主了吗？仔细阅读了作者的文字，又发现并不是完全这样。&lt;/p&gt;

&lt;h2 id=&quot;作者为什么要挑起这个话题&quot;&gt;作者为什么要挑起这个话题&lt;/h2&gt;

&lt;p&gt;其实作者也是有感于最近的C++20语言标准正式纳入了ranges这个有名的第三方库而发（其实我个人第一次看到这个库的时候也是眼前一亮，可惜这么多年还在语言标准的门外徘徊）。
Ranges库的作者在自己的&lt;a href=&quot;http://ericniebler.com/2018/12/05/standard-ranges/&quot;&gt;博客中&lt;/a&gt;兴奋地告诉大家它的库重要要成为新的2020标准的一部分了，
并且&lt;strong&gt;信心满满地给大家演示了一个具体的例子&lt;/strong&gt;来宣传这个新的特性是如何的激动人心。不料社区众人并不买账，
很多游戏开发圈子的人给出的确是大大的不喜欢，甚至Aras直接引述了他自己写的一篇twitter消息&lt;strong&gt;将不满发泄到了整个现代的语言标准进化方向&lt;/strong&gt;上(
不知道Bjarne老爷子会不会气的跳起来，毕竟他在负责领导标准委员会中的语言演进方向工作小组)，
并直言不讳地说，负责制定语言标准的大佬们实在是走错了方向，没有真正关心一线开发人员的诉求；于是一石激起千层浪，
整个社区都充满了对语言标准委员会掌舵的演进方向的不满。&lt;/p&gt;

&lt;p&gt;撇开很是主观的争论不说，技术方面看，Aras是否太偏激了？&lt;/p&gt;

&lt;h2 id=&quot;作者的痛点&quot;&gt;作者的痛点&lt;/h2&gt;

&lt;p&gt;整篇文章写的比较长，也许是预料到很多人没有耐心仔细读完，作者在开头就简单概括了他所认为的现代语言标准的三宗罪&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;编译时间&lt;/strong&gt;是个非常重要的话题，可惜标准委员会视若不见&lt;/li&gt;
  &lt;li&gt;非优化模式即&lt;strong&gt;调试模式&lt;/strong&gt;下的编译时间尤其恐怖，调试的需求被忽视&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;心智负担&lt;/strong&gt;太重，要想轻松地写出显然正确的程序需要极其细心地推敲才行&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;原始的ranges库的例子&quot;&gt;原始的Ranges库的例子&lt;/h3&gt;

&lt;p&gt;既然讨论是因为Eric的Range库而发，作者先详细描述了这个用于计算毕达哥拉斯三元组（也就是勾股定理数）的例子，原文的例子比较长，但是核心的部分还是不难理解的。&lt;/p&gt;

&lt;p&gt;首先是一些简单的匿名函数，因为原作者想用&lt;strong&gt;函数式编程&lt;/strong&gt;的写法来演示他的新库；首先是一个使用了concept约束的&lt;code class=&quot;highlighter-rouge&quot;&gt;for_each&lt;/code&gt;函数&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// &quot;for_each&quot; creates a new view by applying a
// transformation to each element in an input
// range, and flattening the resulting range of
// ranges.
// (This uses one syntax for constrained lambdas
// in C++20.)
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;for_each&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;IndirectUnaryInvocable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indirect_result_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后还需要一个&lt;code class=&quot;highlighter-rouge&quot;&gt;yield_if&lt;/code&gt;函数用于按照给定的条件，生成一个结果出来，还是典型的函数式编程的路子 (这里省略了&lt;code class=&quot;highlighter-rouge&quot;&gt;maybe_view&lt;/code&gt;泛型的定义，可以去原文中翻查)&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// &quot;yield_if&quot; takes a bool and a value and
// returns a view of zero or one elements.
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield_if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Semiregular&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maybe_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
             &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maybe_view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;主体部分则是一个用惰性方法求三元组的代码，输入是一个理论上无限长的整数序列，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;for_each&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;yield_if&lt;/code&gt;的组合调用，过滤出符合条件的所有的三元组，
最终在现实输出的时候，用新的标准库的&lt;code class=&quot;highlighter-rouge&quot;&gt;take&lt;/code&gt;取前１０个元素打印输出。&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Define an infinite range of all the
// Pythagorean triples:
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iota&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;triples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;for_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iota&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;for_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iota&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;for_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iota&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield_if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;make_tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Display the first 10 triples
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;triple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;triples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'('&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;','&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;','&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;')'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果熟悉函数式编程的常规范式，会发现这个是一个再简单不过的例子；只是示例代码的实际意义可能显得不大，
毕竟最老式的Ｃ风格代码也还是容易理解的&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printNTriples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d, %d, %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当然处于代码可维护性的角度来考虑，新风格的现代C++代码要容易复用并且难出错的多，
因为代码的复杂度大大降低了，逻辑表达式的嵌套也被分散到了各个更小而又基本的组合函数上了。
不过这些因素不是Aras想要讨论的点。&lt;/p&gt;

&lt;h3 id=&quot;编译时间&quot;&gt;编译时间&lt;/h3&gt;
&lt;p&gt;作者很快毕竟了一下两个版本的编译时间，毫无悬念，现代的C++版本完败，而且差距是相当惊人的。
没有用任何模板元泛型编程手段的老C++代码只需要64毫秒就可以编译完毕，得到的可执行文件只要8KB（当然肯定是动态链接了系统库了);
这个还是带调试模式的编译，如果用上所有的优化手段，则编译耗费了71毫秒，并且在１毫秒之内得到了100组输出。&lt;/p&gt;

&lt;p&gt;而原例子中的现代的C++代码则需要用最新的C++17标准编译，在调试模式和正常模式下，
编译时间分别是2920毫秒和3020毫秒，运行时间则相差无几。所以作者得出的结论是，其他方面可能差不多，
性能也没有损失，编译时间却暴涨了几十倍。&lt;/p&gt;

&lt;p&gt;作为一个对比的例子，作者拿出来了一个开源数据库SQLLite的编译时间作为对比，并发现用同样的硬件，
可以在&lt;strong&gt;不到１秒钟的时间内完成SQLLite所有的２２万行Ｃ代码&lt;/strong&gt;的编译，这个差异还是很惊人的。
原因在哪里？无外乎是模板元和泛型的滥用导致庞大的头文件预处理和解析；这个问题在完整的模块化机制被支持之前，没有很好的解决办法。&lt;/p&gt;

&lt;p&gt;回到当前状态的range库，第三个版本的代码&lt;strong&gt;居然有180万行的代码全部包在头文件&lt;/strong&gt;中了，如果谁在自己的头文件中保护了这个库，编译的时候就真的会演变成一场灾难了。
这个抱怨和吐槽的确是稳准而狠，没法简单解决的。&lt;/p&gt;

&lt;h3 id=&quot;调试模式的编译&quot;&gt;调试模式的编译&lt;/h3&gt;

&lt;p&gt;吐槽完绝对的编译时间，作者又对调试模式下差不多的编译时间做起了批判，也许是游戏行业有很轻的需求来调试而没有很多的自动化测试吗？
另外一个第三方的例子来自于&lt;a href=&quot;https://www.youtube.com/watch?v=m1jAgV4ZOhQ&quot;&gt;Optiming OBJ Loader&lt;/a&gt;，里面给出的结论是，尽量&lt;strong&gt;避免使用STL&lt;/strong&gt;，
赤裸裸地打脸标准委员会呀。&lt;/p&gt;

&lt;h3 id=&quot;心智负担&quot;&gt;心智负担&lt;/h3&gt;

&lt;p&gt;这方面作者没有特别仔细的展开，似乎怨愤都集中在了上面的编译时间，并且在解密为什么编译时间那么长的时候，
顺带抱怨了&lt;strong&gt;模板元的滥用&lt;/strong&gt;导致非常复杂的处理规则需要小心谨记。
这方面的讨论其实已经由来已久了，因为社区的主要演进方向本来就是遵循下面的设计哲学&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;如果可能用库的方式来实现的特性，绝不会动用语言特性来实现。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这一考虑的初衷主要是为了&lt;strong&gt;照顾到规模庞大的遗留代码的历史包袱&lt;/strong&gt;，B.S在他的《C++ 语言的设计与演化》一书中曾经仔细阐明了这个重要的设计原则；
可惜这一考虑毕竟是有些矫枉过正的感觉；一些通过修改语言特性可以更简单实现的现代功能偏偏要通过复杂的宏和模板元来实现，一直被很多感觉不爽的用户口诛笔伐。&lt;/p&gt;

&lt;p&gt;不得不说，后向兼容真的是个勇敢而又艰巨的选择；年轻而又没有历史包袱的程序语言曾经屡屡嘲笑C++语言的复杂，
而真正等到他们变得成熟的时候，
真正面临同样的挑战，早期开天辟地新起炉灶的痛快劲儿马上消失殆尽的时候，才能体会到实际设计的复杂和中间的不得已而为；
很多&lt;strong&gt;设计错误越是想在后期去弥补就越是显得困难&lt;/strong&gt;；而用户总是会喜新厌旧寻找新的让他们感觉舒服的工具和环境。&lt;/p&gt;

&lt;p&gt;当然C++编程语言复杂的多范式支持本身的确也会让人写起代码来畏首畏尾，这方面也没什么可说的。
不过话说回来，从来就没有人要求用户必须熟悉全部的语言特性，才可以投入生产使用；
试图去掌握全部的语言特性的想法必然不能和具有几十年生命的跨度如此大的语言融合的很好。&lt;/p&gt;

&lt;p&gt;社区会如何反应这方面的挑战，是说模块化的提案已经在加速讨论和演进吗，还是说constexpr的增强可以给编译器更多的指示信息来提高编译速度？
毕竟Herb Sutter一直在推动让现代的C++语言往更好使用的方向去走，对面Rust语言遇到的困难和获得的经验，
也许可以被社区的大佬们借鉴。&lt;/p&gt;</content><author><name>Fei Yan</name><email>skyscribe.yf@gmail.com</email></author><category term="design" /><category term="programming" /><category term="language" /><category term="cpp" /><summary type="html">C++标准的演进和推出速度过慢一直被内外社区批评，甚至当第一个21世纪的语言标准终于于2011年发布的时候，标准委员会的人都自嘲说我们是一门计算机语言，所以0x需要用十六进制数表示。 进入了第二个十年之后，社区的老学究们终于决定引入时髦的＂发布火车＂的模型，滚动地推出新的功能，之后新的语言标准总算按照一个大版本一个小版本间杂而出的方式推到了程序员的面前。 只是社区中对于新的语言的发展方向一直有很多不同的声音，最近的一次大规模声讨则是起源于Aras P在这篇名为哀悼现代C++的博客文章。</summary></entry><entry><title type="html">用Rust实现一个高效的REST解析工具</title><link href="https://skyscribe.github.io/post/2018/09/23/rust-parsing-jira-tickets/" rel="alternate" type="text/html" title="用Rust实现一个高效的REST解析工具" /><published>2018-09-23T00:00:00+08:00</published><updated>2018-09-23T00:00:00+08:00</updated><id>https://skyscribe.github.io/post/2018/09/23/rust-parsing-jira-tickets</id><content type="html" xml:base="https://skyscribe.github.io/post/2018/09/23/rust-parsing-jira-tickets/">&lt;p&gt;公司里面进来切换到了一个新的Backlog管理工具来管理日常的需求和项目规划，可惜新的工具虽然是名门之秀的JIRA（来自于澳大利亚的ＩＴ公司confluence），但是访问起来却异常痛苦，
经常一个页面打开需要等待大半天还是不是崩溃。有些心急的同时已经默默地回到了老的方式，导出数据到Excel然后打开Office工具来搞定。
作为一名程序员，最简单直接的想法就是&lt;strong&gt;自己撸起袖子来写代码解决&lt;/strong&gt;呗，即使是投入产出比不高，好歹是在写工具的过程中提高了自己，一举多得何乐而不为呢？&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;之前用各种Shell/Awk/Sed/Grep等传统的脚本语言实现了太多类似的解析工具，这里不想再重复自己，因为耍自己熟悉的套路还有点浪费时间和生命的感觉。
简单翻阅了一下JIRADC的RESTAPI文档，发现它的API设计的还是比较完备的，当然也意味着&lt;strong&gt;解析的任务比较繁重&lt;/strong&gt;，除了解析基本的JSON文档，还要处理多个记录的分页。
考虑到服务器用浏览器打开都经常慢或者超时，那么最好也要能实现并发的请求和处理。这么多的需求考虑下来，其实传统的脚本语言的确有些勉为其难了。
当然还可以考虑被称为完成胶水的python语言，只是这么大的数据量和多并发处理，想想也挺繁琐的，况且还没有新鲜感，这个也是很重要的。&lt;/p&gt;

&lt;p&gt;于是便想到了之前每次学一半就因为太无聊而放弃的Rust语言；之前是因为只顾着读文档，走马观花地读，到了中间就读不下去了，因为&lt;strong&gt;之前太多的概念没有动手实践，总会很容易就卡壳&lt;/strong&gt;；
而Rust毕竟是被成为学习曲线很陡峭的严肃的编程语言。说不定这次可以进步更多呢，毕竟这次可是带着目标的去深入学习的，很多大师们都分享过这一绝招&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;深入学习一门语言还是要带着实际的项目去编码，才会更有效率。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当然这些项目大多是一些私人的小项目，这里正当其时。当然我想拉取的是服务器上数千人的数据，那么数据量本身也是很大的；
这方面Rust语言本身的运行效率也是我想观察和思考的一个方面。
起码从它的实际目标来看，作为一门面向系统编程领域并追求和C++一样的&lt;strong&gt;零成本抽象&lt;/strong&gt;设计目标的Rust语言来说，用来实现高效的文本解析工作也不应该有什么难度。&lt;/p&gt;

&lt;h2 id=&quot;实现&quot;&gt;实现&lt;/h2&gt;
&lt;p&gt;主要的需求就是字符串解析，而且是需要解析RESTAPI中的结构化数据，并按照自己的需要来分析和处理数据。
基本的HTTP协议解析和JSON处理是必然少不得的；这方面只要按照官方文档，准备好对应的cargo文件即可，一个命令就可以拉下来所有需要的第三方包的最新版本，这方面比C++进步太多了，那边厢module的提案还在遥不可及的草案讨论中呢。&lt;/p&gt;

&lt;h3 id=&quot;异步编程处理&quot;&gt;异步编程处理&lt;/h3&gt;

&lt;p&gt;因为需要处理服务器响应慢的问题，初步估算程序运行的瓶颈应该在IO，毕竟这可是一门系统编程语言，
就那么几千条文本数据的反序列化和查询变换，应该是可以在几百毫秒级别的运算中完成的。
因此程序的设计上必然要用到多线程处理和异步编程，可惜Rust对协程的支持还没有完善，也没什么大问题，启动多个线程来做就可以了。
这方面&lt;strong&gt;Tokio库是当之无愧的王者&lt;/strong&gt;，直接拉下来用就好了，官方的crate文档写的不错，例子也很简单易懂，
很多处理和JDK的executor处理很像似，即使不读文档，&lt;strong&gt;很多API望文生义也可以差不多&lt;/strong&gt;工作。&lt;/p&gt;

&lt;p&gt;使用中发现Tokio其实已经是一个比较大的库，上一次关注它的时候还是个比较简单精致的小工具库；
随着多个版本的迭代和功能的丰富，它在提供对底层的异步操作处理的基础上还增加了上层通信模型的封装，
并提供了它自己的&lt;code class=&quot;highlighter-rouge&quot;&gt;future&lt;/code&gt;实现，这方面和标准库中的类似设施并不完全一致，用的时候不加留意很容易陷入奇怪的编译错误无法自拔。&lt;/p&gt;

&lt;p&gt;考虑到服务器端本身不是很稳定，必须要处理好可能的失败，并且收集成功的查询，并发起对失败查询的重试直到成功为止；
HTTP协议的无状态保证和REST API的分页查询机制，使得我们只要保存查询条件，即可很方便地重试知道成功。
基本的带重试的查询是按照两步查询的思路进行的，第一步先查到总共的记录个数以便决定接下来还有多少个记录待查，
第二步则查询第一页之外的记录。&lt;/p&gt;

&lt;p&gt;出于简化期间，第一次可能的失败没有处理，大致的处理代码如下&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;//Search by given jql and issue fields, and collect all results in one single &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// result, 2-phases based search is used to calculating paging properly.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DeserializeOwned&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QueryResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jql&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;//first search&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.reset_pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()])&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.perform_parallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.issues&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;error!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;First search failed?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;panic!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unexpected ending!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;//remaining&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;info!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Got first result now, check remaining by page info!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.reset_pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.create_remaining&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.perform_parallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform_parallel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DeserializeOwned&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QueryResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.pending_jobs&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.finished&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.drain_all_jobs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.collect_all_responses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clean_finished_from_pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这里采用典型的&lt;code class=&quot;highlighter-rouge&quot;&gt;channel&lt;/code&gt;结构来交换信息，因为实际的查询处理是放在future里面并行处理的；
这也是Rust Book里面示例给出的方法，&lt;strong&gt;虽然有些麻烦但是肯定不会出错&lt;/strong&gt;。
主要的查询调度是通过&lt;strong&gt;联合所有的子查询并合并为一个组合的future&lt;/strong&gt;来完成的，这是个典型的函数式编程范式的应用句号；
每一个子查询将它自己的标识符和处理结构反馈到消息通道里面返回给调用者。&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drain_all_jobs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DeserializeOwned&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueryResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_queries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;//Drain all pending jobs &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.pending_jobs&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;//query this page&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nn&quot;&gt;StatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ok&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;parse_query_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.ok_or_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qry&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.startAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qry&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.startAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender1&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;RequestInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qry&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guard1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.fetcher&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.query_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.map_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
                    &lt;span class=&quot;c&quot;&gt;//TODO: handle exceptions in graceful manner?&lt;/span&gt;
                    &lt;span class=&quot;nd&quot;&gt;warn!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This job {} has failed by {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qry&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.startAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guard1&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qry&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.startAt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; 
                    &lt;span class=&quot;s&quot;&gt;&quot;failed&quot;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sub_queries&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub_fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.core&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub_queries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;协议解析和数据结构化处理&quot;&gt;协议解析和数据结构化处理&lt;/h3&gt;

&lt;p&gt;HTTP的解析毕竟繁琐，好在&lt;code class=&quot;highlighter-rouge&quot;&gt;hyper&lt;/code&gt;库的功能非常完备，一般能想到的都已经有支持了，
包括proxy的设置，请求响应的封装，都有丰富的API可供调用，直接用起来就行了，倒也没有太多的难点；
唯一稍微让人觉得有些不一致的是它的请求消息的设计采用的是典型的函数式的不可变设计，需要&lt;strong&gt;用一个builder来构建&lt;/strong&gt;，稍微熟悉一下即可。&lt;/p&gt;

&lt;p&gt;REST数据的处理上，有赖于REST本身强大的&lt;code class=&quot;highlighter-rouge&quot;&gt;Trait&lt;/code&gt;抽象支持，即便是没有官方的基于class的多态支持，
基于抽象数据类型的serde抽象还是提供了强大的代码复用能力；形形色色的第三方库只要声明对各种数据类型的&lt;code class=&quot;highlighter-rouge&quot;&gt;serde&lt;/code&gt;支持，
就可以&lt;strong&gt;方便地以非侵入的方式提供&lt;/strong&gt;给用户。只是从语法上，用户需要定义自己的结构体，
并且用头上加注解的方式添加声明让编译器知道该数据可以被放置在对应的数据解析的上下文中。&lt;/p&gt;

&lt;p&gt;Rust自身也默认规定了命名风格，并且对不符合它期望的命名一律报以警告处理；而第三方的API中的数据恰好和这一风格相悖；
好在&lt;code class=&quot;highlighter-rouge&quot;&gt;serde_json&lt;/code&gt;库也支持自己重命名另外一个名字，这样就可以绕开命名风格不一的问题，只是实际写出来的代码可能有些臃肿；
还有一种简单的办法就是告诉编译器下面的名字不遵循默认的下划线分隔的命名风格，没有很强的强迫症或者赶时间的话到时可以务实一点跳过编译器的警告。&lt;/p&gt;

&lt;p&gt;具体的绑定json的查询结果的结构如下&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serde&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serde_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;serde&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Deserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;serde&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;de&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeserializeOwned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[derive(Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Clone)]&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[allow(non_snake_case,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;dead_code)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QueryResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;//not used&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;maxResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;//total records&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;//actual issue structure&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[serde(bound(deserialize&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;T:Deserialize&amp;lt;'de&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;))]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;issues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后一个字段稍微有些复杂是因为程序中有多个不同条件的查询，返回的结构可能是不一样的，&lt;code class=&quot;highlighter-rouge&quot;&gt;serde_json&lt;/code&gt;
可以支持&lt;strong&gt;用泛型的方法来定制可扩展的抽象类型&lt;/strong&gt;。内部泛型中指定lifetime的做法在这里显得特别突兀，
但是暂时也没有更优雅的办法，因为出于效率的考虑，默认的Rust数据结构是具有移动语义的，
这里&lt;strong&gt;必须加上对应的生存周期的约束&lt;/strong&gt;，以便编译器可以在编译期间做好安全检查，防止非法的数据访问。&lt;/p&gt;

&lt;h3 id=&quot;结果的处理&quot;&gt;结果的处理&lt;/h3&gt;
&lt;p&gt;解析的结构都放在容器中，用于对取到的结果分析然后提取自己想要的信息，这方面的处理其实倒是平淡无奇，
无非是一些常规的查询和处理；当然由于本身数据是不可变的，用函数式的方法写出来代码更加清晰自然易懂。&lt;/p&gt;

&lt;p&gt;Rust本身提供了丰富的函数式操作类型，并有强大的 &lt;code class=&quot;highlighter-rouge&quot;&gt;iterator&lt;/code&gt;抽象了丰富的操作组合，但是某些稍微复杂一点的处理还是需要不少重复劳动；
&lt;code class=&quot;highlighter-rouge&quot;&gt;itertool&lt;/code&gt;这个工具库提供不少高级的功能；对于熟悉函数式编程的程序员来说，这一高级工具不容错过。比如下面这个是过滤其中某个特定领域的条目病按照某个给定条件分组之后再行统计规划状态的例子&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;//check planning status&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;planned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unplanned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.into_iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area_features&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.binary_search_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cmp_with_prefix_as_equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.sub_id&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.is_ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.group_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_system_split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.sub_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;//check if ET planned&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_items&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Testing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;planned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;planned&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;unplanned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;not planned!&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;format_args!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Fid = {}, Testing status ={}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buf_writer&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;编译驱动开发&quot;&gt;编译驱动开发&lt;/h2&gt;
&lt;p&gt;其实在官方的指导文档(Rust Book)中，几位布道者就提出了所谓的&lt;strong&gt;编译驱动开发&lt;/strong&gt;的编程实践；一路实践下来果然深有体会;
因为写代码实现的过程中，大部分在其他语言中用来调试的时间都被挪用到了和编译器做斗争的事情上。
一个原因可能是本身对某些第三方库的设计还不是很熟，需要边写代码边阅读它的设计文档，
另一个原因也许是跟Rust语言本身的设计哲学有很大的关系，因为它将编译器的静态检查能力推向了一个极致的地步；
可以说&lt;strong&gt;编译器的检查是极端保守的&lt;/strong&gt;，任何可能造成程序不稳定或者有数据访问冲突或者踩踏的行为，都不会呗编译器放过。
也只有做到了这样，它才可以大胆地保证，绝大部分情况下&lt;strong&gt;只要你的程序通过了编译，那么运行起来也就是没有问题的&lt;/strong&gt;。这种思路在软件工程上不得不说是一个很激进的尝试。&lt;/p&gt;

&lt;p&gt;相比较与传统的Ｃ和C++语言选择相信程序员，还要想尽量贴近硬件，还想要给程序员很多高级的武器以提高生产效率，
最终在实际的大项目中却往往走入难以为继的泥潭；也许Rust提出了&lt;strong&gt;一条更为坚实但是也更为艰难的路&lt;/strong&gt;，有多少程序员可以克服最初的不适应期都是个很大的难题；
尤其是关于生存周期检查的处理非常晦涩难懂，不深入了解它的原理，有可能就会被奇怪的编译错误所吓倒；
而出于性能的考虑，又不好轻易地选择copy数据结构，选择往往未必是那么容易。&lt;/p&gt;

&lt;h2 id=&quot;效率的问题&quot;&gt;效率的问题&lt;/h2&gt;
&lt;p&gt;毫无疑问，效率是一开始学习和思考的出发点之一，最终程序写完了自然要考察一下它的执行效率。
不出意外对于这个简单的小程序而言，数千条数据的解析和处理都可以在几百毫秒内完成；效率还是非常令人满意的。
毕竟没有很好的运行效率的话，这门艰深的语言几乎没有什么存在的价值了；
serde_json库称自己是最快的JSON解析库，还真不是白吹的。&lt;/p&gt;

&lt;p&gt;希望下次再动手写一个工具的时候，还可以再次深入的学习Rust的其它美妙之处。&lt;/p&gt;</content><author><name>Fei Yan</name><email>skyscribe.yf@gmail.com</email></author><category term="design" /><category term="programming" /><category term="language" /><category term="rust" /><summary type="html">公司里面进来切换到了一个新的Backlog管理工具来管理日常的需求和项目规划，可惜新的工具虽然是名门之秀的JIRA（来自于澳大利亚的ＩＴ公司confluence），但是访问起来却异常痛苦， 经常一个页面打开需要等待大半天还是不是崩溃。有些心急的同时已经默默地回到了老的方式，导出数据到Excel然后打开Office工具来搞定。 作为一名程序员，最简单直接的想法就是自己撸起袖子来写代码解决呗，即使是投入产出比不高，好歹是在写工具的过程中提高了自己，一举多得何乐而不为呢？</summary></entry><entry><title type="html">标准化和生产环境就绪的微服务</title><link href="https://skyscribe.github.io/post/2018/05/20/production-ready-microservice/" rel="alternate" type="text/html" title="标准化和生产环境就绪的微服务" /><published>2018-05-20T00:00:00+08:00</published><updated>2018-05-20T00:00:00+08:00</updated><id>https://skyscribe.github.io/post/2018/05/20/production-ready-microservice</id><content type="html" xml:base="https://skyscribe.github.io/post/2018/05/20/production-ready-microservice/">&lt;p&gt;微服务作为一种分布式的软件架构风格几乎已经席卷软件开发的各个角落；尽管它从被明确提出之后也很快经历了大量的质疑、批判乃至否定；
然而背后实践这一符合康威定律的简单（将问题分而治之）而又复杂（需要解决服务本身引起的的许多复杂的基础设施问题）的架构风格的组织却与日俱增。
其原因也不过是随着云计算技术的逐步深入，分布式架构成为最简单的选择，因为大部分情况下处于成本的考量，我们更需要水平扩展而不是垂直扩展；
微服务引入过程中的&lt;strong&gt;一些痛点也随着越来越多云原生应用的开源组件的出现而得到缓解&lt;/strong&gt;。尝试将微服务实践标准化以降低实施成本的努力也变得不再是“空中楼阁”了，
走的人多了，必然有些更容易走的”直路”显现出来。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;为什么需要标准化&quot;&gt;为什么需要标准化&lt;/h2&gt;

&lt;p&gt;Susan J.Fowler作为一名来自Uber的站点可靠性工程师(Site Reliability Engineer)见证了Uber自身将其庞大而又复杂的单体API剥离成逾千个微服务的，
并达到超过85%的微服务团队并无配备SRE这一角色也能确保自己的服务运行良好。同时她也见证了微服务团队（尤其是大型微服务架构）中SRE工程师所面临的巨大挑战：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对SRE本身的能力要求是全方位的，他/她必须是包括软件工程、系统工程、软件架构等多个方面的综合性专家&lt;/li&gt;
  &lt;li&gt;在有成百上千个微服务组成的企业应用中，大部分的团队更本不可能拥有SRE的资源；SRE也不太可能熟悉哪怕系统中大部分微服务的关键细节&lt;/li&gt;
  &lt;li&gt;SRE需要对系统整体的可靠性负责，然而任何一个微服务的SLA水平下降都可能带来整个系统的SLA下降；在大多数团队不配备SRE的情况下，
如何保证日常的开发中新引入的功能不会破坏整体的可靠性、可用性和性能的关键指标，或者如何做有效的回归和可靠性测试，并在发现可能的失败情况下，
及早地回退引起整体质量下降的服务代码，都是一个看起来几乎不可能的任务&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Susan希望他们可以找到一种简单而又直接的方法来定义微服务实践的规范程度，即一种简单而又可靠的标准，使得组织中的每一个微服务团队都可以仅仅需要遵循这些标准就可以交付符合SLA要求的服务，
同时还保有微服务架构本身带来的诸如自由选择编程语言、技术栈的优势。这一套标准其实是用一系列检查列表（CheckList)的方式提供，微服务团队在提交自己的实现之前检查这些列表，
确保所有的实现都能满足列表的要求的情况下才将代码引入到生产环境中；这样整个系统的SLA就可以得到保证。&lt;/p&gt;

&lt;h2 id=&quot;基本原则&quot;&gt;基本原则&lt;/h2&gt;

&lt;p&gt;Susan他们给出的标准化微服务的标准大概可以划分到八个大的基本原则之下，每个微服务必须满足&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;稳定&lt;/li&gt;
  &lt;li&gt;可靠&lt;/li&gt;
  &lt;li&gt;可扩展&lt;/li&gt;
  &lt;li&gt;容错&lt;/li&gt;
  &lt;li&gt;性能良好&lt;/li&gt;
  &lt;li&gt;被合理监控&lt;/li&gt;
  &lt;li&gt;有良好的文档&lt;/li&gt;
  &lt;li&gt;容灾就绪&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在这些大的原则之下，Susan他们还详细定义了每一个原则里面的详细列表，并要求每一个原则必须是&lt;strong&gt;可以量化&lt;/strong&gt;以方便提供度量结果，
从而可以极大地提高微服务系统的可用性。只有&lt;strong&gt;满足了这里列出的所有的条件&lt;/strong&gt;的微服务，才可以被认为是生产就绪的。&lt;/p&gt;

&lt;h3 id=&quot;微服务生态系统&quot;&gt;微服务生态系统&lt;/h3&gt;

&lt;p&gt;微服务从来都不是孤立从在的，它们被构建、运行和交互的环境就是它们生存的环境；大型的微服务系统的生存环境就像是一大片森林，一个沙漠或者一个大海；
将相关的&lt;strong&gt;整个环境考虑为一个生态系统&lt;/strong&gt;往往更有利于我们采用微服务风格来架构我们的应用系统。&lt;/p&gt;

&lt;p&gt;设计良好的可持续的微服务生态系统往往会尽力用一个基础设施层将底层的细节和上层的微服务应用相隔离开；这样微服务的开发人员可以像开发一个单体应用一样，
使用他们喜欢的技术和编程语言，自己决定服务内部的软件架构；并不需要过多考虑底层基础设施这些细节，比如操作系统、网络、存储等复杂的基础知识。
自然地，将这些基础设施保持地稳定、高效、可扩展并能良好地容错就成为一个非常基本的需求。&lt;/p&gt;

&lt;p&gt;微服务的生态系统可以简单地划分为四个层次，尽管有时候层次之间的界限并不是那么清晰而绝对&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;硬件层&lt;/li&gt;
  &lt;li&gt;通信层&lt;/li&gt;
  &lt;li&gt;软件应用平台&lt;/li&gt;
  &lt;li&gt;微服务层&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最底层的部分是硬件层，它负责处理诸如实际的物理资源，包括真实硬件、网络节点，乃至数据中心的机架、交换机或者SDN网络、存储设备等；这些设施可以是自己搭建的数据中心，
也可以是从其它的云服务商处租赁来，比如AWS EC2、Google GCP、MS Azure等。所有这些相关的细节被硬件层所管理。
硬件之上的操作系统，以及相关的配置，资源隔离和抽象设置，主机层面的日志、监控也需要被这一层统一提供；
具体的系统选择和日志、监控工具可能由企业应用具体的环境来选择决定。
某种意义上可以将这一硬件层看作是云时代的网络操作系统。&lt;/p&gt;

&lt;p&gt;硬件层之上的是通信层；该层本质上参与了上面两层的交互，因为&lt;strong&gt;所有微服务乃至软件应用平台的交互&lt;/strong&gt;都被这一层所处理。
从严格分层的角度来看，似乎这一层有些定义不太良好。幸运的是，基本的要素是清晰的。
它需要处理诸如网络设置、DNS解析、RPC设施、API端点控制、服务发现和注册、负载均衡等微服务底层治理设施。&lt;/p&gt;

&lt;p&gt;作为第三层的软件平台层负责处理所有微服务共享的内部工具、共享的基础服务等。
这一层必须提供整个系统范围内共享的基础应用软件设施，使得微服务团队&lt;strong&gt;不需要自己设计和维护他们自身微服务逻辑之外的复杂基础软件&lt;/strong&gt;；
从而微服务团队可以专注于自身需要实现的业务逻辑，而不是比较底层的软件技术。
设计良好的软件平台需要提供内部开发者共同使用的方便的&lt;strong&gt;内部开发工具,自动化构建和测试平台&lt;/strong&gt;，中心化的自动部署和发布方案，比如一些DevOps工具，自动发布工具，
微服务层面的日志、监控工具等。&lt;/p&gt;

&lt;p&gt;微服务层处于这个生态系统的最上层，主要负责其职责范围内的业务逻辑和API实现，并和底层的硬件、服务治理设施、通用应用软件平台隔离开。
唯一一个没有和下面几层完全隔离的就是微服务自身的配置。一种常见的做法是将所有的微服务的配置都用中心化的方式来管理和控制；然而这在大型的微服务软件中可能带来巨大的问题，
因为当微服务人员需要修改其配置的时候，往往不得不修改其下面几层的文件（因为被中心化托管），由于微服务数量庞大，开发人员往往不知应该改动哪里或者遗漏重要的配置。
这种情况下，更合理的方案是将各个微服务的配置放在自己的代码库中，然后让底层的工具或者平台可以访问这些配置文件。&lt;/p&gt;

&lt;h2 id=&quot;可靠性和稳定性&quot;&gt;可靠性和稳定性&lt;/h2&gt;
&lt;p&gt;微服务架构其实给软件系统的可靠性和稳定性带来的更多的挑战，这些挑战本质上是分布式软件架构内生的矛盾引起的，而我们又没有办法回到单体架构的时代。
从整个生态系统的角度来考虑，任何一个环节、要素的可靠性损失都会传导到相关的上下游，从而使得整个系统的可用性下降。&lt;/p&gt;

&lt;h3 id=&quot;构建稳定而又可靠的微服务的基本原则&quot;&gt;构建稳定而又可靠的微服务的基本原则&lt;/h3&gt;
&lt;p&gt;微服务架构给开发人员引入了巨大的灵活性，并使得快速的功能迭代成为可能。各个微服务团队可以选用他们自己所熟悉的编程语言、库和微观架构，
只要提供定义良好的API接口即可。每个服务的设计和功能特性都可能在随时发生着巨大的变化，因而整个系统中的任何一个微服务因为设计不良或者考虑不周引起的稳定性下降或者可靠性降低，
都会对整个系统的可用性和可靠性带来毁灭性的影响。因此我们天然期望&lt;strong&gt;微服务的任何一次代码的合入都不会引起&lt;/strong&gt;服务的可靠性、可用性水平的下降。&lt;/p&gt;

&lt;p&gt;构建和维护一个可以被称之为稳定而又可靠的微服务，意味着任何一次功能的添加、问题的修复或者代码的重构及演进不会带来整个系统的可靠性和稳定性的降低。
当然变得更好是会更受欢迎的。为了发布和维护可靠的微服务，我们需要保证有良好的开发流程来支持，并且最好有一个标准化的开发周期模型使得&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;新功能的开发或者其它原因引入的代码改动&lt;strong&gt;必须经过预先定义的多个阶段的流水线检查&lt;/strong&gt;，确保问题尽可能在早期阶段被发现并及时回滚&lt;/li&gt;
  &lt;li&gt;服务之间的&lt;strong&gt;依赖失效问题可以被尽早发现并阻止&lt;/strong&gt;；一般认为对服务API打版本标签是一种反模式而不值得提倡，因为这样很容易引起沟通不足而导致下游微服务意外失效&lt;/li&gt;
  &lt;li&gt;适当的路由检查、断路器控制应该被继承到通信层上，实现对微服务出错情况下的处理，防止引起系统性的崩溃&lt;/li&gt;
  &lt;li&gt;某个特定的微服务提供的API可以被废弃或者微服务本身失效的情况下，其它的微服务不应该一并失效&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;稳定而又可靠的微服务开发往往经历如下的开发模型&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;一旦开发人员提交代码的改动到仓库中的新分支（git模型），新的自动化构建任务即被创建起来执行，并做好自动化的代码检查和服务内部的测试&lt;/li&gt;
  &lt;li&gt;同时改动的代码需要被仔细的审查和评审，确保可能的问题被及早发现&lt;/li&gt;
  &lt;li&gt;只有当前两步的检查都没有问题的时候，新的代码才会被提交给外部的构建系统中和其它的服务做集成，打包，测试&lt;/li&gt;
  &lt;li&gt;测试通过的包会被同时发送给部署的流水线做持续部署测试和提交到服务对应的仓库中&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;部署流水线&quot;&gt;部署流水线&lt;/h3&gt;

&lt;p&gt;大型系统中的大部分错误通常都被认为是来源于错误的部署。在大型的开发组织中，可能有上百个微服务在按照各自的节奏做设计、开发和维护，
微服务团队之间通常很少有足够好的协调和沟通（因为康威定律决定了跨大型组织的沟通成本是极其高昂）。这种情况下，
任何一个微服务部署了错误的有问题的版本都有可能造成整个系统的停摆。这种情况下，引入复杂而又分阶段的部署流水线则成为保证微服务系统可靠、稳定的必需手段。&lt;/p&gt;

&lt;p&gt;当一个新的微服务版本被发送到部署流水线的时候（紧接着上一节的过程）&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;该版本暂时被标记为候选的发布版本，先放置到 Staging 阶段，并运行一系列的测试&lt;/li&gt;
  &lt;li&gt;如果上述测试都通过并觉得没有太大问题，则顺序进入下一个“金丝雀部署”阶段；这里的环境其实是从正在线上运行的微服务生产环境中，
跳出一部分工作负载，让新的候选微服务版本提供服务，并观察是否有异常情况发生&lt;/li&gt;
  &lt;li&gt;如果没有问题，则可以慢慢地按照既定的策略用新的微服务版本逐步替换就的服务版本&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;任何一个阶段发现问题，则应当必须尽快回滚，基础设施和构建服务必须能快速回溯到出问题的改动，待对应的微服务团队诊断问题进一步修复。
通常情况下，Staging 的测试环境往往和后边两个阶段的环境有比较大的区别。金丝雀发布阶段可以根据服务实例的个数或者API的流量选择重定向一小部分到新的候选服务版本；
譬如5%到10%的生产环境的情况可以被路由到新的服务实例上做处理；一旦发生错误不致于给用户带来很大的困扰，并且的出错的情况下，应该及时终止这一部署回滚到稳定的生产环境版本，
并抓取对应的日志、诊断信息，以便SRE工程师或者具体的微服务团队解决问题，重新发布。&lt;/p&gt;

&lt;h4 id=&quot;staging&quot;&gt;Staging&lt;/h4&gt;
&lt;p&gt;Staging环境的测试虽然往往和生产环境不同，然而也需要尽量保证硬件设置上和生产环境比较接近，只是没有真正的用户流量。
由于资源的限制，在云平台上生产环境可能有数百个微服务的实例来均衡处理实际的负载，而staging环境上实例的数量可能就少得多。
用户请求的流量可以用mock的方法来模拟测试，或者用工具甚至手工测试的方法来验证。它和开发环境的本质不同是，发布到该环境的服务是可以被发布的候选版本。
开发人员&lt;strong&gt;必须用同等的重视程度和优先级来应对staging环境上可能出现的错误&lt;/strong&gt;并及时修复。&lt;/p&gt;

&lt;p&gt;有两种不同的方法来选择和构建Staging环境，一种是Full Staging，这种情况下，staging环境基本上就是生产环境的比例缩小的一个拷贝。
所有的微服务生态系统都被完整的运行，它可以和生产环境共享同样的基础设施、平台等，只是前后端的流量不是来自于真实的用户，
它也会有自己单独的数据库，并且永远不会和生产环境的微服务发生通信和交互。另外一种配置方式被称之为Partial Staging，
这种环境下，Staging和生产环境并没有完全做镜像隔离，即staging环境的微服务（往往是候选版本）可能会和生产环境中的微服务有进行交互，
从而使用生产环境中的下游微服务的API，当然处于数据保护的需要，生产环境中的数据不应该被Partial  Staging的微服务所修改，而只允许读取和访问操作。
由于Partial Staging环境中的候选版本的微服务可能访问生产环境中的服务，测试和配置的时候则需要更加小心一些，以防对生产环境造成比较大的破坏。&lt;/p&gt;

&lt;h4 id=&quot;金丝雀部署&quot;&gt;金丝雀部署&lt;/h4&gt;

&lt;p&gt;金丝雀部署的想法其实是借鉴了以前矿工下矿井的时候的准备不周，由于不确定矿井中的瓦斯含量和氧气含量是否会由于人体无法感知的异常而引起死亡等事故，
矿工们往往会带一只金丝雀下井，金丝雀对环境的敏感程度远远超过人类，如果一氧化碳含量过高，金丝雀就会停止鸣叫从而矿工们便知道井下不安全。
金丝雀部署的策略和旧时矿工们所采用的策略类似，先选择一小部分真实的环境做实验，如果没有异常出现说明可以继续放心部署下去。&lt;/p&gt;

&lt;p&gt;金丝雀部署是&lt;strong&gt;将候选的微服务版本直接放入了生产环境中&lt;/strong&gt;使用(尽管只服务一小部分流量)，因此应该认为它是生产环境部署的一部分。
所有的监控、诊断、日志信息应该和生产环境中的配置完全相同，以便开发人员可以很方便地调试和解决可能出现的问题。如果有异常的情况出现，
自动回滚金丝雀环境也是至关重要的；因为任何的错误都意味着声场环境出了问题。&lt;/p&gt;

&lt;p&gt;另外一个相关的问题是怎么确定一个服务的新候选版本应该在金丝雀部署环境中呆多长时间才可以被放心地放入大规模部署中。
这个其实取决于具体微服务的流量模式和具体的业务逻辑模型，我们需要根据服务的流量模式和业务模型确定一个金丝雀周期时间，
只有活过了事先定义好的周期时间后，对应的候选版本才能进一步部署到生产环境中。&lt;/p&gt;

&lt;h4 id=&quot;生产环境的部署&quot;&gt;生产环境的部署&lt;/h4&gt;

&lt;p&gt;任何一次的构建和发布到部署环境的改动都应该尽力保证做到稳定而可靠。经过前述各个阶段的测试和检查，
最终部署到生产环境的微服务候选版本应该是被充分测试和验证过的，&lt;strong&gt;任何情况下（除非是一些极端危急的情况），都不应该跳过前述的步骤&lt;/strong&gt;而直接放到生产环境中。
最后的部署可以是采用一次性全部部署到所有的实例上的方式，也可以采用更审慎的方式，按照某种预先指定的百分比策略逐步铺开，
比如先部署25%的实例，再慢慢到50%，75%乃至最后完全部署成功。其它的策略也可以按照服务的国家、地区、数据中心、或者混合上述这些策略来部署开来。&lt;/p&gt;

&lt;p&gt;确保上述的开发和部署流水线被正确执行是保证微服务系统稳定、可靠发布和运行的关键，因为只有如此，
才能有把握将可能出现的问题在发布之前被尽可能早地揪出来修复掉，避免破坏生产环境的稳定、可靠运行。
对某些开发者来说，严格遵循上述的周期和流水线可能显得笨拙而缓慢，然而很多情况下，期望一天可以发布数次微服务的变更而又不破坏系统的稳定性和可靠性，
在复杂的大型微服务系统中变得几乎不可能。每隔几个小时就发生变化的微服务很少是稳定而又可靠的。&lt;/p&gt;

&lt;h3 id=&quot;依赖管理&quot;&gt;依赖管理&lt;/h3&gt;
&lt;p&gt;微服务架构的一大设想就是各个微服务团队可以独立地发布和演进他们的微服务；这在理论上没什么问题，现实环境中依赖却无处不在。
从设计上来说，我们可以努力减少服务之间的依赖和耦合，却永远不能一劳永逸地消灭依赖。几乎每一个微服务都有上下游的依赖，
它需要从上游的微服务接收请求，处理返回，并在处理的过程中调用下游的微服务提供的API。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;理解微服务的上下游依赖，事前仔细的规划和应对可能的依赖失效、错误&lt;/strong&gt;是确保服务可靠、稳定运行的关键要素之一。因为任何上游服务的可用性下降如果没有被正确处理，
都会导致该微服务的可用性（SLA水平 ）大大下降。为了提高可用性，微服务必须对其所依赖的服务做好失效时的应对措施，采取诸如冗余备份、回滚、缓存或可选副本的方式，
以便所依赖的微服务出现失败的时候，&lt;strong&gt;整个系统不至于有单点故障&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;为了方便规划、跟踪和管理，微服务之间的依赖关系必须被很好地分析、文档化并实时更总变化。任何可能导致微服务系统SLA水平下降的依赖都应该被包含在本微服务的架构图中，
并放在微服务的仪表盘中被实时监控着。有可能的情况下，最好尽可能地自动产生服务实现的依赖关系图，便于跟踪和规划。有了这些东西，
接下来一个关键的步骤就是设置冗备份、缓存等；具体的情况需要依据实际微服务的具体情况而定。一种常用的设置cache的策略是所谓的LRU方法，
即最近使用的数据被放置在一个队列中，当队列满的时候则将最长时间没有使用的数据给删除掉。这种缓存策略也常常被称为防御性缓存。&lt;/p&gt;

&lt;h3 id=&quot;路由和服务发现&quot;&gt;路由和服务发现&lt;/h3&gt;

&lt;p&gt;另外一个保证可靠性和可用性的考虑是需要保证第二层即&lt;strong&gt;微服务生态中的具体的微服务实例之间的通信层总是可靠的&lt;/strong&gt;。
用于保证这一层可靠性的机制即是服务注册、服务发现和负载均衡。为了保证通信的可靠，任何时刻某个服务实例的状态必须是明确知道的，
这就潜在地要求微服务实例的健康检查必须持续地进行，以确保服务请求不会被发送到失效的节点上造成请求失败。
一种最常用的方式是，采用一个特定的和业务通信无关的通道来监控服务状态。被监控的服务最好需要返回一些有明确意义的信息而不仅仅是返回诸如200 OK这样的状态码。&lt;/p&gt;

&lt;p&gt;如果一个服务的状态变得不可用，那么负载均衡就要做好正确的路由重定向，以保后续的请求不会转发给失效的节点。
如果整个微服务实例变得不可用，那么负载均衡则需要确保在问题被修复之前，所有的请求都不会路由给失效的微服务。
然而负载均衡器并不是唯一的选择，在网络没有出现故障单大批微服务返回异常的情况下，断路器该被用来及早地断开微服务调用链路上的尽量靠近上游的节点，防止系统失败蔓延。&lt;/p&gt;

&lt;h3 id=&quot;版本升级和微服务删除&quot;&gt;版本升级和微服务删除&lt;/h3&gt;

&lt;p&gt;旧版本的API需要退出整个系统的情况并不是很少见；如果没有仔细规划和应对该情况，也会引起预料之外的系统稳定性下降。
微服务团队打算废除某些旧版本的API的时候，他们&lt;strong&gt;必须确保没有使用旧版本服务的客户端（下游）遭到波及&lt;/strong&gt;。解决这一问题本身没有很好的技术手段，
可能需要更多依赖于一些社会工程学上的手段，和具体组织的文化、组织结构密切相关。&lt;/p&gt;

&lt;p&gt;典型的流程要求旧版本的微服务用户必须被提早通知到（如果做了很好的微服务架构文档管理则不是什么难事），提供新版本的微服务团队需要告知
原有的客户怎么迁移到新的版本，何时开始彻底废弃老的版本。&lt;strong&gt;在旧版本被废除之前，监控整个系统的状况是至关重要&lt;/strong&gt;的。
删除一个过时的微服务的情况和版本迁移是类似的情况；但是经常被忽视的是，忘记删除一些不再使用的微服务也会降低系统的可靠性和可用性；
需要尽早被监控并在合适的时间尽早退出微服务生态系统。&lt;/p&gt;

&lt;h2 id=&quot;可扩展性和性能&quot;&gt;可扩展性和性能&lt;/h2&gt;

&lt;p&gt;生产环境就绪的微服务&lt;strong&gt;必须要是可扩展并且性能良好&lt;/strong&gt;的。它不但能处理大量的请求和任务，并可以根据需要动态伸缩实际使用的资源，
合理利用云平台基础设施的优势降低商业成本。确保微服务具有良好的可扩展性和性能，需要我们正确理解微服务的定性和定量的扩展因子，
硬件的效率，正确地识别资源限制和使用瓶颈，正确地估计容量和规划流量的动态扩展情况，以及存储的可扩展性和依赖的动态扩展性。&lt;/p&gt;

&lt;h3 id=&quot;保持可扩展和高性能的重要原则&quot;&gt;保持可扩展和高性能的重要原则&lt;/h3&gt;
&lt;p&gt;正确评估大型的分布式微服务架构系统的挑战比传统的单体应用要大得多，不幸的是这是由分布式软件系统和计算机架构的内生复杂性所决定的。
简单来说，你的微服务系统牵扯到的微服务越多，某单个微服务本身的性能和扩展性对整个软件系统的影响就越小 - 这里的关键是我们必须看清全局。
另一方面，在一个增长而活跃的微服务系统中，流量可能在日渐增加，&lt;strong&gt;每一个微服务都必须能够随着系统的规模的增加而良好地扩展&lt;/strong&gt;才不至于使整个系统遭遇性能问题。
对任意一个微服务我们必须对下面的这些信息做到心中有数&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;定量和定性的增长规模&lt;/li&gt;
  &lt;li&gt;硬件资源的使用效率情况&lt;/li&gt;
  &lt;li&gt;资源瓶颈和需求情况以便合理地做容量规划&lt;/li&gt;
  &lt;li&gt;确保微服务的依赖的下游微服务也能够随着自己很好的扩展&lt;/li&gt;
  &lt;li&gt;流量可以被用可扩展的方式所管理和控制&lt;/li&gt;
  &lt;li&gt;任务和请求可以被高效地处理&lt;/li&gt;
  &lt;li&gt;数据必须被以可扩展的方式所存储&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;增长规模&quot;&gt;增长规模&lt;/h3&gt;
&lt;p&gt;我们需要从来两个方面来分析和理解微服务的增长规模：定量增长规模和定性增长规模；两者同时在分析和规划资源分配的时候起着至关重要的作用。
定性的增长规模可以从对给定微服务在整个微服务生态系统中的重要性和对相应的上层业务逻辑的关键指标的影响上分析的来。
定量的增长规模则需要用可以度量的、定义良好的、定量的数值来确定该微服务具体可以处理多少业务流量。&lt;/p&gt;

&lt;p&gt;定量的指标经常用每秒请求次数（RPS）和每秒查询测试（QPS）来表述。前者经常用来描述微服务本身的API请求规模，后者则更多用于数据访问情况；
很多时候两者是可以互换的。这些指标很重要，但是在失去上下文（即定性指标）的情况下可能就毫无用处。
我们经常可以用负载测试的方式来衡量微服务的定量指标，和历史数据做对照来确定给定的微服务是否满足扩展性需求。&lt;/p&gt;

&lt;p&gt;考虑到&lt;strong&gt;微服务在大的微服务软件生态系统中从来不是单独存在的，我们也需要根据具体的业务逻辑规则来分析定性的增长规模指标&lt;/strong&gt;，这就是定性增长规模的用武之地了。
整个系统的业务逻辑往往是绑定在整个微服务生态系统的，而不仅仅是某一个具体的微服务。微服务团队需要根据业务分析团队传达的高层业务逻辑需要，
分解到自己的微服务的上下游逻辑，然后来确定自己的微服务需要应对什么样的扩展性要求；这些分析必然是模糊的，却和定量指标一样重要。&lt;/p&gt;

&lt;h3 id=&quot;资源有效使用情况和使用瓶颈&quot;&gt;资源有效使用情况和使用瓶颈&lt;/h3&gt;
&lt;p&gt;在一个由很多微服务构成的应用软件系统中，诸如网络、运算节点、存储等资源总是有限而昂贵的。
出于成本和资源利用率最大化的考虑，整个微服务生态系统需要&lt;strong&gt;按照所提供的业务逻辑的重要性对系统中的微服务做好优先级分类&lt;/strong&gt;，
使得优先级更高的微服务总是可以得到更大份额的资源使用。
技术上的挑战则往往来源于上述的微服务生态系统的最底层，诸如是否给某个微服务分配固定的物理资源（成本高但是可靠），或者某些类型的微服务是否可以共享某些资源，
同时微服务可靠性的潜在要求往往需要我们尽可能地隔离同一个微服务的多个实例，以提高物理硬件失效情况下的可用性。&lt;/p&gt;

&lt;p&gt;规划资源分配之前，还需要着重检查的一件事是确定微服务的资源需求情况和使用瓶颈。这些瓶颈可能来源于一些扩展性上随着资源配额的变化而不能很好扩展的具体限制。
资源需求情况是指某个微服务需要多少的物理资源才能顺畅地运行，以便&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;有效地处理任务&lt;/li&gt;
  &lt;li&gt;很好地实现水平或者垂直扩展&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最常见的需要识别的需求要素当然是微服务单个实例运行需要的CPU计算资源和RAM。这两者是微服务实现扩展的基本要素。
确定某个微服务的CPU和RAM情况可能会有如下的挑战&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;水平扩展还是垂直扩展&lt;/li&gt;
  &lt;li&gt;扩展的极限在哪里&lt;/li&gt;
  &lt;li&gt;单个服务实例需要处理的业务流量会是怎样的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;资源使用的瓶颈则往往来源于微服务自身设计上的一些限制，这些限制本身会对服务的扩展性产生决定性的影响，从而无法通过添加更多的资源提高任务处理的吞吐率。
这些资源瓶颈可能是来自于基础设施的限制，也可能来自于微服务自身内部架构设计的制约：因为任何软件架构决策都充满了取舍。&lt;/p&gt;

&lt;p&gt;当资源的瓶颈没有办法很好分析和预测的时候，一种好办法是做充分的负载测试。&lt;/p&gt;

&lt;h3 id=&quot;容量规划&quot;&gt;容量规划&lt;/h3&gt;

&lt;p&gt;容量规划用于解决当微服务的实例被提供更多的物理资源的时候，它可以以适当的方式扩展来处理更多的业务工作负载。
要达到这一目标，需要保证&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;资源被有效地使用&lt;/li&gt;
  &lt;li&gt;事先为业务增长做好规划&lt;/li&gt;
  &lt;li&gt;从&lt;strong&gt;一开始就为服务的性能和扩展性做好设计&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为确保微服务系统可以很好地随着业务量的增长很好地利用资源，&lt;strong&gt;需要做好定期的资源规划&lt;/strong&gt;，基本的原则包括&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;事先确定好每一个微服务的资源需求情况&lt;/li&gt;
  &lt;li&gt;将这些需求编制进资源预算中&lt;/li&gt;
  &lt;li&gt;确保对应的硬件被预留好可以处理阶段内的业务增长
做好定期准备的好处是，当业务增长的时候，永远不会出现因为准备不足而造成的服务不稳定或者不可用。反之，
如果微服务系统没有为业务的增长做好合适的准备和规划，带来的服务宕机或者不可用招致的损失回事巨大的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;资源容量规划上的另外一个挑战是，规划时候的认为疏忽或者错误可能引起生产环境上的线上故障从而带来损失。
一种自然的解决之道是，尽可能地将这些过程做成一个自动化的内部资源规划工具，这个工具就可以放在生态系统的第三层中维护，使得所有上层的微服务团队都可以使用来进行试算。&lt;/p&gt;

&lt;h3 id=&quot;依赖服务的扩展性&quot;&gt;依赖服务的扩展性&lt;/h3&gt;
&lt;p&gt;即使一个微服务被细心地设计以方便很好的扩展，如果它所依赖的微服务没法很好地随着业务量的增长来扩展，整个微服务系统依然是无法满足扩展性和性能要求的。
确保某个微服务所依赖的微服务都可以随着业务量的增长而顺利地扩展是确保微服务系统生产环境就绪的重要条件之一。&lt;/p&gt;

&lt;p&gt;微服务依赖链条的可扩展性必须得到满足潜在的意味着我们&lt;strong&gt;必须要保持整个组织的所有微服务都需要采用同样的标准&lt;/strong&gt;。
如果只有核心而又关键的微服务满足高可扩展性，而其他的上下游依赖的微服务不同时满足，则整个微服务系统就无法按照实际业务负载的增长顺利地实现平滑扩展。
除了保持高度的设计标准化之外，微服务团队需要尽力地确保自己所依赖的微服务可以按照自己的要求正常地伸缩扩展。
&lt;strong&gt;跨微服务团队的沟通变得至关重要&lt;/strong&gt;，否则系统的关键扩展性瓶颈就无法及时地识别；某种程度上说，这和微服务架构本身的灵活性是相互制约的。
一种策略是，确保微服务团队之间经常进行架构的评审，并将扩展性的影响和依赖服务的扩展性情况放在微服务架构设计文档中。&lt;/p&gt;

&lt;h3 id=&quot;流量管理&quot;&gt;流量管理&lt;/h3&gt;

&lt;p&gt;微服务系统必须能处理日渐增长的业务流量，并用更为智能的方式管理流量的增长；并保持良好的扩展性和效率。做到这一点需要我们&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;根据业务的增长规模来&lt;strong&gt;事先预估将来流量的增减&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;流量增减的模式必须被充分分析和理解，并以及做好准备；这样新引入的对微服务的改动如果会引起流量处理模式上的变化可以被预先分析和规划。
服务监控措施也可以顺利跟上，以便在出问题的时候能尽快抓住问题的根源提供快速修复，避免造成业务损失。&lt;/li&gt;
  &lt;li&gt;微服务必须能够处理流量增长过程中可能出现的爆发和流量尖峰。它必须能以可扩展的方式应对可能出现的业务俱增或者骤降，
有效地伸缩使用分配的硬件资源，防止可能的流量洪峰造成整个系统的奔溃。然而这些总是说起来容易作起来难。即使是设计良好的微服务，
即便他们拥有良好的监控、日志措施，一旦出现流量尖峰仍然可能带来系统性的问题。通常来说，这些尖峰应该在基础设施层面做好规划，
并辅以适当的负责测试措施来事先演练可能出现的情况。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通常情况下，大型的微服务系统可能跑在跨越多个地区的数据中心上，这些数据中心甚至可能跨越地理上相距甚远的国家。
&lt;strong&gt;数据中心之间的数据通信出现问题&lt;/strong&gt;并不是一个少见的现象；在基础设施层做好流量的分发和路由是一种常见的做法，
当然上层的微服务应用也要做好流量被重定向到其它数据中心的准备；这个过程中系统的可用性还不能降低太多。&lt;/p&gt;

&lt;h3 id=&quot;任务管理&quot;&gt;任务管理&lt;/h3&gt;

&lt;p&gt;任何一个微服务都需要出来来自其上游的某些任务请求，做相应的本地处理或者运算，返回处理响应给请求的发送者。
这个过程中，它可能还要产生新的请求发给其下游的微服务完成自己的处理过程；这里面的每一次处理可以成为一个任务。
线上的微服务系统在任一时刻可能有大量的任务被同时处理，性能和扩展的角度要求我们尽量提高微服务的处理能力以便更有效地使用资源。
有许多制约因素值得考虑&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;编程语言和对应框架的限制，很多时候多任务处理的能力和微服务本身的编程语言选择密切相关，
因为不同的编程语言可能有自己特色的平台框架来完成任务处理，并发控制，异步调度等纯技术的挑战。
某种程度上说，编程语言的选择是具体微服务设计中的最大的架构决策；这方面需要根据具体微服务的目标和团队背景合理选择，没有一种编程语言适用于所有场景。
当然选择太多的编程语言也会带来巨大的平台支持挑战。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;除了编程语言上的限制，微服务团队在设计自己的服务的时候，也需要用标准化地方式思考他们的架构怎么处理任务，这种处理的效率怎么样，
当更多的请求上来的时候它的处理机制是否容易扩展的问题。为了提高处理能力，任务处理需要支持并发和分区。
并发意味着不能采用单线程的方式一个任务处理完再调度下一个的方式，因为这样会浪费大量的资源并引起竞争和锁开销。
分区则要求我们可以将大的任务拆分成小的颗粒去并行调度和执行，执行完毕之后结果可以高效地合并起来。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;数据存储的扩展性&quot;&gt;数据存储的扩展性&lt;/h3&gt;

&lt;p&gt;微服务系统中的数据存储访问和管理经常成为性能和扩展的痛点。微服务&lt;strong&gt;怎样设计它的数据分割和扩展往往成为整个微服务系统扩展的一个最大的限制&lt;/strong&gt;因素。
选择正确的数据库系统（不同的微服务可能有不同的选择，完全由业务逻辑的特点决定）在微服务设计中是一个至关复杂的话题。&lt;/p&gt;

&lt;p&gt;仔细审视微服务生态系统的四个层次发现我们可以有两种思路，一种是在平台层将数据库软件作为服务提供给具体的微服务；一种思路是由各个微服务团队自己选择
采用哪种数据库，怎么集成、打包和发布他们的数据库。当然还有一种混合的思路也可以工作良好，即平台层提供数据库服务，
同时允许微服务团队在给定的数据库平台服务不匹配他们的需求的时候，选择他们自己的数据库。&lt;/p&gt;

&lt;p&gt;无论采用哪种方式，微服务团队都需要考虑应该采用关系数据库，还是采用弱结构化的NoSQL数据库；他们的业务扩张的方式是更需要水平扩展增加实例，还是水平扩展分配更多的资源。
一般来说，如果水平扩展的要求比较高，读写需要并行地进行，那么NoSQL可能是更好的选择。&lt;/p&gt;

&lt;p&gt;另外一个麻烦的挑战来源于数据库的测试，尤其是&lt;strong&gt;测试数据的构建、使用和管理&lt;/strong&gt;。
在部署流水线中，staging阶段需要读写真正的数据库，full staging的情况下，测试环境会有自己独立的数据库，所有的测试数据库访问都会和生产环境的数据隔离开了。
而partial stagging的部署情况下，测试可能需要访问生产数据库；这个时候我们需要格外小心确保生产数据库可以正确地区分测试数据不至于被写坏，
并且测试过程中产生的数据可以被定期地清除以免产生不必要的垃圾。&lt;/p&gt;

&lt;h2 id=&quot;容错和容灾演练&quot;&gt;容错和容灾演练&lt;/h2&gt;
&lt;p&gt;生产环境就绪的微服务系统需要保证能在服务出错的情况下仍然可用，并在发生灾难性故障的时候，有恰当的应对措施提供定义好的可用性等级。
这不仅要求微服务系统设计经过仔细的规划，准备好灾难处理，还要求时不时地将某些微服务置于失效的情况下，然后确保它可以正常而优雅地恢复服务。&lt;/p&gt;

&lt;h3 id=&quot;容错处理的基本原则&quot;&gt;容错处理的基本原则&lt;/h3&gt;

&lt;p&gt;在一个由很多个微服务组成的微服务系统中，任何一个可能发生错误的微服务都最终会在某个时间出错。复杂的服务间依赖关系会导致其中一个服务的错误
蔓延到其他相互依赖的服务上，如果处理不当最终会导致整个系统的失效和不可用。唯一的应对措施是，&lt;strong&gt;务必保证系统中的每一个微服务都是&lt;/strong&gt;可容错的并做好容灾准备。&lt;/p&gt;

&lt;p&gt;要想达到上述目标，第一件事情就是需要定位系统中的单点故障并竭力从设计上去除这些单点故障。所谓的单点故障是指，
某个服务（或者其他实体）出现故障的时候，整个系统就会变得不可用。在微服务生态系统中，四个层次中的每一层都可能存在潜在的单点。
有时候并不是系统中的所有单点故障都可以完美地从设计中移除。此时我们需要识别系统中可能的失败场景，并做好应对措施。&lt;/p&gt;

&lt;p&gt;从设计上我们需要做到让微服务可以应对两种可能的错误&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;内部错误，即微服务内部设计上的可能的错误&lt;/li&gt;
  &lt;li&gt;外部错误则包括微服务生态系统上其它层次的错误&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一旦我们移除了单点，并识别到了可能的失败场景，下一件重要的事情是需要验证和测试是否我们的微服务可以在出现错误或者灾难的时候可以从容地从错误中恢复服务；
并因此&lt;strong&gt;确定微服务是否具有足够的弹性&lt;/strong&gt;来应对错误。再好的设计都必须用严格的测试来保证当具体的微服务被置于错误的场景的时候系统是否可以足够从容地恢复。
一种常见的做法是，定期而随机地将生产环境中的某些微服务置于失效的场景（杀死或者关闭某些基础设施），并测试是否系统的正常运行收到影响。&lt;/p&gt;

&lt;p&gt;由于并不是所有的错误和灾难都可以被事前预测，非技术的组织因素也应该被仔细准备。包括错误检测机制和应对策略需要被预先准备并制定好周密的计划；
一旦出现事前未预料到的故障，可以按照事前定义的策略很快地处理以恢复系统服务。&lt;/p&gt;

&lt;h3 id=&quot;避免系统单点故障&quot;&gt;避免系统单点故障&lt;/h3&gt;

&lt;p&gt;理论上说，任何一个微服务从设计上来说都不应该引入单点故障；而现实情况是，很多微服务都会经常性地编程系统的单点。
在系统真正失败的时候识别系统中的微服务单点是很容易的，而事前分析和发现系统的单点则困难得多；当然我们要也能通过坐等单点故障出现来慢慢修复单点。
一种好办法是事先和具体的微服务团队进行服务架构评审，并通过仔细的分析和提问发现潜在的单点。架构师可以和微服务团队的成员在白板前
就该微服务可能的错误场景进行讨论，借此识别可能出现的故障点。一旦识别到这些可能的故障点，要么我们需要从设计上将其从微服务架构中去除，
要么就要设计好应对措施；注意前者并不是总能够做到的。&lt;/p&gt;

&lt;h3 id=&quot;典型错误场景&quot;&gt;典型错误场景&lt;/h3&gt;

&lt;p&gt;识别可能出现的错误或者灾难场景是去除单点故障之后的下一步要做的要紧事。通常我们可以依据微服务生态系统的层次划分，将这些错误和灾难分为四类&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;最常见的错误是硬件的错误或者失效&lt;/li&gt;
  &lt;li&gt;基础设施层（通信基础设施，中间件，网关、路由、服务发现）的故障&lt;/li&gt;
  &lt;li&gt;依赖微服务的失效&lt;/li&gt;
  &lt;li&gt;微服务内部的错误&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;完整地列举所有可能的错误场景是不现实的，然而分析一些常见的失效场景却可能是非常有意义的。
这些错误可能和整个组织的文化和行为方式有密切的关系，并会对整个微服务生态系统的可靠性造成巨大的影响。
当然这也是为什么我们需要标准化的微服务实践以便更好地规避这些可能的陷阱。&lt;/p&gt;

&lt;p&gt;第一种常见的错误是缺乏足够的微服务设计和充分的架构分析和讨论，从而使得&lt;strong&gt;服务的设计低劣&lt;/strong&gt;。这在大型的组织中影响格外大需要更加小心留意。
需要避免这种错误的原因也显而易见：没有人可以有能力知道大型系统的所有细节，没有人知道四个层次中所有的关键细节知识。
当新的系统被设计，新的微服务被添加的时候，确保生态系统中的四个层次中的工程师参与设计的评审过程以决定系统或者服务应该怎样构建和运行是是至关重要的。
由于微服务系统的演进速度可能很快，定期的设计评审和文档化以保持架构的新鲜度往往是必须的：死的架构文档是没有意义的。&lt;/p&gt;

&lt;p&gt;第二种场景的错误是缺乏足够充分的代码评审。当然这个问题不是微服务架构独有的，微服务架构的方式却有意无意地放大了这个问题的严重程度。
每个微服务的设计和演进和其他微服务尽量保持解耦这一目标给微服务组织带来了新的挑战。复杂的微服务系统中，要求频繁的上下文切换，更多的汇报或者会议，
管理人员对速度的迷恋都会导致无穷无尽的bug被引入到系统中而没有被恰当的代码评审所发现。我们可以写更多的测试来覆盖可能场景，
增加更多的回归测试条件，确保如果代码bug没有被评审时候发现，那么它也可以在自动化测试或者持续部署流水线中发现。&lt;/p&gt;

&lt;p&gt;另外一种常见的问题来源于部署错误；这可能是前两种常见错误的延伸，比如没有经过仔细设计和评审的包含bug的代码在未经过充分的测试或者良好的持续部署流水线检查即进入生产环境，
往往会带来灾难性的后果造成线上环境事故。构建良好的工程师文化氛围确保&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;代码评审可以被认真地对待&lt;/li&gt;
  &lt;li&gt;开发人员有足够的时间来评审他们同事的代码，并尽量在开始的时候就一次将可能做好的事情做对&lt;/li&gt;
  &lt;li&gt;构建稳定、可靠的基础设施和自动化测试环境&lt;/li&gt;
  &lt;li&gt;采纳良好的持续集成和持续部署实践&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;硬件错误&quot;&gt;硬件错误&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;TBD&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;通信层和平台层错误&quot;&gt;通信层和平台层错误&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;TBD&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;服务依赖错误&quot;&gt;服务依赖错误&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;TBD&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;服务内部错误&quot;&gt;服务内部错误&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;TBD&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;弹性测试&quot;&gt;弹性测试&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;TBD&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;故障检测和修复&quot;&gt;故障检测和修复&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;TBD&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;事故和响应处理&quot;&gt;事故和响应处理&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;TBD&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;微服务监控&quot;&gt;微服务监控&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;TBD&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;文档&quot;&gt;文档&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;TBD&lt;/strong&gt;&lt;/p&gt;</content><author><name>Fei Yan</name><email>skyscribe.yf@gmail.com</email></author><category term="design" /><category term="architecture" /><category term="microservice" /><category term="standardization" /><summary type="html">微服务作为一种分布式的软件架构风格几乎已经席卷软件开发的各个角落；尽管它从被明确提出之后也很快经历了大量的质疑、批判乃至否定； 然而背后实践这一符合康威定律的简单（将问题分而治之）而又复杂（需要解决服务本身引起的的许多复杂的基础设施问题）的架构风格的组织却与日俱增。 其原因也不过是随着云计算技术的逐步深入，分布式架构成为最简单的选择，因为大部分情况下处于成本的考量，我们更需要水平扩展而不是垂直扩展； 微服务引入过程中的一些痛点也随着越来越多云原生应用的开源组件的出现而得到缓解。尝试将微服务实践标准化以降低实施成本的努力也变得不再是“空中楼阁”了， 走的人多了，必然有些更容易走的”直路”显现出来。</summary></entry><entry><title type="html">云原生应用</title><link href="https://skyscribe.github.io/post/2018/04/26/cloud-native/" rel="alternate" type="text/html" title="云原生应用" /><published>2018-04-26T00:00:00+08:00</published><updated>2018-04-26T00:00:00+08:00</updated><id>https://skyscribe.github.io/post/2018/04/26/cloud-native</id><content type="html" xml:base="https://skyscribe.github.io/post/2018/04/26/cloud-native/">&lt;p&gt;云原生应用试图从思想层面对我们编写和发布软件的方式来一次深刻的革命；这一设想其实是基于目前的大部分云计算平台上运行的应用都是从传统的非云平台环境上移植过来的。&lt;/p&gt;

&lt;p&gt;由于传统的应用期望其运行在可靠而又昂贵的硬件或者基础设施之上，软件本身的设计便没有对云计算的基础设施做很好的针对性设计。
云原生应用的思路是，既然云计算平台无处不在了，能否从设计之初就仅仅考虑软件默认就是运行在不可靠的云基础设施上？&lt;/p&gt;

&lt;!-- more --&gt;
&lt;p&gt;按照传统的应用软件开发思路，软件被运行在可靠性很高的硬件设施之上，存储设备可能本身有提供基于RAID的硬件级别的高可用特性，
网络接口上可能有基于bond的双以太网连接互为主从备份的机制保证大部分情况下并不为真正出错；应用的架构采用相对简单的三层架构，
数据库管理软件本身提供了复杂而又可靠的事务属性保证，从而应用程序设计上并不需要太多可能的异常情况；出现问题的时候，简单重启程序即可。&lt;/p&gt;

&lt;p&gt;云计算的提出和被快速采纳促进了&lt;strong&gt;更复杂而又去中心化的微服务架构&lt;/strong&gt;的流行，它结合了运算能力、存储、网络虚拟化的特性，
将软件底层所运行的物理资源做了隔离，应用程序不得不假设底层硬件可能是不可靠的；事实上云计算的数据中心处于成本考虑往往搭建在相对廉价的X86机器上。&lt;/p&gt;

&lt;h2 id=&quot;云原生应用和一些基础问题&quot;&gt;云原生应用和一些基础问题&lt;/h2&gt;
&lt;p&gt;云原生应用开发的设想是，既然云计算已经无处不在了，我们为什么不忘记传统企业应用软件的这些昂贵而又奢侈的硬件基础设施，
从软件&lt;strong&gt;设计上就做好防范考虑好可能的异常情况&lt;/strong&gt;，天然假定这些可靠的基础设施都不存在，虚拟的处理器可能被重启、磁盘可能会丢数据、网络也可能随时失效。
这样写出来的软件自然也很容易在传统的可靠平台上运行，因为大部分应用的复杂度都被精心设计了。&lt;/p&gt;

&lt;p&gt;云原生应用天然地和分布式软件架构绑定在一起，它必须解决Sun的科学家提出的&lt;a href=&quot;https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing&quot;&gt;分布式计算&lt;/a&gt;几个陷阱&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;计算机网络是不可靠的，应用软件必须随之准备好可能的网络失效、超时等&lt;/li&gt;
  &lt;li&gt;网络的延时不等于零，在多个分布式应用之间转移数据必然导致整个业务流的处理时间变长，甚至使得整个业务流失效&lt;/li&gt;
  &lt;li&gt;网络带宽永远是受限的，浪费网络带宽可能带来严重的系统性能问题&lt;/li&gt;
  &lt;li&gt;网络的安全威胁始终不容忽视，跨越多个网络节点的通信会带来复杂的恶意用户监听、偷听、掉包、窃取等威胁&lt;/li&gt;
  &lt;li&gt;网络拓扑结构的变化可能带来整个系统行为的变化，尤其是基于IP网络的数据包可能在发送和接收方向经过完全不同的路由&lt;/li&gt;
  &lt;li&gt;跨越网络节点的传输、封装包和解析包的开销必须经常被仔细考虑，某些时候这些开销都不应该被忽略&lt;/li&gt;
  &lt;li&gt;网络结构可能不是同构的，这一条反过来会影响前面一些因素，包括带宽、时延、安全等&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cncf基金会&quot;&gt;CNCF基金会&lt;/h2&gt;

&lt;p&gt;随着微服务软件架构的深入发展和演进，人们发现上述的很多底层的问题有一定的通用性，适合用一些共有的基础设施来解决，而不是选择各自实现自己的一套。
譬如服务如果需要提供多个实例的软件层面的高可靠，就往往需要服务发现、路由和负载均衡；如果需要避免局部服务失败引起的系统拥塞，则可能需要连接层面的断路器，
以便在服务不可用的时候即使返回错误，避免浪费资源等待；分布式的服务需要公共的仪表盘查看整个系统的处理动态和健康状况，也往往需要良好的诊断和日志工具，
以方便在问题的情况下及时追踪、诊断并解决问题。&lt;/p&gt;

&lt;p&gt;CNCF是Linux基金会旗下的一个&lt;strong&gt;致力于集合开源社区的力量来提高云原生应用可用性和可持续性&lt;/strong&gt;的开源组织，它聚合了一大批基于开源模式开发的微服务应用程序栈，
利用已经成熟的容器技术，将这些微服务各自打包为独立的容器以便分发和使用，并支持动态地配置和编排这些服务以更有效地使用虚拟化的云资源。
通过这一努力，应用软件开发程序员可以通过聚焦于自己的业务领域问题更快地开发和交付软件产品。&lt;/p&gt;

&lt;p&gt;它的项目大多专注于上述的一些云原生应用开发的基础设施，大概可以分为两大类&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;云计算平台本身相关的一些开源项目，包括OpenStack，Kubernetes，容器，AWS等;这里也包含了一些商业组织提供的开源项目，如阿里、华为的云平台等&lt;/li&gt;
  &lt;li&gt;微服务开发的一些基础软件服务，包括gRPC、Linkerd、Fluentd、Promethus等&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;kubernetes&quot;&gt;Kubernetes&lt;/h2&gt;

&lt;p&gt;Kubernetes又称K8s，近来已经确切地赢得了容器云平台的战争，成为事实上的开源容器调度、编排平台的事实标准;它的主要功能包括&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;自动化方式完成基于容器的应用程序的打包、动态扩展和管理&lt;/li&gt;
  &lt;li&gt;极高的扩展性，这方面给基于google内部已经使用了十几年的庞大的基础设施集群，可支持管理和自动伸缩扩展数十亿数量级的容器应用&lt;/li&gt;
  &lt;li&gt;极高的部署灵活性，不仅适用于内部测试环境也可以自动适应管理生产环境的需要&lt;/li&gt;
  &lt;li&gt;强大的周围生态系统，可以和已有的各种公有云、私有云乃至混合云平台无缝融合&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cncf项目孵化毕业模型&quot;&gt;CNCF项目孵化毕业模型&lt;/h3&gt;

&lt;p&gt;CNCF内部将其项目按照成熟度模型分为以下几类&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;进入沙箱的项目必须满足几个关键的标准，包括为云原生计算的核心内容 - 容器化、编排、微服务或者一些几者的结合增加价值并遵循CNCF的&lt;a href=&quot;https://www.cncf.io/about/charter/&quot;&gt;章程&lt;/a&gt;；
代码符合ASIL的版权要求或者对应的版权协议被CNCF治理委员会接纳；同意将相关商标移交给基金会并同意协助完成可能的新商标注册；每12个月委员会需要投票
决定是否仍然可以停留在沙箱阶段或者可以变成孵化项目&lt;/li&gt;
  &lt;li&gt;孵化阶段的项目除了满足上述标准，还应该用显式的文档说明该项目被成功应用在三个以上的成熟产品中，这些应用场景需要被委员会认可满足特定的质量和场景；
拥有健康的代码提交者；具备持续的代码提交和合并贡献行为；这些数据本身可能是非常动态的，因此委员会有最终的裁决权来决定是否某个项目可以进入孵化阶段&lt;/li&gt;
  &lt;li&gt;如果想达到毕业成熟的状态，除了上述标准，项目还必须满足至少拥有来自两个组织的代码提交者；获取或者维持满足&lt;a href=&quot;https://bestpractices.coreinfrastructure.org/en&quot;&gt;Linux基金会核心基础设施的最佳实践徽章&lt;/a&gt;,
目前这一徽章的获得者包括OpenSSL/Curl/GNUMake/GNUPG等明星项目；采纳CNCF的&lt;a href=&quot;https://github.com/cncf/foundation/blob/master/code-of-conduct.md&quot;&gt;行为准则&lt;/a&gt;;
显式地定义项目的治理和提交贡献流程，并提供GOVERANCE.md和ONWERS.md文件，指明目前的项目治理和提交贡献名单；至少要在主项目的库上提供公开的项目采纳者名单；
最终需要收到投票委员会确认的毕业许可。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目前K8S于2018年3月份成功从孵化阶段毕业成为首个CNCF毕业的项目。&lt;/p&gt;

&lt;h3 id=&quot;k8s的基本架构&quot;&gt;K8s的基本架构&lt;/h3&gt;

&lt;p&gt;K8s从资源管理角度，将最小的容器调度单元抽象为一个pod；一个pod可能包含一个或者多个容器应用；这些应用总是按照预先制定的部署、扩展规则被同时部署和调度，
运行在一个共享的包括存储、网络、计算等共享资源的上下文环境中。从概念上来说，一个pod可以认为是一个逻辑的机器，在这台逻辑机器上，多个容器应用程序从部署的角度
紧密地耦合在一起。从传统的非云计算环境或者基于虚拟机的环境来看，一个pod等同于一个物理机或者虚拟机。&lt;/p&gt;

&lt;p&gt;从最广泛的实现支持角度看，可以认为一个pod包含了多个docker实例，它们会共享同一个内核的命名空间，进程cgroups，以及其它一些Linux内核所支持的资源隔离策略。
他们也会共享相同的ip地址空间和端口，可以通过localhost互相访问彼此，并可以使用传统的UNIX IPC设施。而多个pod之间的应用程序在没有经过特殊配置的情况下则不能访问彼此，
他们往往需要通过pod暴露的地址和端口尽快互操作。&lt;/p&gt;

&lt;p&gt;K8s通过APIServer来获取用户的容器配置信息并通过这些信息来管理用户的容器；通常情况下应用程序需要提供一个YAML配置文件来声明具体的细节信息，
用户可以通过将对应的状态修改通过API的方式发送给APIServer来完成容器状态的变更和维护，包括诸如需要运行的程序工作负载，对应应用程序的容器镜像信息，
需要分配的网络和磁盘资源信息等等。背后的APIServer其实仅仅是一个网关，K8s内部的实现上使用了etcd来提供高可用和负载均衡，
大部分情况下用户只需要看到这个逻辑的API网关即可。&lt;/p&gt;

&lt;p&gt;另外一个配合管理容器的组件是Controller，它负责完成对应的集群的控制，使期望的容器最终达到预先设定的运行或者终止状态。默认情况下，
K8s的controller进程是&lt;code class=&quot;highlighter-rouge&quot;&gt;kube-controller-manager&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;cloud-controller-manager&lt;/code&gt;，它也允许高级用户自定义自己的controller。
Controller的基本逻辑可以简化为如下的循环&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;当前集群的状态是多少？假定为X&lt;/li&gt;
  &lt;li&gt;期望的目标集群的状态是什么，假定是Y&lt;/li&gt;
  &lt;li&gt;如果两者相等，则什么也不做。否则 &lt;code class=&quot;highlighter-rouge&quot;&gt;X!=Y&lt;/code&gt;那么执行内部的调动认为比如启动新的容器或者终止容器或者扩展容器实例的个数等；然后继续回到第一步。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;K8s也提供了一个叫&lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt;的命令行工具来简化API调用的操作，用户也可以使用自己定义的客户端来直接操作这些REST API，或者使用K8s官方支持的客户端来管理容器应用。&lt;/p&gt;

&lt;h2 id=&quot;prometheus&quot;&gt;Prometheus&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://prometheus.io/&quot;&gt;Prometheus&lt;/a&gt;是一个服务于微服务生态系统的开源基础组件，它的核心功能是提供对微服务实例的运行时监控和参数触发告警。
它的核心数据模型构建于一个基于时间序列的多维数据模型之上；每一项数据除了所关联的时间戳之外，另外包含了参数名（关注的监控参数）和一系列Key-Value对的关联参数。
用户可以根据自己的业务模型需要，定义自己的标签，这样当多个微服务产生大量的参数信息的时候，用户可以根据预先定义好的这些标签过滤自己感兴趣的参数随时间变化的情况；
方便对微服务系统的运行状况进行实时监控、诊断和分析。&lt;/p&gt;

&lt;h3 id=&quot;四种参数信息&quot;&gt;四种参数信息&lt;/h3&gt;
&lt;p&gt;Prometheus提供了四种类型的参数信息供客户端使用&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;计数(Counter)信息，往往用来表述单调增加的基于正整数的统计信息，譬如对应的请求被处理了多少次、完成的任务个数、发生错误的数量等。&lt;/li&gt;
  &lt;li&gt;纯计量(Gauge)信息，可能增加也可能减小的数值信息，譬如微服务中正在运行的gorountine数量，当前CPU使用率等。&lt;/li&gt;
  &lt;li&gt;直方图(Histogram)信息，往往用于基于固定时间段的统计抽样信息，譬如5分钟内处理的响应个数随时间变化的直方图统计等；每一个时间段的信息往往是累加的。&lt;/li&gt;
  &lt;li&gt;概要(Summary)信息，和上面的直方图有些类似，所不同的是它还提供了所有观测值的总和，以及给定时间窗口内可配置的百分比统计信息，譬如给定参数的90%统计值，99%范围内的统计值等。
该类型信息在统计某些性能参数的时候特别有用。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;实例信息和查询&quot;&gt;实例信息和查询&lt;/h3&gt;
&lt;p&gt;当Prometheus抓取同一个微服务的多个运行实例的时候（逻辑上是一个微服务，通过一个负载均衡器分摊运行期负载），它会自动为抓取到的数据分配2个标签：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Job名字，用户配置的抓取给定服务的一个名字，譬如设置为微服务的名字&lt;/li&gt;
  &lt;li&gt;实例信息，截取URL中的&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;&lt;/code&gt;信息，方便识别是哪个实例上报的参数
同时它还可以提供额外的参数信息，如给定的抓取Job是否正常运行，抓取的持续时间，参数被重新打标签的时候还剩余的未抓取的采样时间，目标服务提供的参数的总个数等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Prometheus提供了强大的参数查询和可视化功能，用户可以在它自身的仪表盘上输入查询表达式，生成实时更新的参数采样信息监控图标，方便地知道服务的运行情况，
比如CPU使用情况，API请求的负载情况等信息。用户可以选择将自己定义的查询以rules的方式添加到Prometheus的配置文件中，让它自动生成自定义的参数信息。&lt;/p&gt;

&lt;h3 id=&quot;自动告警管理&quot;&gt;自动告警管理&lt;/h3&gt;
&lt;p&gt;依据配置的规则自动向特定的目标放发送报警是Prometheus提供的又一个重要的功能。该功能由两个部分协作完成&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;报警规则(Alerting rules) 允许用户指定基于查询表达式的告警触发条件，当给定条件满足的时候，Prometheus会自动向AlertManager发送告警&lt;/li&gt;
  &lt;li&gt;告警管理器(Alert Manager) 接收来自Prometheus服务器的告警通知，完成诸如去重复、分组、路由到集成的第三方工具的功能；
用户可以配置邮件客户端，在线服务群或者其它在线运维渠道。同时它也可以提供抑制告警的功能。
告警管理器不是默认Prometheus的部分，而是作为一个单独的服务存在。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;告警管理器提供的管理功能包括如下几种&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;分组功能将接收到的多个本质上相似的通知信息转换成一个告警，减少噪音；这在大的系统中多个微服务实例同时出错的情况下格外有用；
比如当发生网络分隔故障的时候，被隔离的微服务集群如果有数百个实例在同时运行，依据配置它们将发送大量的数据库无法访问的告警信息，
进而出现上百个不同的微服务发送的数据库无法访问的告警通知；用户在这种情况下可能仅仅想看到是哪一个服务受到影响而不是该服务的多少个实例受到影响。
分组功能则在不丢失原有通知的情况下，提供一个单独的告警通知用户数据库访问出了故障。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;告警抑制功能可以在某些告警已经出发的情况下，自动过滤掉另外一些次生的告警。&lt;/li&gt;
  &lt;li&gt;静默告警功能提供一种直接的告警静默功能；基于预先配置的匹配规则（正则表达式等），当接收到的告警满足给定的规则时，该告警则完全不可见。&lt;/li&gt;
  &lt;li&gt;高可用方面，它支持用户通过配置将多个AlertManager配置为一个网格；关键之处是官方不建议用户将AlertManager配置在一个负载均衡器的背后，
而是将其列表直接暴露给Prometheus服务。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;部署和集成扩展&quot;&gt;部署和集成扩展&lt;/h3&gt;
&lt;p&gt;Prometheus本身是用Go语言写成并静态编译和打包，因而其部署非常简单；生成的包也比较小巧紧凑，docker镜像只有20MB左右。
它的这些参数信息用自己定制的格式同时存放在内存和磁盘中；本身的扩展可以使用其他已有的数据存储扩展方式。
微服务作为客户端可以使用它提供的REST API向Prometheus报告数据；官方提供了超过十种编程语言的客户端，方便微服务侧根据自己的需求选择。&lt;/p&gt;

&lt;h2 id=&quot;grpc&quot;&gt;gRPC&lt;/h2&gt;

&lt;p&gt;gRPC正在慢慢成为微服务领域除了REST API之外的一个新的服务间接口语言。和REST不同的是，它基于传统的RPC模型而非资源抽象模型，更适合于符合显示命令语义的场景；
其依托于Protobuf和HTTP/2协议的高效的协议编码和双向通信机制对很多追求高性能的微服务应用而言有巨大的吸引力。
传统的基于REST API通信的应用要实现双向的通信往往不得不借助间接的双向REST调用或者引入消息队列并不得不处理复杂的应用程序逻辑，
而gRPC不但省去了不必要的HTTP协议头开销，而且支持服务端在一条底层连接上同时向服务使用方（客户端）推送请求，可以极大地提高传输效率降低通信延迟。&lt;/p&gt;

&lt;p&gt;很多流行的开源项目都加入了支持gRPC接口的行列，甚至一些微服务基础设施内部就是用gRPC进行通信的；具体的细节可以参看&lt;a href=&quot;/post/2018/02/10/http2-and-grpc/&quot;&gt;前面这篇文章&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;其它一些热门的项目&quot;&gt;其它一些热门的项目&lt;/h3&gt;
&lt;p&gt;还有一些处于孵化期的项目，相当一部分都和云计算的基础设施平台有关，譬如用于服务网格的边车代理服务乃至提供无服务器架构平台的FaaS、BaaS设施等。
这里仅侧重看一下容器生态相关的一些项目，虽然基于Docker技术的容器应用已经在大部分环境中被顺利部署，但是为了避免所谓的vendor lockin、降低迁移成本，
还是有一些开源项目致力于标准化这些容器生态关键的接口和规范，防止被某个特定的平台提供商所锁定。&lt;/p&gt;

&lt;h3 id=&quot;containerd&quot;&gt;Containerd&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://containerd.io/&quot;&gt;Containerd&lt;/a&gt;是一个开源社区提供的工业标准的容器运行时服务，它的设计目标是简单、鲁棒又可移植。
作为一个容器运行时管理工具，它可以在容器的宿主机环境中完成容器生命周期的完整管理，包括&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;容器镜像的转移和存储管理&lt;/li&gt;
  &lt;li&gt;容器的运行和状态监控&lt;/li&gt;
  &lt;li&gt;底层网络资源和存储资源的叠加和控制&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作为一个后台运行管理服务，它的目标就不是被普通服务开发者直接使用的，而是被设计为潜入到一个更大的系统中去。
Containerd的架构设计上选择了暴露一个基于gRPC的API接口，该接口工作与本地的UNIX Socket上而不是TCP/IP网络因为它工作的对象是一个单机环境；
该API仅仅提供比较底层的功能，更高层的服务可以基于此进行扩展和进一步封装。它也提供了一个用于调试的CLI接口，并使用基于OCI规范的runC来运行容器。&lt;/p&gt;

&lt;p&gt;Containerd本身来自于成熟的Docker Engine项目的一部分，基于Docker本身成熟的生态环境，它可以提供更开放并同时具有时间检验的成熟的功能特性。
较新的Docker 17.12版本也已经将原有的私有实现提供为基于Containerd的后台实现。
目前Docker仅仅使用Containerd完成容器运行和进程管理的功能；其它大部分诸如网络、分发、存储管理的功能依然是Docker Engine自己的私有实现。&lt;/p&gt;

&lt;p&gt;长期来说Containerd打算重构更多的Docker Engine代码并将合适的处理逻辑剥离出来，
贡献给开源社区，并同时重写Docker Engine自己的基于开源Containerd的实现，其未来目标如下
&lt;img src=&quot;https://containerd.io/images/chart-d.png&quot; alt=&quot;dockerd_future_arch&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;rkt&quot;&gt;rkt&lt;/h3&gt;

&lt;p&gt;rkt是CoreOS提供的一个功能上和Docker有些类似而架构完全不同的、原生支持pod概念的容器管理工具。
rkt除了支持docker镜像之外，还支持&lt;a href=&quot;https://github.com/appc/spec&quot;&gt;AppC规范&lt;/a&gt;定义的&lt;code class=&quot;highlighter-rouge&quot;&gt;App Container Image&lt;/code&gt;，它的设计目标侧重于以下一些要素&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod-native&lt;/code&gt;将Pod作为基本的执行单元，自动将其他资源链接在一个执行环境中&lt;/li&gt;
  &lt;li&gt;安全，默认提供对SELinux的支持，并可以将应用程序容器运行在&lt;a href=&quot;https://github.com/rkt/rkt/blob/master/Documentation/running-kvm-stage1.md&quot;&gt;硬件隔离的虚拟环境&lt;/a&gt;中&lt;/li&gt;
  &lt;li&gt;可组合，提供对已有的初始化系统的原生支持，支持包括systemd、upstart等初始化服务的集成，支持和K8s的集成&lt;/li&gt;
  &lt;li&gt;支持开放标准AppC和CNI规范，可以运行docker和ACI镜像&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;rkt的进程模型以及和Docker的比较见下图
&lt;img src=&quot;https://coreos.com/rkt/docs/latest/rkt-vs-docker-process-model.png&quot; alt=&quot;rkt_docker_process_model&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;服务网格项目&quot;&gt;服务网格项目&lt;/h3&gt;

&lt;p&gt;目前Linkerd和Envoy都处于孵化状态，二者本身也是服务网格领域的佼佼者；更多细节可以参考之前的&lt;a href=&quot;/post/2018/01/20/api-gw-to-servicemesh/&quot;&gt;这篇服务网格的文章&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;opentracing&quot;&gt;OpenTracing&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://opentracing.io/documentation/&quot;&gt;OpenTracing&lt;/a&gt;是一个开源的服务于微服务应用架构的服务跟踪应用。它本身期望解决的是，
多个微服务实例在运行时服务运行状态跟踪、诊断及故障分析困难的问题。这在传统的单体应用情况下根本不是问题，而微服务的高度分布式、自适应的扩展性给跟踪带来了额外的困难。&lt;/p&gt;

&lt;p&gt;同领域的一些跟踪系统还有Zipkin、Dapper等项目可以完成类似的任务，OpenTracing的独特之处是它提供提供商中立的API，有效地减小Vendor-Lock的风险。
它已经提供了对9种主流编程语言的支持，并支持诸如gRPC、Flask、django、MOTAN等知名开源框架。&lt;/p&gt;

&lt;h2 id=&quot;引用资料&quot;&gt;引用资料&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://landscape.cncf.io/&quot;&gt;CNCF landscape&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cncf.io/projects/graduation-criteria/&quot;&gt;CNCF graduation criteria&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://prometheus.io/&quot;&gt;Prometheus&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://containerd.io/&quot;&gt;Containerd&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Fei Yan</name><email>skyscribe.yf@gmail.com</email></author><category term="design" /><category term="architecture" /><category term="cloud" /><category term="microservice" /><category term="cncf" /><summary type="html">云原生应用试图从思想层面对我们编写和发布软件的方式来一次深刻的革命；这一设想其实是基于目前的大部分云计算平台上运行的应用都是从传统的非云平台环境上移植过来的。</summary></entry><entry><title type="html">Spring新版本的响应式编程</title><link href="https://skyscribe.github.io/post/2018/04/04/spring-reactive/" rel="alternate" type="text/html" title="Spring新版本的响应式编程" /><published>2018-04-04T00:00:00+08:00</published><updated>2018-04-04T00:00:00+08:00</updated><id>https://skyscribe.github.io/post/2018/04/04/spring-reactive</id><content type="html" xml:base="https://skyscribe.github.io/post/2018/04/04/spring-reactive/">&lt;p&gt;流式编程在微服务架构风格越来越流行的背景下日益引起开发者的关注(&lt;a href=&quot;/post/2018/03/10/functional-reactive-programming/&quot;&gt;前文有一些简单探讨&lt;/a&gt;)
，新的Java语言规范加入了流的概念从语言库上添加了对FRP的支持。
Spring最新的&lt;a href=&quot;https://spring.io/blog/2018/02/19/spring-framework-5-0-4-available-now&quot;&gt;5.0版本&lt;/a&gt;更新也顺应这一潮流，加入了原生支持FRP的行列。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;最大的版本改动源于设计范式选择的增加&quot;&gt;最大的版本改动源于设计范式选择的增加&lt;/h2&gt;

&lt;p&gt;Spring的官方博客声称该版本的改动是项目从2014年创立以来最大的一次版本更新；主要的考虑是，
增加对异步流式编程范式的支持在Java语言平台下是一个思维方式上的巨大变化。&lt;/p&gt;

&lt;p&gt;传统的Java编程范式是基于面向对象设计的实现，具体到底层上还是命令式的同步、阻塞调用思维；
你调用一个对象提供的方法，则调用者默认必须等待操作完毕之后，用返回值（或者异常）的方式通知调用者。
即使有异步编程技术的辅助，这些细节也被认为是抽象接口下面的实现细节，很少被作为主要的设计决策。
FRP的方式就显著地不同，它的主要设计对象变为异步的流，所以对流的操作、变换等都是异步发生的，
程序的&lt;strong&gt;主要逻辑不需要再关注底层的操作是怎么被调度的，而仅仅关心一个一个具体的操作应该做什么，互相配合&lt;/strong&gt;完成系统目标。
这个角度来说，FRP的方式是声明式的；而声明式的代码相对传统的过程式代码有更好的可读性和可维护性。&lt;/p&gt;

&lt;p&gt;经典的面向对象设计方法容易入门却不易精通，设计者很容易掉入过度设计的陷进而滥用继承（接口也是类似）而带来不必要的过度抽象；
当然抽象不足也是另外一个问题这里略去不提。GoF在设计模式里面特别声明了我们需要考虑优先使用组合而不是继承，
不幸的是这一忠告从来就没有被人们认真对待；生搬硬套这些模式的设计者很容易就掉入叠床架屋的花花架子中无法自拔。
FRP的思维方式完全不提继承的事儿，但是封装依然是必要的；组合则被提到了首要的位置，因为函数式编程的主要复用方式就是组合。&lt;/p&gt;

&lt;p&gt;Spring其实采用了一种相对中庸的态度，给你提供了FRP的支持，但是决定权仍然在用户自己手里；
你可以选择用传统的OOD方式，这样更熟悉也没有什么额外的迁移成本；也可以根据项目的实际情况，
选用异步的函数式编程，当你决定这样选择的时候，Spring的基础设施已经做到足够的完善，你可以仅仅关注于你的程序逻辑就行了。&lt;/p&gt;

&lt;h2 id=&quot;和其他jvm上的frp的对比&quot;&gt;和其他JVM上的FRP的对比&lt;/h2&gt;

&lt;p&gt;如果将视角扩大到整个JVM平台上，那么Spring显然不是唯一的选择，也不是最强大的FRP选择。
类似于Akka这样的框架本身就是基于Actor模型来实现更高层次的函数式编程设施的，尽管Actor的模型和FRP并不是完全目标一致。
Scala语言则提供完整的函数式编程语言支持，更复杂的FP抽象也不在话下，在Java8之前甚至被认为是JVM平台下最好的选择。
RxJava以语言扩展的方式也出现了比较长的时间。&lt;/p&gt;

&lt;p&gt;Spring 5.0的核心FRP抽象逻辑和上述这些高层的框架的核心概念是一致的；它独特的地方在于其本身作为一个开源平台的灵活性；
你可以选择用Spring Boot，也可以不用；可以选择微服务架构来使用FRP，也可以完全不使用微服务架构。
正如Netflix在其Zuul2项目的重构过程中所总结的，尽管使用异步的方式来构建程序可以极大地提高性能和资源使用的有效性，提高自动扩展的能力；
运维的难度和调试挑战也被急剧放大。如果用来解决正确的问题，收效就会比较大，然而如果用来解决错误的问题，情况反而会更加糟糕。
关键的是，我们需要&lt;strong&gt;用正确的工具来解决正确的问题&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;springmvc和webflux&quot;&gt;SpringMVC和WebFlux&lt;/h2&gt;

&lt;p&gt;Spring-webmvc是Spring中的一个经典MVC模块，它最初是作为一种基于Servelet技术的Web后端框架提供给后端程序员使用的。传统的Spring MVC框架工作机制如下&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DispatcherServelet&lt;/code&gt; 会搜索&lt;code class=&quot;highlighter-rouge&quot;&gt;WebApplicationContext&lt;/code&gt;来查找DI容器中注册的Controller以处理进来的HTTP请求&lt;/li&gt;
  &lt;li&gt;本地化解析的Bean在这一过程中也会被一并查找并关联起来以便后续渲染View的时候使用来本地化View中的显示内容&lt;/li&gt;
  &lt;li&gt;主题解析的Bean则被用来关联后续要使用的View模板,以进行CSS渲染等额外处理&lt;/li&gt;
  &lt;li&gt;如果HTTP请求包含多部分媒体内容，那么请求会被封装在一个&lt;code class=&quot;highlighter-rouge&quot;&gt;MultipartHttpServeletRequest&lt;/code&gt;中处理&lt;/li&gt;
  &lt;li&gt;Dispatcher会搜索对应的Handler，找到之后，handler对应的controller以及其前置处理、后续处理会被按照顺序依次处理以准备模型返回，或者被用于后续View渲染&lt;/li&gt;
  &lt;li&gt;如果一个模型被返回，对应的View就会被渲染并返回响应的HTTP消息
整体的处理逻辑是一个线性的同步处理逻辑。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;传统的Sping MVC框架的接口都定义在 &lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.web.servlet&lt;/code&gt;包中，而支持响应式编程的Web框架被命名为WebFlux,对应的接口和注解放在一个新的Java包中：
&lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.web.reactive&lt;/code&gt;。它是全异步、非阻塞的，可以很方便的使用在基于事件循环的异步编程模型中，仅仅需要很少个线程就可以高效地处理大量的请求。
其功能不仅支持传统的Servelet容器，也支持诸如Netty、Undertow这些不是基于Servelet的编程框架上。&lt;/p&gt;

&lt;h3 id=&quot;mono和flux&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Mono&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Flux&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Mono&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;Flux&lt;/code&gt;对象概念有些类似于Java8中的&lt;code class=&quot;highlighter-rouge&quot;&gt;CompletableFuture&lt;/code&gt;,自身支持类似的lambda表达式组合来实现流式操作。
这两个类型本质上实现了Reactive Stream中的&lt;code class=&quot;highlighter-rouge&quot;&gt;Publish&lt;/code&gt;的概念，可以认为它是流的发布者。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Mono&lt;/code&gt;用来表示可以最多产生一个结果或者产生一个错误的流发布者概念。
改类型提供了丰富的构造方法来产生&lt;code class=&quot;highlighter-rouge&quot;&gt;Mono&lt;/code&gt;对象，我们可以通过&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;just&lt;/code&gt; 方法就地构造出一个会产生传入类型对象的值的封装对象&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;justOrEmpty&lt;/code&gt;方法可以从一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Optional&lt;/code&gt;对象中获取值作为发布的对象，如果里面没有值则不产生实际的事件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fromXXX&lt;/code&gt;方法从各种各样的事件源中获取一个对象，譬如一个&lt;code class=&quot;highlighter-rouge&quot;&gt;CompletableFuture&lt;/code&gt;对象，或者&lt;code class=&quot;highlighter-rouge&quot;&gt;Supplier&lt;/code&gt;函数对象，或者线程执行结果，乃至另外一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Publisher&lt;/code&gt;接口的实现对象等&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;never&lt;/code&gt;则用于模拟永远不会终止的事件，下游的流订阅者永远不会得到通知&lt;/li&gt;
  &lt;li&gt;组合多个发布者对象的聚合操作，如&lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt;用于在给定的多个发布者中任何一个产生事件的时候，其结果时间被作为单一的输出事件的情况；
&lt;code class=&quot;highlighter-rouge&quot;&gt;first&lt;/code&gt;用于等待传入的多个发布者中的第一个发布者产生输出事件的时候，将其作为整体的输出事件，更高级的&lt;code class=&quot;highlighter-rouge&quot;&gt;zipXXX&lt;/code&gt;方法则支持更复杂的语义&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt;方法则用于合并本身和传入的&lt;code class=&quot;highlighter-rouge&quot;&gt;Mono&lt;/code&gt;中的事件，在两者都结束的时候，产生一个空的事件作为输出&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/reactor/reactor-core/v3.1.3.RELEASE/src/docs/marble/mono.png&quot; alt=&quot;mono_publisher&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt;本身支持多种不同的语法，一种是带转换函数的方法，声明为&lt;code class=&quot;highlighter-rouge&quot;&gt; zip(Iterable&amp;lt;? extends Mono&amp;lt;?&amp;gt;&amp;gt; monos, Function&amp;lt;? super    Object[],? extends R&amp;gt; combinator)&lt;/code&gt;,
作用机制是，对传入的多个事件发布者，当他们的事件结果都被产生的时候，调用传入的聚合函数，对这些事件的结果进行函数运算，并将其返回值作为最终的事件输出。
另一种用法是将结果返回为元组而不做额外的运算；因为Java本身不支持不同类型的变长模板参数，对应的声明需要对不同的参数个数单独写出来，最多可以支持6个事件的元组组合，即&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tuple6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nf&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Flux&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Mono&lt;/code&gt;的不同是，它本身会产生0到N个事件输出到流中；然后才最终完成或者报错。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/reactor/reactor-core/v3.1.3.RELEASE/src/docs/marble/flux.png&quot; alt=&quot;flux_class&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于&lt;code class=&quot;highlighter-rouge&quot;&gt;Flux&lt;/code&gt;本身就会产生多个事件，多个&lt;code class=&quot;highlighter-rouge&quot;&gt;Flux&lt;/code&gt;之间的组合处理就会变得更加复杂和灵活；它本身支持如下一些API&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;combineLatest&lt;/code&gt; 会组合多个发布者中的最近发生的事件，依照事件顺序依次将其作为输出事件，最终产生的事件序列会按照时间交错&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;concat&lt;/code&gt;方法会将多个发布者的事件一一串起来而不管各自发生的时间&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt;方法会将单一的事件发布者的事件交叉串成一个新的&lt;code class=&quot;highlighter-rouge&quot;&gt;Flux&lt;/code&gt;发布出来&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt;的逻辑和&lt;code class=&quot;highlighter-rouge&quot;&gt;Mono&lt;/code&gt;类似，只是这里的合并函数需要处理多个&lt;code class=&quot;highlighter-rouge&quot;&gt;Tuple&lt;/code&gt;对象&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如&lt;code class=&quot;highlighter-rouge&quot;&gt;combineLatest&lt;/code&gt;的事件发布逻辑如下
&lt;img src=&quot;https://raw.githubusercontent.com/reactor/reactor-core/v3.1.3.RELEASE/src/docs/marble/combinelatest.png&quot; alt=&quot;combinelatest_flux&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;webclient&quot;&gt;WebClient&lt;/h3&gt;

&lt;p&gt;传统的Spring MVC中，我们可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;RestTemplate&lt;/code&gt;来组装发起HTTP客户端请求，对应的Reactive版本的概念是&lt;code class=&quot;highlighter-rouge&quot;&gt;WebClient&lt;/code&gt;。
一个最简单的异步发起HTTP请求的例子如下&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;WebClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost:8080/persons/42&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exchange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodyToMono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这里例子依然是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;WebClient&lt;/code&gt;俩创建一个流。&lt;code class=&quot;highlighter-rouge&quot;&gt;WebClient&lt;/code&gt;提供了丰富的API来操纵HTTP客户端行为；
默认情况下HTTP的连接通过Netty来完成，有需要的情况下，用户也可以自己指定一个&lt;code class=&quot;highlighter-rouge&quot;&gt;ClientHttpConnector&lt;/code&gt;用插件的方式配置进来。
&lt;code class=&quot;highlighter-rouge&quot;&gt;WebClient&lt;/code&gt;的API提供了fluent风格的链式调用，并在需要输出的情况下返回一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Mono&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;Flux&lt;/code&gt;对象。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exchange()&lt;/code&gt;方法无法处理服务端返回的非2XX响应，如果需要处理，可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;retrieve()&lt;/code&gt;方法来做，譬如&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/persons/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;HttpStatus:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is4xxServerError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;HttpStatus:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is5xxServerError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodyToMono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上述的&lt;code class=&quot;highlighter-rouge&quot;&gt;onStatus&lt;/code&gt;方法的第二个参数可以用lambda表达式书写，以得到更好的可读性。&lt;/p&gt;

&lt;h4 id=&quot;封装http的body&quot;&gt;封装HTTP的Body&lt;/h4&gt;

&lt;p&gt;如果不需要关心操作的返回，我们也可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;Void&lt;/code&gt;类型来填充流发布者(&lt;code class=&quot;highlighter-rouge&quot;&gt;Mono&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;Flux&lt;/code&gt;)的模板参数。同时在POST方法中，
我们往往需要填充具体的HTTP请求的消息体，它往往也是用JSON的格式来发送给服务器端的；实现的方法是，可以直接将一个对象填进去即可。
如下面的创建一个REST资源的例子&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personFlux&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createSomePerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/person/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_STREAM_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;personFlux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodyToMono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果对应的资源对象可以直接得到而不需要通过流异步获取，那么可以直接调用&lt;code class=&quot;highlighter-rouge&quot;&gt;syncBody&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constructPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/persons/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;syncBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodyToMono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;服务端的支持&quot;&gt;服务端的支持&lt;/h3&gt;

&lt;p&gt;服务端的支持有两个层，一个是用于处理HTTP方法请求的&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpHandler&lt;/code&gt;，一个是WebHandler。&lt;/p&gt;

&lt;p&gt;HttpHandler 在Web服务器启动的时候，需要和对应的服务地址和端口相绑定；不同的服务实现都需要和业务代码自己写的HttpHandler绑定起来组合使用。
Spring的闪亮指出一方面在于其高度的灵活性，不同的第三方Web Server实现都可以通过几行代码绑定使用起来。
比如使用Netty的方式如下&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;HttpHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ReactorHttpHandlerAdapter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReactorHttpHandlerAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HttpServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;另外一个流行的Web框架&lt;code class=&quot;highlighter-rouge&quot;&gt;Jetty&lt;/code&gt;的使用方法如下&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;HttpHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Servlet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servlet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JettyHttpHandlerAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ServletContextHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contextHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletContextHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;contextHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;contextHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ServerConnector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerConnector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;connector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;connector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addConnector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;基于HttpHandler, WebHandler提供了更高层次的处理链，包括诸如异常处理，过滤器，以及目标的&lt;code class=&quot;highlighter-rouge&quot;&gt;WebHandler&lt;/code&gt;。所有的组件都是在&lt;code class=&quot;highlighter-rouge&quot;&gt;ServerWebExchange&lt;/code&gt;之上工作的，
所有这些处理链都可以用一个&lt;code class=&quot;highlighter-rouge&quot;&gt;WebHttpHandlerBuilder&lt;/code&gt;来组装，最终组装的结果是一个上述的&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpHandler&lt;/code&gt;,并最终运行在不同的WebServer实现上。&lt;/p&gt;

&lt;h4 id=&quot;dispatcherhandler&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DispatcherHandler&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;和SpringMVC的基本概念一样，居于中心地位的是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;DispatcherHandler&lt;/code&gt;，它本身是一个Bean，可以被Spring的DI容器框架自动发现并加入到上述的&lt;code class=&quot;highlighter-rouge&quot;&gt;WebHttpHandlerBUilder&lt;/code&gt;中，
载入服务器实现中最终提供对外服务。&lt;code class=&quot;highlighter-rouge&quot;&gt;DispatcherHandler&lt;/code&gt;的Bean名字被设置为&lt;code class=&quot;highlighter-rouge&quot;&gt;webHandler&lt;/code&gt;,并实现了&lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationContextAware&lt;/code&gt;接口，以便它可以访问DI容器上下文。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DispatcherHandler&lt;/code&gt;是通过委托给一些实现定义的Spring的Bean来完成对HTTP请求的处理，并渲染对应的HTTP响应消息的。
Spring-WebFlux框架提供了默认的实现以保证这些Bean是开箱即用的，同时用户也可以根据需要来扩展、定制这些组件。
这些Bean包括&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;HandlerMapping 负责经对应的请求派发给某个Handler实现&lt;/li&gt;
  &lt;li&gt;HandlerAdapter帮助&lt;code class=&quot;highlighter-rouge&quot;&gt;Dispatcher&lt;/code&gt;依据注解解析等手段将Handler调用的细节和&lt;code class=&quot;highlighter-rouge&quot;&gt;DispatcherHandler&lt;/code&gt;的逻辑解耦&lt;/li&gt;
  &lt;li&gt;HandlerResultHnaler用于处理上一个&lt;code class=&quot;highlighter-rouge&quot;&gt;HandlerAdapter&lt;/code&gt;返回的结果&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DispatcherHandler&lt;/code&gt;的处理流程如下&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;查询所有的&lt;code class=&quot;highlighter-rouge&quot;&gt;HandlerMapping&lt;/code&gt;，并选择第一个匹配的Handler&lt;/li&gt;
  &lt;li&gt;如果找到，则使用对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;HandlerAdapter&lt;/code&gt;来触发Handler调用，它会发挥一个&lt;code class=&quot;highlighter-rouge&quot;&gt;HandlerResult&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;上述的Result会被&lt;code class=&quot;highlighter-rouge&quot;&gt;HandlerResultHandler&lt;/code&gt;所处理以便产生Response并将Response送给View层去渲染，或者直接返回给客户端&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;controller&quot;&gt;Controller&lt;/h4&gt;
&lt;p&gt;传统的Spring MVC框架下应用程序仅仅需要按照业务逻辑划分，分别写好Controller，并用注解来指明某个方法需要处理的方法，带入请求作为参数，即可指定自己的参数校验Bean，
Spring框架会自动帮我们完成参数校验到请求分发这一系列背后的复杂处理。这些已有的注解在Reactive方式下仍然被完美地支持。&lt;/p&gt;

&lt;p&gt;传统的这些注解都继续被用同样的方式所支持&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@RestController&lt;/code&gt; 标注一个POJO是一个controller类&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@PostMapping/@PutMapping/@GetMapping...&lt;/code&gt;可以加注在方法上，Spring可以自动发现他们用来处理对应的Web方法请求，注解中的参数可以用于携带URL等&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@ResponseStatus&lt;/code&gt;可以用来指定HTTP返回的状态码&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@PathVariable&lt;/code&gt;可以用于将URL中的参数传入进来绑定到Java类型的参数上，甚至正则表达式也可以被处理&lt;/li&gt;
  &lt;li&gt;媒体类型的注解也可以放置在方法注解的参数中
这些注解的用法和意图都和传统的Sping MVC没什么两样，这里无需赘述。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;函数式的端点&quot;&gt;函数式的端点&lt;/h4&gt;

&lt;p&gt;Spring WebFlux提供了新的基于函数变换的Web处理端点，它的基本逻辑是基于函数式的不可变设计的。虽然和上述传统的基于注解的方式看起来有很多差异，
两者却是可以完美地运行在同样的底层服务实现上的。&lt;/p&gt;

&lt;p&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;HandlerFunction&lt;/code&gt;相对应的处理HTTP请求的handler函数通常接收一个HTTP请求作为输入，并产生一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Mono&amp;lt;ServerResponse&amp;gt;&lt;/code&gt;作为处理的输出。这样的一个函数
作用上和一个声明了&lt;code class=&quot;highlighter-rouge&quot;&gt;@RequestMapping&lt;/code&gt;的方法类似，不同的是&lt;code class=&quot;highlighter-rouge&quot;&gt;ServerRequest&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;ServerResponse&lt;/code&gt;都被设计为是符合不可变对象的约束。
访问一个请求中的内容的方法通过&lt;code class=&quot;highlighter-rouge&quot;&gt;bodyToXXX&lt;/code&gt;的方式来实现，比如&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodyToMono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;就可以返回一个将会产生一个字符串作为输出事件的发布者。&lt;/p&gt;

&lt;p&gt;类似地，我们也可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;bodyToFlux&lt;/code&gt;返回一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Flux&lt;/code&gt;的封装，两者在底层上都是通过一个更灵活的&lt;code class=&quot;highlighter-rouge&quot;&gt;body(BodyExtractor)&lt;/code&gt;方法来实现的。
&lt;code class=&quot;highlighter-rouge&quot;&gt;bodyToMono&lt;/code&gt;其实等价于&lt;code class=&quot;highlighter-rouge&quot;&gt;body(BodyExtractors.toMono(String.class)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如果需要叠加对响应消息的额外处理，使用流的方式则可以用一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Builder&lt;/code&gt;对象来完成，因为&lt;code class=&quot;highlighter-rouge&quot;&gt;ServerResponse&lt;/code&gt;本身是不可变的。
用lambda表达式的方式写一个简单的Hello程序，可以是&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;HandlerFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;helloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;当然这样的书写方式有潜在的可读性丢失的损耗。另外一种推荐的做法是，将不同的handler仍然聚合到一个controller类中，然后用不同的方法来组合实现不同的处理，
下面是一个更复杂的例子&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PersonRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PersonHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PersonRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listPeople&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;allPeople&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodyToMono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;savePerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pathVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notFound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notFound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personMono&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;personId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personMono&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;switchIfEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notFound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;路由处理函数&quot;&gt;路由处理函数&lt;/h4&gt;

&lt;p&gt;通常情况下，我们不需要自己写路由函数，仅仅需要调用&lt;code class=&quot;highlighter-rouge&quot;&gt;RouterFunctions.route(RequestPredicate, HandlerFunction)&lt;/code&gt;做分发就可以了。
如果第一个参数指定的谓词判断匹配进来的HTTP请求，那么第二个参数指定的HandlerFunction就会被调用，并将请求传入，正如上面例子中一个一个的public方法所做的那样。
如果没有找到匹配的，则直接返回404(即上例中的&lt;code class=&quot;highlighter-rouge&quot;&gt;notFound&lt;/code&gt;)。&lt;/p&gt;

&lt;p&gt;多个路由函数可以通过函数式编程的组合方法构造出新的路由函数来。匹配的时候，先比对第一个函数，如果没有匹配再一次往下顺序比对和处理。
我们可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;RouterFunction.and(routeFunction)&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;or&lt;/code&gt;来组合多个条件判断，用&lt;code class=&quot;highlighter-rouge&quot;&gt;andRoute&lt;/code&gt;来组合多个路由函数，写出的代码是比较清晰易懂的流畅风格。
基于上面的例子，使用路由函数的组合如下&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;PersonRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PersonHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PersonHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;RouterFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personRoute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/person/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;handler:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andRoute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/person&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;handler:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listPeople&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andRoute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/person&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;handler:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;每一行一个路由函数的方式具有很强的不言自明性，不需要稳定仅仅通过读这段代码就可以知道每个URL是怎样被某个函数所处理了。&lt;/p&gt;

&lt;p&gt;由于这里的主要编程范式是函数式的，Spring库提供的大部分组合函数都是静态函数，这里的方法引用逻辑借助于Java8的语法特性进一步提高了lambda表达式的表达能力。
这也许是这些新特性都仅仅在Java8平台下才能工作的原因。&lt;/p&gt;

&lt;h4 id=&quot;启动server和过滤器&quot;&gt;启动Server和过滤器&lt;/h4&gt;

&lt;p&gt;启动一个后端Web服务器的方法和前面的类似，只是我们需要构造一个&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpHandler&lt;/code&gt;出来；实现的方法是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;RouterFunctions.toHttpHandler(routerFunction)&lt;/code&gt;;
构造出来的HttpHandler就可以被用相同的方法调用特定的后端服务器实现了。&lt;/p&gt;

&lt;p&gt;过滤器可以用在&lt;code class=&quot;highlighter-rouge&quot;&gt;routerFunction&lt;/code&gt;组合之间，提供额外的安全控制和拦截器处理。譬如如下的使用&lt;code class=&quot;highlighter-rouge&quot;&gt;SecurityManager&lt;/code&gt;的例子&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;RouterFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filteredRoute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;securityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;allowAccessTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UNAUTHORIZED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;当给定的请求可以被安全策略放行的时候，我们可以直接调用&lt;code class=&quot;highlighter-rouge&quot;&gt;next.handle(request)&lt;/code&gt;将其交给下游，否则直接构造一个授权错误的响应，结束该请求的处理流程。&lt;/p&gt;</content><author><name>Fei Yan</name><email>skyscribe.yf@gmail.com</email></author><category term="design" /><category term="architecture" /><category term="programming" /><category term="microservice" /><category term="spring" /><summary type="html">流式编程在微服务架构风格越来越流行的背景下日益引起开发者的关注(前文有一些简单探讨) ，新的Java语言规范加入了流的概念从语言库上添加了对FRP的支持。 Spring最新的5.0版本更新也顺应这一潮流，加入了原生支持FRP的行列。</summary></entry><entry><title type="html">函数式反应式编程</title><link href="https://skyscribe.github.io/post/2018/03/10/functional-reactive-programming/" rel="alternate" type="text/html" title="函数式反应式编程" /><published>2018-03-10T00:00:00+08:00</published><updated>2018-03-10T00:00:00+08:00</updated><id>https://skyscribe.github.io/post/2018/03/10/functional-reactive-programming</id><content type="html" xml:base="https://skyscribe.github.io/post/2018/03/10/functional-reactive-programming/">&lt;p&gt;流式编程或者响应式编程则是一个不断进入我们视线的设计概念；它采用声明式编程范式，并将数据流和数据更新的处理作为程序运算的核心。
由于函数式编程本身即强调声明式编程，这使得用函数式编程的语言或者工具来实现响应式编程更自然清晰，
一般人们将二者的结合称为函数式反应式编程或者FRP。
FRP最早可以追溯到微软和耶鲁的两位先驱在97年发表的&lt;a href=&quot;http://conal.net/papers/icfp97/icfp97.pdf&quot;&gt;论文&lt;/a&gt;,&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;基本概念&quot;&gt;基本概念&lt;/h2&gt;

&lt;p&gt;从基本思想上看，FRP本质上是以函数式编程思想为基础的。&lt;/p&gt;

&lt;h3 id=&quot;函数式编程的简单历史&quot;&gt;函数式编程的简单历史&lt;/h3&gt;

&lt;p&gt;函数式编程早不是一个新鲜的概念，&lt;a href=&quot;http://www.cse.psu.edu/~gxt29//historyOfFP/historyOfFP.html&quot;&gt;在计算机历史的早期阶段就被提出&lt;/a&gt;和实现，
可能是由于它和数学理论概念更接近，即使是有&lt;a href=&quot;http://haskell.cs.yale.edu/wp-content/uploads/2011/02/history.pdf&quot;&gt;Haskell这样的致力于提升影响力的开源项目&lt;/a&gt;在上个世纪八十年代被提出以解决不同的语言语义分裂的问题，
也长期不能带其脱离“叫好不叫座”的尴尬境地，毕竟Unix/C的影响力太大了，以至于大部分人更喜欢面向过程的具体化思维，即使是一度流行的面向对象技术
也得和传统的面向过程技术相结合才取得了长足的发展。&lt;/p&gt;

&lt;p&gt;进入21世纪以来，传统的依赖单核CPU频率提升的“摩尔定律”慢慢失效，软件的复杂性又与日俱增对计算能力的需求有增无减，
原本用于大型机的多处理器核心被引入以应对商业软件领域的挑战。不幸的是传统的面向对象技术并不能很好地应对这些挑战;
自然而然可以优雅地应对这些挑战的函数式编程技术重新引起人们的关注。&lt;/p&gt;

&lt;p&gt;微服务架构的兴起则为两者的结合提供了更好的舞台，因为&lt;strong&gt;无状态是微服务的潜在要求&lt;/strong&gt;也是最重要的一个要求之一；
函数式编程相较于其他编程范式更强调无副作用的编程思维，和微服务的基本要求自然契合的很好。&lt;/p&gt;

&lt;h3 id=&quot;函数式编程的基本概念&quot;&gt;函数式编程的基本概念&lt;/h3&gt;

&lt;p&gt;函数式编程的基本思路是将&lt;strong&gt;程序的执行看作是一堆函数的组合处理和求值&lt;/strong&gt;过程；纯粹的函数式编程要求数据是不可变的，
同样的数值输入在流经同样的函数处理的时候必须得到确定的输出，不容许有预料之外的副作用产生。程序员的任务可以想象为两个过程&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;声明运算过程所需要的函数及其组合算法；程序的主要逻辑是组合这些函数算法来完成运算&lt;/li&gt;
  &lt;li&gt;实现这些函数的内部逻辑实现，这个过程内部仍然是以声明式的写法为主&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;由于声明式的代码更接近于实际的问题领域逻辑，一个明显的好处是函数式代码具有很高的可读性和可维护性。&lt;/p&gt;

&lt;h3 id=&quot;流及反应式抽象&quot;&gt;流及反应式抽象&lt;/h3&gt;

&lt;p&gt;流的抽象在计算机编程语言和计算机基础技术中非常常见。&lt;/p&gt;

&lt;p&gt;C++语言的早期STL标准库就提出了IO流的概念，它将输入输出设备进行抽象，
外部用户仅仅需要关心自己的数据可以写入流中或者从流中读取，具体怎么实现底层的输入输出控制的细节则被标准IO流库所封装和隐藏。&lt;/p&gt;

&lt;p&gt;TCP协议的设计是另外一个例子，逻辑上看TCP服务的提供者和使用者之间在通信之前需要先建立一个虚拟的数据流，
然后发送方可以&lt;strong&gt;按照严格而固定的顺序&lt;/strong&gt;将数据写入这个数据流中，对方则可以保证按照发送发的写入顺序读取到数据。
这里一个明显的共同特征是，流用于表述一种允许&lt;strong&gt;生产者顺序往后追加，消费者可以依据同样顺序读取出数据&lt;/strong&gt;的逻辑抽象通道。
只要逻辑通道处于连接状态，发送方就可以持续不断地向数据流中填充数据，接收方则可以得到保证不管中间经过多少节点（路由器或者交换机），
数据总是以相同的顺序被放置在本地的协议栈缓冲中以便读取（这里暂不考虑网卡驱动丢包等异常情况）。&lt;/p&gt;

&lt;p&gt;Unix 的管道也满足类似的特征，管道的输入端进程可以源源不断地将自己的标准输出信息重定向到给定的管道中，
而管道另外一侧的进程则按照同样的顺序从管道里读取数据。&lt;/p&gt;

&lt;p&gt;这些例子中，流中的数据是一经产生即不会被修改的，并且多个不同的流其实可以或多或少按照某种方式去组合；譬如可以组合多个进程，
让前一个进程的输出作为下一个进程的收入，管道的长度可以达到任意长度（当然实际的长度会受制于计算机的处理能力 ）。
同时这种采用组合来扩展程序的能力虽然简单却有着巨大的威力，管道的思想被认为是 Unix 编程哲学的核心要义之一。&lt;/p&gt;

&lt;p&gt;在这种抽象语义下，除了流的开端出的处理逻辑，&lt;strong&gt;其它相连的中间处理过程或者结束过程都是反应式&lt;/strong&gt;的，即遵循被动式的处理逻辑：
从输入中拿到内容 (可以是消息或者应用数据 ) , 按照业务领域意图做转换处理，然后将产生的结果放入流中，以便下游可以继续处理。&lt;/p&gt;

&lt;h3 id=&quot;将两者相结合&quot;&gt;将两者相结合&lt;/h3&gt;

&lt;p&gt;上述&lt;strong&gt;流的抽象其实和函数式编程的基本要素可以无缝地融合&lt;/strong&gt;在一起，因为流的运算特征满足不可变性的特征，并且易于组合。&lt;/p&gt;

&lt;p&gt;简单地说，FRP的核心思维方式是将&lt;strong&gt;异步的数据流&lt;/strong&gt;作为基本的数据抽象，异步是为了解耦处理流的处理和参与者；
作为编程模型的基本抽象，它支持用各种各样的方式来创建数据流，可以是一个外部的变量，也可以是图形界面点击事件，
缓冲更新等等。&lt;/p&gt;

&lt;p&gt;基于该基本抽象，FRP还提供给使用者灵活的工具箱来处理流，使我们可以创建新的流、过滤已有的流、组合或者终结流的数据；
显然这些操作手法是典型的函数式的，所不同的是&lt;strong&gt;流被当作了基本的数据处理单元&lt;/strong&gt;，
上述的这些操作都可以看作是作用于流的函数或者高阶函数。&lt;/p&gt;

&lt;p&gt;FRP的实现基本都依赖于基本的函数式编程特性，尽管各种编程语言不约而同地慢慢从函数式编程语言中汲取营养加入到新的版本中，
或者没有历史兼容包袱（适合于一些新语言）地直接在语言核心加入函数式编程支持，&lt;/p&gt;

&lt;p&gt;在不同的编程语言中实现FRP面临的挑战也是不一样的。最有名的FRP实现是 &lt;a href=&quot;http://reactivex.io/&quot;&gt;ReactiveX&lt;/a&gt;,
下面我们来粗略看下不同的编程语言中的RFP实现和基本特征。&lt;/p&gt;

&lt;h2 id=&quot;javascript&quot;&gt;Javascript&lt;/h2&gt;

&lt;p&gt;Javascript从早期版本开始就支持函数作为语言基本设施这一重要的函数式编程入门条件，在Javascript中实现FRP也比较清晰容易。&lt;/p&gt;

&lt;p&gt;想象一个简单的功能：我们需要在启动的时候从github中读取三个账户数据，用过程式的方法也很简单，
但是我们这里想用FRP的方法来实现并顺便看下它的基本语义。&lt;/p&gt;

&lt;p&gt;首先我们需要先产生一个流，毕竟这是一切运算的基础，用ReactiveX 的说法我们需要一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt;，我们可以简单认为它就是一个流&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requestStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;just&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://api.github.com/users'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这时候我们得到的还仅仅是一个字符串流；我们需要给它加上一些动作，当对应的数据被推送给流的时候，后续的运算可以继续进行下去&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;requestStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// execute the request&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responseStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;observer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jqXHR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;observer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;always&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;observer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;responseStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// do something with the response&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上述代码中，我们用 &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt; 函数作为组合函数，对应的参数是一个函数，该函数会取到 &lt;code class=&quot;highlighter-rouge&quot;&gt;requestStream&lt;/code&gt; 中的字符串URL，
执行AJAX回调，并基于处理结果决定如何处理流，这里的 &lt;code class=&quot;highlighter-rouge&quot;&gt;create&lt;/code&gt; 函数用于创建一个自定义的流，传入的 &lt;code class=&quot;highlighter-rouge&quot;&gt;observer&lt;/code&gt; 为下游的stream (ReactiveX叫他&lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt;)。
当AJAX异步执行成功或者出错的时候，上面的实现将对应的相应结果通知给下游，分别是&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onNext&lt;/code&gt; 通知下一个数据需要被处理&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onError&lt;/code&gt; 通知异常情况发生，遇到错误需要被处理&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onCompleted&lt;/code&gt; 标记流的结束&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;需要处理这些响应数据的代码写在第二个 &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt; 代码块中。&lt;/p&gt;

&lt;p&gt;上面的代码中，我们在一个流的处理中嵌套了另外一个流的处理，写的多了很容易掉入 &lt;a href=&quot;http://callbackhell.com/&quot;&gt;Callback Hell&lt;/a&gt; 的陷阱。
所幸的是，我们可以使用流变换的技术来简化它，重写为如下的版本&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responseMetastream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requestStream&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这是函数式编程中基本的&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;函数 - 将一种数据经过运算后编程另外一种数据，这里麻烦的是我们的&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;默认就会将内部的返回类型封装为一个Stream,
加上里面的返回值本身已经是一个 Stream，最终我们得到了一个封装了两次的stream，好在&lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap&lt;/code&gt;可以帮我们轻松解开一层封装&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responseStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requestStream&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;实现的流处理过程如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/0b0ac4a249e1c15d7520c220957acfece1af3e95/687474703a2f2f692e696d6775722e636f6d2f4869337a4e7a4a2e706e67&quot; alt=&quot;js_rx_flatmap&quot; /&gt;&lt;/p&gt;

&lt;p&gt;更复杂的功能可以参考&lt;a href=&quot;https://gist.github.com/staltz/868e7e9bc2a7b8c1f754&quot;&gt;这篇gist&lt;/a&gt;，文字和视频都很清晰易懂。&lt;/p&gt;

&lt;h2 id=&quot;java8-基本流&quot;&gt;Java8 基本流&lt;/h2&gt;

&lt;p&gt;Java8在JDK中提供了丰富的 stream API，其定义是一个泛型的接口，支持最基本的流操作，包括 &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;skip&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;sorted&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;等方法。
一个新的&lt;code class=&quot;highlighter-rouge&quot;&gt;stream&lt;/code&gt;对象可以用包括静态的&lt;code class=&quot;highlighter-rouge&quot;&gt;of&lt;/code&gt;方法、&lt;code class=&quot;highlighter-rouge&quot;&gt;Builder&lt;/code&gt;辅助类构造出来，同时JDK提供的&lt;code class=&quot;highlighter-rouge&quot;&gt;Collection&lt;/code&gt;类大多支持一个新的&lt;code class=&quot;highlighter-rouge&quot;&gt;stream()&lt;/code&gt;方法用以构造一个新的stream对象。&lt;/p&gt;

&lt;p&gt;需要注意的是Java8语言本身的函数式支持是通过面向对象的方法来模拟的，只是从FRP编程的角度来看，可以认为Java8的流是用函数式思维组织设计，用OO的方法来提供实现。
更多Java8的函数式特性和流实现细节记录在&lt;a href=&quot;/post/2016/10/14/fp-support-in-java8/&quot;&gt;这篇文章&lt;/a&gt;中。&lt;/p&gt;

&lt;h2 id=&quot;rxjava扩展&quot;&gt;RxJava扩展&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxJava&quot;&gt;RxJava&lt;/a&gt; 项目用库的方式对JVM平台进行扩展，提供易于组合、异步、事件驱动的反应式编程支持。
它的基本思路是扩展&lt;a href=&quot;http://en.wikipedia.org/wiki/Observer_pattern&quot;&gt;观察者模式&lt;/a&gt; 以方便地支持数据、事件流，并提供高层抽象，
将核心业务逻辑和底层的线程、同步、并发数据结构这些计算机底层的具体技术所隔离，使得应用程序开发者可以更关注于业务逻辑，提高开发效率。&lt;/p&gt;

&lt;p&gt;由于反应式编程天然和函数式编程的关系密切，并且Java8才支持Lamba表达式和Stream这些抽象，所以在Java8平台上使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;RxJava&lt;/code&gt; 会更清晰自然。
一个最简单的回显 &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello World&lt;/code&gt; 的流程序的例子如下&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.reactivex.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Flowable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;just&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这个最简单的例子中, 我们先使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Flowable.just&lt;/code&gt; 方法产生一个流并初始化为传入的数据 &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello World&lt;/code&gt;，并且当给定的数据传入流之后，流即终止。
&lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt;方法则提供一个流数据的消费者，这里是一个lambda表达式，将实际数据传给 &lt;code class=&quot;highlighter-rouge&quot;&gt;System.out.println&lt;/code&gt; 打印在控制台上。
当然这个例子是在实际应用中没多大意义，没有人会写出这样的实际代码来增加无畏的复杂性。&lt;/p&gt;

&lt;h3 id=&quot;更复杂一点的例子&quot;&gt;更复杂一点的例子&lt;/h3&gt;

&lt;p&gt;更常见一点的任务是，我们想根据输入数据做一些运算，这些运算本身可能比较复杂而耗时所以我们希望它在一些后台进程上做，做完之后，再将结果汇聚起来放在界面上显示出来。
如果我们采用Java7提供的并发包中的工具来做，则需要仔细考虑一下线程之类的东西 （或者使用ForkJoinPool来做）；
RxJava 则允许我们仅仅关注于需要解决的问题逻辑，其实现可以如下&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Flowable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromCallable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//  imitate expensive computation&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Done&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribeOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schedulers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;observeOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schedulers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Throwable:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该例中，每一个语句调用结果都会产生一个新的不可变的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Flowable&lt;/code&gt;对象出来，整个代码的书写方式是链式调用的风格；如果将每个调用写在单独的一样上，
应用处理逻辑则一目了然。&lt;/p&gt;

&lt;p&gt;RxJava并不直接使用Java8的线程或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;ExecutorService&lt;/code&gt; 接口，而是用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Scheduler&lt;/code&gt; 抽象和底层的JVM线程库做交互；&lt;code class=&quot;highlighter-rouge&quot;&gt;Scheduler&lt;/code&gt; 负责和底层的线程或者
&lt;code class=&quot;highlighter-rouge&quot;&gt;ExecutorService&lt;/code&gt;实例做绑定；遵循常用的Java命名约定，&lt;code class=&quot;highlighter-rouge&quot;&gt;Schedulers&lt;/code&gt; 工具类封装了一些常用的静态 &lt;code class=&quot;highlighter-rouge&quot;&gt;Scheduler&lt;/code&gt; 实例方便编程使用。&lt;/p&gt;

&lt;h3 id=&quot;使用并发&quot;&gt;使用并发&lt;/h3&gt;

&lt;p&gt;RxJava 允许并发的运行计算以提高处理能力，然而当流中的输入数据是线性传入的时候，默认情况下则无法并发，下面的例子&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Flowable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;observeOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schedulers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;blockingSubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;虽然使用了默认共享的计算线程池（假设我们有多个处理器核心），但是因为输入的数据是线性传入的，中间的计算并不会自动地派发到多个计算线程上。
为了打开并发处理，我们需要额外下一番功夫，使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap&lt;/code&gt; 方法显示地展开流并在运算完毕后自动合并流数据：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Flowable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Flowable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;just&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribeOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schedulers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;blockingSubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;新一点的版本中，RxJava还加入了 &lt;code class=&quot;highlighter-rouge&quot;&gt;parallel()&lt;/code&gt; 方法以生成一个并发的流对象 &lt;code class=&quot;highlighter-rouge&quot;&gt;ParallelFlowable&lt;/code&gt; 从而更大地简化代码&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Flowable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parallel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;runOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schedulers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sequential&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;blockingSubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;需要注意的是，&lt;code class=&quot;highlighter-rouge&quot;&gt;Flowable&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;ParallelFlowable&lt;/code&gt; 是完全不同的类型，二者都是泛型类，但没有共同的接口。&lt;code class=&quot;highlighter-rouge&quot;&gt;ParallelFlowable&lt;/code&gt;提供了丰富的接口可以得到一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Flowable&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt; 可以用一个调用者指定的函数来得到一个顺序的流&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sequential&lt;/code&gt; 可以显示地从每个流的尾部用轮询的方式得到一个顺序流&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sorted&lt;/code&gt; 则可以排序并发流并合并的恶道一个顺序流&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;toSortedList&lt;/code&gt; 则得到一个排序列表的流&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;合理的设计和使用&quot;&gt;合理的设计和使用&lt;/h3&gt;

&lt;p&gt;RxJava 建议最好的使用方式是 :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;创建产生数据的可被流感知的对象(&lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt;)，作为流的输入数据&lt;/li&gt;
  &lt;li&gt;创建对数据进行运算的处理逻辑，它们自己本身可以对流推送过来的数据做适当运算，产生新的结果写入流中&lt;/li&gt;
  &lt;li&gt;完成处理所关心的数据的处理逻辑，将数据汇聚归并成最终关心的形式&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;RxJava 支持从已有的数据结构中创建 &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt;, 我们可以很方便的使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;from&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;just&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;create&lt;/code&gt;方法创建出来，
他们可以同步地一次调用&lt;code class=&quot;highlighter-rouge&quot;&gt;onNext&lt;/code&gt;方法通知感兴趣的订阅者；在所有的数据都通知完毕的情况下，则会调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;onCompleted()&lt;/code&gt; 方法通知订阅者。&lt;/p&gt;

&lt;h4 id=&quot;组合和变化-observable&quot;&gt;组合和变化 &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;RxJava 支持我们方便地连接或者组合多个&lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt;, 考虑如下的 groovy 代码&lt;/p&gt;
&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;simpleComposition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;customObservableNonBlocking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_xform&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;onNext =&amp;gt; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;它的处理流程其实是如下的流水线处理&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/Netflix/RxJava/wiki/images/rx-operators/Composition.1.png&quot; alt=&quot;groovy_pipeline&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;kafka-streams&quot;&gt;Kafka Streams&lt;/h2&gt;

&lt;p&gt;Kafka本身（可以参考&lt;a href=&quot;/post/2017/11/18/kafka-design-study/&quot;&gt;前一篇文字&lt;/a&gt;）就可以看作是一个流式处理平台。同时它还提供了专门的流处理API，其特性如下&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Kafka Streams 本身是一个客户端的库，可以看作是一个用户端程序而不是其平台核心部分；它本身被设计为可以&lt;strong&gt;很容易地嵌入到用户端的Java程序&lt;/strong&gt;中，方便部署和集成。
除了Kafka平台本身，它不依赖于其他的库或者系统；同事又能依托于Kafka平台提供的可伸缩性和一致性保证提供高可靠的实时处理能力。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;支持流处理中插入自定义的本地状态，从而结合传统的过程式编程的本地状态的便利；当然破坏了纯函数性编程无状态的假设会带来复杂的问题，以提高性能；
各种取舍需要用户自己去选择。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Stream&lt;/code&gt;是Kafka Streams提供的最重要的抽象，它表示无边界、持续更新的数据流；一个流是有序而可重放的，其中的数据是由按时间顺序的不可变的数据序列组成；
其中的一条数据或者记录被定为为一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Key, Value&lt;/code&gt; 对。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;建立在stream之上的应用程序可以看作是由一个或者流处理对象（stream processor）组成；这些流处理对象是高度可组合的，它们可以将一个或者多个流作为输入，
经过一定的函数变换产生一个或者多个流对象输出。
这里的两种例外情况是被称之为 &lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Sink&lt;/code&gt; 的处理对象；&lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt;可以从Kafka平台中读取某个&lt;code class=&quot;highlighter-rouge&quot;&gt;Topic&lt;/code&gt;作为输入经过处理后，产生新的数据流，
而&lt;code class=&quot;highlighter-rouge&quot;&gt;Sink&lt;/code&gt;可以从上游的流中拿到数据，作处理之后，将结果写入一个特定的&lt;code class=&quot;highlighter-rouge&quot;&gt;Topic&lt;/code&gt;上。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kafka Stream的流处理拓扑结构如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://kafka.apache.org/10/images/streams-architecture-topology.jpg&quot; alt=&quot;kafka_streams_topo&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;两种流处理技术&quot;&gt;两种流处理技术&lt;/h3&gt;

&lt;p&gt;Kafka Streams提供了两种方法来操作流处理逻辑&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;专门的&lt;a href=&quot;https://kafka.apache.org/10/documentation/streams/developer-guide/#streams_dsl&quot;&gt;领域语言(DSL)&lt;/a&gt; 提供了基于Steams的高级API来转换流；用户可以用这些API的组合来完成自己的应用程序逻辑。&lt;/li&gt;
  &lt;li&gt;相对底层一些的 Processor API，适用于用户想自己定义自己的流处理逻辑的情况；这里我们只粗略看看DSL的特性和使用。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DSL支持基于Streams和Table的抽象，有三个主要的接口&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;KStream&lt;/code&gt;是基本的数据流对象&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;KTable&lt;/code&gt;是一个二维表，可以方便地用在需要数据连接或者分组的情况&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GlobalKTable&lt;/code&gt;是一个全局的表，其本身可以和Kafka的数据分块等能力结合起来用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;KStream&lt;/code&gt;用来表述流的概念，而后两者用来对应于数据表结构。基于 &lt;code class=&quot;highlighter-rouge&quot;&gt;StreamsBuilder&lt;/code&gt; 类，我们可以很方便地将Kafka中的某个topic数据读加载到流中或者数据表中。
这些接口提供了丰富的变换操作（方法），其中一些变换方法会产生一个新的&lt;code class=&quot;highlighter-rouge&quot;&gt;KStream&lt;/code&gt;而另外一些则会产生新的&lt;code class=&quot;highlighter-rouge&quot;&gt;KTable&lt;/code&gt;。
从实现上看，这些接口都是用泛型技术实现的，并且是强类型的。&lt;/p&gt;

&lt;p&gt;所谓的流变换可以分为两类：无状态的后有状态的。无状态的变换支持诸如 &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;filterNot&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;foreach&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;groupByKey&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;selectByKey&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;toStream&lt;/code&gt;等操作；
其中&lt;code class=&quot;highlighter-rouge&quot;&gt;toStream&lt;/code&gt;可以实现从&lt;code class=&quot;highlighter-rouge&quot;&gt;KTable&lt;/code&gt;到&lt;code class=&quot;highlighter-rouge&quot;&gt;KStream&lt;/code&gt;的转换；而&lt;code class=&quot;highlighter-rouge&quot;&gt;groupBy&lt;/code&gt;则返回分组过的流或者数据表。
有状态的变换除了将传入的流作为输入外，还需要一个额外的状态数据存储参与到变换处理过程中；
比如一个&lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt;操作会在处理过程中读取&lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt;信息来确定输入流中的哪些数据应该被处理并将其结果放置在输出流中。&lt;/p&gt;

&lt;p&gt;有状态的流变换包含如下几种&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;聚合&lt;/li&gt;
  &lt;li&gt;连接操作(Join)，可以将其想象为SQL的表连接&lt;/li&gt;
  &lt;li&gt;上述的window操作&lt;/li&gt;
  &lt;li&gt;自定义的流处理变换操作，由于是自定义的所以可能是有状态的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;它们之间的关系可以参考下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://kafka.apache.org/10/images/streams-stateful_operations.png&quot; alt=&quot;kafka_stateful_transformation_relation&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;一个简单的例子&quot;&gt;一个简单的例子&lt;/h3&gt;

&lt;p&gt;下面是一个简答的Java8的程序，用于统计某个文本行中的词出现的次数&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Assume the record values represent lines of text.  For the sake of this example, you can ignore&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// whatever may be stored in the record keys.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;KStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textLines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;KStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wordCounts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textLines&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Split each text line, by whitespace, into words.  The text lines are the record&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// values, i.e. you can ignore whatever data is in the record keys and thus invoke&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// `flatMapValues` instead of the more generic `flatMap`.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flatMapValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\\W+&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Group the stream by word to ensure the key of the record is the word.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;groupBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Count the occurrences of each word (record key).&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This will change the stream type from `KGroupedStream&amp;lt;String, String&amp;gt;` to&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// `KTable&amp;lt;String, Long&amp;gt;` (word -&amp;gt; count).&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Convert the `KTable&amp;lt;String, Long&amp;gt;` into a `KStream&amp;lt;String, Long&amp;gt;`.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;rxcpp&quot;&gt;RxCpp&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Reactive-Extensions/RxCpp&quot;&gt;RxCpp&lt;/a&gt; 提供类似了和 &lt;a href=&quot;https://github.com/ericniebler/range-v3&quot;&gt;Ranges-v3&lt;/a&gt; 库类似的管线操作，其处理方式本质上也是反应式的。
由于C++支持运算符重载，&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; 操作符可以天然地作为管道操作符拿来用，而现代C++语言对函数式编程和Lambda表达式的丰富的表达能力使得写出可读性好的代码不算什么难事。&lt;/p&gt;

&lt;p&gt;下面是其项目文档中的一个例子,实现如下一个解析任务&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;给定一个二进制文件作为输入，其中存放的是一段不等长字符串构成的二进制表示，可以有多行；每行用之间回车符号隔开 ；输入长度被分割为固定长度的行&lt;/li&gt;
  &lt;li&gt;要求解析给定的输入，将二进制数表示的字符打印出来，并且每一行对应于原输入中的一行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;输入的格式如下（假设一行有17个字符的二进制数表示 )&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 
13 67 67 67 67 67 67 67 67 67 67 67 13 68 68 68 68 
68 68 68 68 13 69 69 69 69 69 69 69 69 69 13
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对应的输出应该为&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BBBBBBBBBBBBBBBBB
CCCCCCCCCCC
DDDDDDDD
EEEEEEEEE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;产生一段随机的字符输入可以用RxCpp的方式写为如下的函数式代码&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;random_device&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// non-deterministic generator
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mt19937&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;uniform_int_distribution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// for testing purposes, produce byte stream that from lines of text
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flat_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'A'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; 
                &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; 
                &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as_dynamic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delim&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
                &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flat_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as_dynamic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// print input packet of bytes
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ostream_iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里虽然有多个管道操作，不习惯函数式编程风格代码的程序员可能看起来有些头晕，好在只要我们加上恰当的缩进，在熟悉RxCpp库的命名的情况下，代码的逻辑还是比较简单明了的&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;range(0, 10)&lt;/code&gt; 先生称一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt;对象作为流的起点，内部会一次产生0,1,2,…,10发布给流，通知其后的 &lt;code class=&quot;highlighter-rouge&quot;&gt;subscriber&lt;/code&gt;, 后边的管道操作符连接了流处理的下一个环节。
接下来，用给定的字符得到一个对应ASCII码，然后用 &lt;code class=&quot;highlighter-rouge&quot;&gt;repeat&lt;/code&gt;函数经给定的字符做重复，产生4~18个重复的字符，&lt;code class=&quot;highlighter-rouge&quot;&gt;as_dynamic&lt;/code&gt;则是一个特殊的函数用于解决C++类型安全方面的一些问题。
这是一个字符行的二进制串，然后我们还需要用换行符将其连接起来，&lt;code class=&quot;highlighter-rouge&quot;&gt;from&lt;/code&gt; 的双参数形式可以产生一行新的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt; 对象，用第二个参数作为分隔符连接第一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt;,
进而这里的多个行便被连接成一个整体的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt;对象给后续处理了。&lt;/p&gt;

&lt;p&gt;由于我们希望每一行的输入仅有17个二进制串，紧接着的 &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt;函数就是用来将输入的流按照固定的长度分隔为固定长度的行的；需要留意的是每一个字符的长度可能是4~18的一个随机值，
这个在前面&lt;code class=&quot;highlighter-rouge&quot;&gt;repeat&lt;/code&gt;的时候便确定了。&lt;code class=&quot;highlighter-rouge&quot;&gt;flat_map&lt;/code&gt;可以将lambda表达式封装的实际的 &lt;code class=&quot;highlighter-rouge&quot;&gt;observable&lt;/code&gt; 提出出来。
有了上面这些按行分割好的集合，接下来的任务是需要将这些记录保存到一个容器中，便于后续解析处理，因而后续的一个&lt;code class=&quot;highlighter-rouge&quot;&gt;flat_map()&lt;/code&gt;调用针对前面的集合，
采用&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;算法收集一个一个的字符并以行为单位放入容器中，最终的流会每次产生一个&lt;code class=&quot;highlighter-rouge&quot;&gt;vector&amp;lt;uint8_t&amp;gt;&lt;/code&gt;待后续处理。
出于调试的便利，我们同时用&lt;code class=&quot;highlighter-rouge&quot;&gt;tap&lt;/code&gt;函数安插一个方便调试的打印操作，该函数本身不会修改流的数据内容。&lt;/p&gt;

&lt;p&gt;下面的代码则完成一些变换逻辑，用更多的中间变量会使得代码更容易理解一些，当然代码就不如上面的输入部分那么紧凑了。&lt;/p&gt;

&lt;p&gt;首先我们需要一个工具函数删除给定字符串中的空格字符，用一个lambda表达式可以很容易的写出来&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;removespaces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove_if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;接下来我们就可以针对上面已经生成好的bytes流，按照回车符号进行拆分,过滤掉输入中的空格字符，拆分过程可以用C++标准库的&lt;code class=&quot;highlighter-rouge&quot;&gt;cregex_token_iterator&lt;/code&gt;来完成，
并将结果用迭代器封装访问，而C++11的移动语义可以额外的减少临时字符串的开销。&lt;code class=&quot;highlighter-rouge&quot;&gt;concat_map&lt;/code&gt;将所有的去掉了换行符的字符串连接起来，交给流的下游，
然后完成过滤空格字符串的操作。&lt;/p&gt;

&lt;p&gt;最后我们需要将处理好的串再加上回车符号，并最终输出，加上&lt;code class=&quot;highlighter-rouge&quot;&gt;publish&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;ref_count&lt;/code&gt;可以使得我们写2个单独的订阅者，第一个自动建立流的连接，
最后一个订阅者处理完毕后自动关闭流. 代码如下&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;// create strings split on \r
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;concat_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;R&quot;/(\r)/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cregex_token_iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cregex_token_iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;splits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;splits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于最后一行不像前边的行一样有一个额外的回车符，我们需要将其分拣出来，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;window_toggle()&lt;/code&gt;可以很方便地将二者进行分组，
然后再将结果用&lt;code class=&quot;highlighter-rouge&quot;&gt;sum&lt;/code&gt;连接起来并删除中间的空格字符。&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// filter to last string in each line
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// group strings by line
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linewindows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window_toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// reduce the strings for a line into one string
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linewindows&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flat_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;removespaces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后一段代码用于接产生好的流打印出来，直接传递给&lt;code class=&quot;highlighter-rouge&quot;&gt;println&lt;/code&gt;即可&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// print result
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看这里的代码，可以明显看到里面没有一个传统的过程式控制逻辑，没有分支、循环和判断，有的只是函数定义、调用和流连接操作。
如果熟悉Rx系列库的API，处理逻辑还是比较清晰明了的。&lt;/p&gt;

&lt;h2 id=&quot;reactive-spring&quot;&gt;Reactive Spring&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.infoq.com/news/2015/09/spring-43-5&quot;&gt;Spring 5.0 框架&lt;/a&gt;的一个重心就是增加对FRP风格的架构的支持。
Spring框架之所以流行，一个很重要的原因就是其易用而又性能极好的MVC框架可以很好地替代传统的servelet-API，虽然Spring MVC可以很好地解耦一部的HTTP请求，
但是在不破坏既有框架的前提下增强非阻塞的IO模型却碰到了不少困难。另一方面，基于注解的MVC工具带来了更具可读性的代码和清晰的业务逻辑，
Spring 5.0在尽力不破坏既有注解的前提下，实现了一个底层的Reactive Engine。&lt;/p&gt;

&lt;p&gt;同时Spring还发布了一个基于JVM平台的&lt;a href=&quot;https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.0/README.md#specification&quot;&gt;反应式流处理规格说明&lt;/a&gt;，尝试将改编程范式在JVM平台上实现标准化。
目前该规格致力于实现多种异步组件驱动在JVM平台之上的互操作性，&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.html&quot;&gt;Flow接口&lt;/a&gt;已经加入到Java9的中;
它由4个接口，一些rule 以及一个TCK组成&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Publisher&lt;/code&gt; 用于产生可以无固定边界的元素的序列，这些元素可以被发布给特定的订阅者&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Subscribe&lt;/code&gt; 用于从&lt;code class=&quot;highlighter-rouge&quot;&gt;Publisher&lt;/code&gt;中接收数据更新&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Subscription&lt;/code&gt; 用于表述&lt;code class=&quot;highlighter-rouge&quot;&gt;Publisher&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Subscriber&lt;/code&gt;之间的订阅关系并可以对数据的处理做控制，有&lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;cancel&lt;/code&gt;方法&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Processor&lt;/code&gt; 用于表述流处理的中间状态&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;其它语言和平台&quot;&gt;其它语言和平台&lt;/h2&gt;
&lt;p&gt;对于其它编程语言环境和平台，微软的开源项目&lt;a href=&quot;https://github.com/Reactive-Extensions&quot;&gt;Reactive Extensions&lt;/a&gt;提供了丰富的支持。&lt;/p&gt;

&lt;h2 id=&quot;参考材料&quot;&gt;参考材料&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/staltz/868e7e9bc2a7b8c1f754&quot;&gt;The introduction to reactive programming you’ve been missing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1028250/what-is-functional-reactive-programming/1030631#1030631&quot;&gt;Conal’s reply on “what’s (functional) reactive programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS&quot;&gt;RxJs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxJava&quot;&gt;RxJava&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kafka.apache.org/10/documentation/streams/core-concepts&quot;&gt;Kafka Streams: concepts&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Fei Yan</name><email>skyscribe.yf@gmail.com</email></author><category term="design" /><category term="architecture" /><category term="programming" /><category term="concurrency" /><category term="microservice" /><summary type="html">流式编程或者响应式编程则是一个不断进入我们视线的设计概念；它采用声明式编程范式，并将数据流和数据更新的处理作为程序运算的核心。 由于函数式编程本身即强调声明式编程，这使得用函数式编程的语言或者工具来实现响应式编程更自然清晰， 一般人们将二者的结合称为函数式反应式编程或者FRP。 FRP最早可以追溯到微软和耶鲁的两位先驱在97年发表的论文,</summary></entry><entry><title type="html">HTTP/2和gRPC - 微服务时代的应用基础协议</title><link href="https://skyscribe.github.io/post/2018/02/10/http2-and-grpc/" rel="alternate" type="text/html" title="HTTP/2和gRPC - 微服务时代的应用基础协议" /><published>2018-02-10T00:00:00+08:00</published><updated>2018-02-10T00:00:00+08:00</updated><id>https://skyscribe.github.io/post/2018/02/10/http2-and-grpc</id><content type="html" xml:base="https://skyscribe.github.io/post/2018/02/10/http2-and-grpc/">&lt;p&gt;大部分的规模较大的商业应用软件后端系统如今都采用了分布式软件架构，并沿着SOA -&amp;gt; 微服务 的路径在往前演进；并按照领域驱动设计的绑定上下文的设计思路来切分服务；
服务之间的接口则不约而同地选择了HTTP协议作为基本的交互协议，背后的原因很大一部分应该来自于HTTP协议简洁、清晰的设计（尽管功能非常复杂）和随手可得的协议栈实现。&lt;/p&gt;

&lt;p&gt;可惜HTTP协议并不是完美无缺的选择，Google早就在Chrome浏览器中尝试去改进HTTP/1.1协议中的一些不足并提出了开放的SPDY协议；这一尝试基本为HTTP/2的提出铺平了道理。
同时在Google内部，Protobuf作为其内部的跨语言接口定义语言已经被使用了很长时间；在Google之外的一些商业组织中，Protobuf也得到了广泛的应用。
两者的结合则已经对微服务基础设施领域增添了新的可能性。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;http协议&quot;&gt;HTTP协议&lt;/h2&gt;

&lt;p&gt;HTTP协议是现金的&lt;strong&gt;互联网服务的基础协议&lt;/strong&gt;，是互联网的基石之一；从TCP/IP的协议栈结构上来说，它是工作在应用层上的协议。
它的基本通信模型遵循的是&lt;strong&gt;请求/响应式&lt;/strong&gt;通信模式，通信的双方中有一方被称为服务器放，对外提供服务并接收HTTP请求；而另外一方则称为客户端方。
一次协议交互总是从客户端发起请求开始，然后服务端收到服务请求，根据后台的资源情况做相应处理，返回结果给客户端，完成一次服务。&lt;/p&gt;

&lt;p&gt;HTTP服务器对外提供服务，因此也往往将其上的服务成为是Web Service。复杂的应用程序的一次服务可能需要多条强求/响应交互才可能完成，
这种情况下基本的请求/响应模式还是不变的；尽管多个请求之间可能按照流水线的方式做优化，形成pipeline。&lt;/p&gt;

&lt;h3 id=&quot;http的设计特点和历史&quot;&gt;HTTP的设计特点和历史&lt;/h3&gt;

&lt;p&gt;HTTP协议的设计遵循&lt;strong&gt;典型的Unix设计哲学&lt;/strong&gt;, 为了保持协议使用上的简单和可扩展，使用文本流作为协议的内容编码；
这样调试和互操作就变得简单易行。其它一些应用层协议可能采用二进制的格式来编码，可能带来比较高的效率和较小的带宽压力，
然而不同的编程语言可能处理起来就有不同的门槛（尤其一些脚本语言处理起来就比较麻烦）；而文本流是所有的编程语言都能轻松处理。
如果要对程序的行为进行分析和调试，文本协议因为是肉眼可读的，大部分情况下不需要额外的工具就可以对抓包的数据流进行分析；
应用开发的效率就比传统的二进制协议高的多。为了方便服务器关注于具体的业务而无需过多关注底层的传输细节，
HTTP协议采用TCP可靠流传输协议以确保上层发送的消息总是能可靠地传递给对方。&lt;/p&gt;

&lt;p&gt;协议结构上看，请求消息和响应消息都遵循相同的整体结构&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;头部包含请求资源的路径信息或者响应消息的状态码、协议版本等信息作为起始行&lt;/li&gt;
  &lt;li&gt;头部的其他部分包含一系列用空行隔开的一个或者多个头，每一行中包含一个头的名字和对应的值&lt;/li&gt;
  &lt;li&gt;可选的消息体，和前面的头部之间有一个额外的空行（即和其它的头之间多了额外一个空行）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;早期的HTTP协议需要解决的问题往往比较简单；毕竟早期网站上的服务内容也比较有限，并且往往是静态的文字或者图片，
早期的Web应用带有明显的文件访问的烙印：客户端发起请求访问服务器上的文件或者图片，服务器端收到HTTP请求之后，
去本地机器上查找相应的资源，然后将资源包装在相应消息中返回给客户端。这种简单场景下，简单的文件存取加上访问控制就可以轻松应付了。&lt;/p&gt;

&lt;p&gt;这种情况下，资源的类型可能有多种多样的，HTTP协议采用已经在电子邮件协议中得到广泛应用的MIME协议来描述所要访问的资源类型；
服务器端将找到的资源放在相应消息中返回，并在头部放置资源的类型。客户端在收到消息后，会先检查头部，确定类型后在决定如何解析内容。&lt;/p&gt;

&lt;p&gt;90年代中期网站上的动态内容逐渐增多，这个时候需要访问的资源可能就不仅限于静态的文件或者图片，而有可能是一些虚拟的资源，
如数据的报表或者存放在数据库中的数据的索引或者查询结果；开发效率的优势催生了Perl为主流的CGI技术的流行：
服务器端在收到请求后，根据资源请求调用外部提供服务的CGI脚本，这些脚本符合CGI接口并符合&lt;strong&gt;同步处理逻辑&lt;/strong&gt;，访问具体需要处理的资源，
并将结果写入在标准输出中，HTTP底层服务器则会接收改程序输出，原封不动地反馈给客户端。&lt;/p&gt;

&lt;p&gt;这里服务器端的&lt;strong&gt;设计方法是同步的&lt;/strong&gt;：每次过来一个请求，服务器端就新创将一个进程，调用对应的CGI脚本处理，产生输出之后，
该请求的处理被转交给底层的HTTP服务器，返回给客户端。CGI的方式在并发服务数逐渐增多的情况下会产生明显的性能问题，
因为操作系统创将大量进程的开销是很可观的；加上由于服务器在调用CGI开始到CGI返回之前都必须保持阻塞，请求数量大了之后，很容易就产生瓶颈，
导致系统资源消耗在IO等待上，无法发挥CPU的计算潜力。&lt;/p&gt;

&lt;p&gt;FastCGI技术的出现试图用技术手段缓解CGI技术的不足；FastCGI不再死板的对每个HTTP请求创建新的进程，而是总共就启动一个后台进程，
并通过一个特定的后台socket服务和Web服务器本身进行连接；这样每次有新的请求过来的时候，HTTP服务器将请求内容交给FastCGI后台进程，
由该进程进行处理后，将输出再反过来交给服务器。由于仅有一个进程在处理所有的请求，创建进程的开销，以及多个进程切换上下文的开销就可以得以节省。
同时，一些HTTP服务器提供了类似于mod_perl/mod_php等扩展技术来优化CGI，所不同的是，该技术可以将对应的语言解释器嵌入到HTTP服务器中，
避免脚本语言解释器启动的开销;同时在提升性能的情况下复用之前写好的CGI脚本。&lt;/p&gt;

&lt;p&gt;Web技术的深入发展催生了许多新的可以处理HTTP协议消息的中间件，如代理服务器、安全网关等技术；这些中间件会按照HTTP协议的规范，
对HTTP协议的头信息做一些额外的处理，但往往不会改动消息体中的媒体内容。
早期的HTTP/1.0版本默认会在一次请求响应交互结束之后，就关闭当前的socket连接；下次再要请求资源，就必须创将一条新的连接出来。
这样不仅效率低下，而且会对中间代理带来了挑战，因为这些中间结点本来是需要尽可能地做到对客户端和服务器端透明不参与连接状态管理的。&lt;/p&gt;

&lt;p&gt;安全问题是另外一个日益引起人们重视的话题，而早期的WEB内容几乎都是明文传输的，任何人都可以在网络上窃听、监视甚至修改服务器和客户端之间的通信；
隐私和敏感信息完全得不到保护。后来套接字层面的SSL已经TLS技术被引入到HTTP协议中来，在发起HTTP报文之前，先建立安全的套接字连接，
或者可以根据重定向或者挑战、响应的方式建立安全的HTTP连接。这一过程可能是比较耗时的，每次都重新建立新的HTTP连接显然效率低下。&lt;/p&gt;

&lt;p&gt;HTTP/1.1通过默认将底层连接设置为持久性连接来解决这个问题：除非指定了 Connection: close 头，默认的HTTP连接都是长连接；服务器端在送回响应消息后并不会主动关闭连接。
这样下次请求再来的时候，依然可以使用之前已经打开的连接，减少TCP协议栈启动时候滑动窗口自适应算法引起的延迟，从而使得内容可以尽快地发送给客户端。
大部分HTTP流量都被传送给客户端用以显示，更快的处理速度就意味着更快的页面反应、加载速度。
在TLS更加流行的今天，长连接的好处是TLS会话建立或者恢复（在前一个会话仍然可以被复用的情况下对应的会话块会被协商复用）的时间开销。&lt;/p&gt;

&lt;p&gt;典型的情况下，一个复杂一些的网页页面在被打开的瞬间，浏览器可能会同时发起几十乃至上百条连接请求资源，并在资源被发送到客户端之后，再进行加载和渲染显示。
很多情况下，某些资源可能来自于同一个资源服务器（可能是某些CDN、缓存或者后台同一个负载均衡节点，但并不一定是处理HTTP请求的机器），采用严格顺序地请求资源，
即使有上述的长连接优化，一来一回的时间开销也相当可观。HTTP/1.1 支持pipeline来优化这种情况&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.w3.org/Talks/970210HTTP/pipeline.gif&quot; alt=&quot;http_pipeline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这种情况下，发送方可以对同一个服务端的同一条连接，同时发起多个请求消息而不必等待响应消息的返回；同时请求消息之间，以及对应的响应消息之间任然保持严格的顺序关系。
所不同的只是发送消息的时间进行了优化。这种情况下，有一个潜在的风险，即如果第一个响应消息返回了错误，那么后续发送的请求都被认为是失败的。&lt;/p&gt;

&lt;h3 id=&quot;http11的不足&quot;&gt;HTTP/1.1的不足&lt;/h3&gt;

&lt;p&gt;HTTP/1.0以及1.1在当时的互联网应用场景下是合适而成功的设计；它简单的基于文本的协议定义和容易理解的请求/响应模型取得了巨大的成功，
大量的企业系统架构采用了HTTP协议并取得了市场上的成功；基于HTTP协议加上应用架构的演进，后续出现了依次为基础的复杂技术，
如致力于优化前端逻辑的AJAX、基于XML+SOAP+WSDL的SOA技术（也成为Big Web Service）；以及回归HTTP协议原本并增加丰富媒体资源描述访问的
RESTful API，后者成为了微服务设计的基本通信协议(更多思考见&lt;a href=&quot;/post/2017/08/29/thinking-on-service-architecture/&quot;&gt;这篇文字&lt;/a&gt;)。&lt;/p&gt;

&lt;p&gt;任何事物在长期的发展过程中都会呈现两面性；随着构建于HTTP之上的应用逻辑和架构变得日益复杂，HTTP协议的一些不适应的地方也
引起了社区的诟病。&lt;/p&gt;

&lt;h4 id=&quot;hol-问题&quot;&gt;HOL 问题&lt;/h4&gt;
&lt;p&gt;上述的pipeline特性虽然优化了数据的往返传输时间，但并不能满足日益严苛的需求；因为协议本身顺序、同步的语义中暗藏着一个经典的HOL问题：
HTTP服务器返回的响应消息必须严格按照请求的顺序发送给客户端。这意味着服务器端必须强制顺序的处理逻辑；
如果服务器端采用多线程或者异步编程的范式并发的处理请求并不按照同样的顺序返回响应，那么客户端就不能正常处理这些响应。&lt;/p&gt;

&lt;p&gt;这个问题在传统的网络交换设备的处理中就存在了，比如如下的交换机设备将给定的输入来的顺序数据按照按照多对一映射发送到输出端口上&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://en.wikipedia.org/wiki/File:HOL_blocking.png&quot; alt=&quot;hol_problem&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中的第一个输入端口和第三个输入端口下一个被处理的数据包的目的端口都是第四个输出端口，此时两者只能有一个可以发送数据；
由于两者之间必须排队，导致系统的性能、吞吐率在竞争的时候必然因为排队而下降；而没有竞争的情况（第二/第四个输入）则可以在一个处理周期内完成。
这种情形和HTTP/1.1里，同一个客户端必须要向同一个服务器发送多个请求的情况类似，由于请求响应处理的顺序性约束，
客户端必须在处理完前一个包的响应之后，才能处理其后的一个包的响应，从而即使处理器资源允许并发处理多个连接，
整体的时延也会由于同一个服务器连接的&lt;strong&gt;多条响应必须顺序到达和处理&lt;/strong&gt;而变大，即使这些资源本身之间没有业务逻辑上的依赖。&lt;/p&gt;

&lt;h4 id=&quot;文本协议的性能开销&quot;&gt;文本协议的性能开销&lt;/h4&gt;

&lt;p&gt;基于文本的设计在应对初期的互联网应用的时候还是绰绰有余的，当时的条件下网络的带宽很窄，大部分人的应用也仅仅是从服务器上下载音乐、图片、文字等；
后面随着技术的发展和网络传输技术本身的进步，以及动态网页技术的深入发展，前端显示的信息得到极大的扩展，大量的数据本身需要被查询、下载；
然后渲染显示在终端界面上；这个时候需要通过HTTP协议传输的数据动不动需要几十MB甚至更多。&lt;/p&gt;

&lt;p&gt;媒体内容的丰富导致越来越多的信息需要被加入到HTTP的头部中，包括字符编码、分块传输、缓存有效期控制、会话信息、媒体编码等等。
HTTP协议本身无状态的特性导致很多时候重复的信息需要在多个消息中被重复发送；这种情况下，文本协议的弊端就慢慢凸显出来。
一些实时应用也由于种种原因选择基于HTTP协议实现，使得性能问题更加严峻。&lt;/p&gt;

&lt;h4 id=&quot;从spdy到http2&quot;&gt;从SPDY到HTTP/2&lt;/h4&gt;

&lt;p&gt;致力于提高Web反应速度的SPDY项目决定重新设计一个能更好地匹配现今Web需求的协议；它的设计目标包括&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;将页面的加载速度增加50%以上，即比传统的HTTP服务的页面加载时间减半&lt;/li&gt;
  &lt;li&gt;将对既有的网络基础设施的影响尽可能地减到最小，具体的措施是仍然使用TCP协议&lt;/li&gt;
  &lt;li&gt;尽量避免对既有的Web内容产生影响，已有的内容应该不需要修改就可以仍然被SPDY所使用&lt;/li&gt;
  &lt;li&gt;和既有的开源社区和专家合作，采用业界已有的最佳实践&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体技术实现上的目标则有&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;允许在同一个TCP连接上开启多条逻辑上的并行的Web请求&lt;/li&gt;
  &lt;li&gt;通过减少一些不必要的HTTP头部和压缩头部开销来减少网络带宽的消耗&lt;/li&gt;
  &lt;li&gt;定义一个复杂度更低的协议以便简化服务器端的实现，不特别考虑传统HTTP协议中的一些复杂的边角情况&lt;/li&gt;
  &lt;li&gt;将SSL/TLS作为传输层的强制的安全措施；相对于TLS带来的额外时延和开销，安全性被认为是更重要的一个基础要求&lt;/li&gt;
  &lt;li&gt;允许服务端主动向客户端推送数据而不必被动地等待客户端方发送请求&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基于上述的设计目标，SPDY可以做到在一个TCP连接中建立多个并发的消息流，这些消息流可能会互相交错地发送和处理；最大限度地提高性能。
并发而又多路复用的消息流虽然解决了上述的HOL线性处理的问题，在带宽受限的情况下，客户端却可能希望某些请求的处理优先级高于另外一些，
因而SPDY增加了对流优先级的支持，以解决可能的网络带宽被低优先级的业务占领的情况；服务端可以依据客户端指定的优先级参数，采用合理的调度策略。
SPDY的头部压缩处理可以在低宽带情况下减小需要在网络上传输的包的大小，从而优化性能和响应时间。&lt;/p&gt;

&lt;p&gt;服务端可以不经客户端请求就主动向客户端发数据则&lt;strong&gt;改变了HTTP协议基本的请求、响应式的通信模型&lt;/strong&gt;。
服务器端可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;X-Associated-Content&lt;/code&gt;头来通知客户端服务器将会在非请求的情况下主动发送数据给客户端。
另外一个特性是，服务端可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;X-Subresources&lt;/code&gt;头来告知客户端，建议对方请求对应的数据；这样可以减少一次额外查询的开销。&lt;/p&gt;

&lt;p&gt;SPDY成功吸引了包括Chrome、Firefox等主流浏览器的支持，在SPDY的基础上，IETF下属的HTTP工作组起草了新版本的HTTP协议，
并将其命名为HTTP/2，之所以没有用1.x的版本号，是因为这个协议的变更带有重新设计的味道。
官方的HTTP/2协议已经于2015年2月被发布为正式版本，并定义在&lt;a href=&quot;https://tools.ietf.org/html/rfc7540&quot;&gt;RFC7540&lt;/a&gt;中。&lt;/p&gt;

&lt;p&gt;截至2015年底，大部分浏览器都加入了对HTTP/2的支持，越来越多的大型网站后端也加入到了支持HTTP/2的怀抱中。&lt;/p&gt;

&lt;h3 id=&quot;http2的特点&quot;&gt;HTTP/2的特点&lt;/h3&gt;

&lt;p&gt;HTTP/2最初的版本就是直接拷贝自SPDY协议，基本所有的SPDY协议的特性HTTP/2都支持。
一个主要的不同在于，HTTP/2采用基于哈夫曼编码头信息的压缩算法，而SPDY动态地根据流的信息进行压缩。
这里主要的考虑是避免诸如&lt;a href=&quot;https://en.wikipedia.org/wiki/CRIME&quot;&gt;CRIME&lt;/a&gt;之类的网络协议攻击。&lt;/p&gt;

&lt;h4 id=&quot;协议基本设计&quot;&gt;协议基本设计&lt;/h4&gt;

&lt;p&gt;和HTTP协议不同，HTTP/2的基本单元是帧。有数种不同类型的帧，每一种的目的各不尽相同。其中，
HEADRES对应于请求消息，而DATA帧则对应于响应消息；其它一些帧类型则用于控制选项如窗口大小，
设置帧最大大小等。&lt;/p&gt;

&lt;p&gt;多路的请求信息可以复合在一个连接中发送，每一路的请求即上述的流。不同的流之间是相互独立的；
其中某个流的阻塞或者失败并不影响其他的流，除非底层传输层出错。流控制机制和优先级选项则允许对复合的流传输做适当的控制，
以保证传输能力有限的情况下，有限的资源可以按照应用层的期望被使用。&lt;/p&gt;

&lt;h4 id=&quot;协议的发起和初始化&quot;&gt;协议的发起和初始化&lt;/h4&gt;

&lt;p&gt;HTTP/2没有改变基本的URI表示方法，也没有采用新的端口号约定；客户端依然需要像之前版本要求的那样先发起连接。&lt;/p&gt;

&lt;p&gt;由于服务器方有可能及支持老版本的协议，也支持HTTP/2，客户端在无法预先知晓服务端是否支持HTTP/2的情况下，需要首先探索服务器的能力。
客户端可以通过RFC7230所定义的HTTP协议升级选项，在发出的HTTP/1.1请求消息中添加上一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Upgrade&lt;/code&gt;头(该头的定义在老版本协议中已经定义，
只是HTTP/2新加了2种可能的取值，&lt;code class=&quot;highlighter-rouge&quot;&gt;h2&lt;/code&gt;表示采用TLS的HTTP/2，&lt;code class=&quot;highlighter-rouge&quot;&gt;h2c&lt;/code&gt;表示没有TLS加密)，如下面的例子&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET / HTTP/1.1
Host: server.example.com
Connection: Upgrade, HTTP2-Settings
Upgrade: h2c
HTTP2-Settings: &amp;lt;base64url encoding of HTTP/2 SETTINGS payload&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果服务器端不支持新版本的协议，它可以像假装没有收到这个升级请求那样，按照老版本的方式给出回应。
反之，服务器端则需要发送一个101响应，并将消息内容置为空。此后服务端就可以开始发送HTTP/2的帧，如下面的例子&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 101 Switching Protocols
Connection: Upgrade
Upgrade: h2c

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;服务端发送的第一个帧必须是一个类型为&lt;code class=&quot;highlighter-rouge&quot;&gt;SETTINGS&lt;/code&gt;的帧，而客户端需要在收到101响应之后，必须返回一个&lt;code class=&quot;highlighter-rouge&quot;&gt;SETTINGS&lt;/code&gt;帧以协商相关参数。
所有的流都有一个唯一的标识符（ID )而升级之前的请求总是被赋以1作为流的ID。&lt;/p&gt;

&lt;h4 id=&quot;不需要版本发现的初始化&quot;&gt;不需要版本发现的初始化&lt;/h4&gt;

&lt;p&gt;如果客户端可以预先知道服务端已经支持HTTP/2（可以通过其它一些协议或者应用层配置约定)；这种情况下服务发现就变得没有必要。
这种情况下，客户端依然需要先发送一个特殊的称为前言的包，该包以24字节的固定串 &lt;code class=&quot;highlighter-rouge&quot;&gt;PRI * HTTP/2.0\r\n\r\nSM\r\n&lt;/code&gt;开始，
后边更上一个可能为空的SETTINGS帧。该前言包的是专门设计为这样以方便已有的旧版本HTTP服务器可以方便地跳过后续的HTTP/2帧。&lt;/p&gt;

&lt;p&gt;同样的，服务器端也需要发送一个类似的前言包给客户端；两者的SETTINGS帧内容可能是不一样的。同时为了减小时延，
协议允许客户端不必等待服务器端的前言包和SETTINGS帧就发送额外的HTTP/2帧。&lt;/p&gt;

&lt;p&gt;一旦连接建立成功，客户端和服务器之间就可以进行&lt;strong&gt;以帧为单元&lt;/strong&gt;的数据交换。&lt;/p&gt;

&lt;h4 id=&quot;帧结构&quot;&gt;帧结构&lt;/h4&gt;

&lt;p&gt;帧结构大体上是一个固定的9字节头加上额外的可变长的流信息组成，用二进制来描述，如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://isc.sans.edu/diaryimages/images/http2%281%29.png&quot; alt=&quot;http2_frame&quot; /&gt;&lt;/p&gt;

&lt;p&gt;起始的3个字节用来描述帧的长度，和大部分的基于类型、长度、值的二进制协议类似。因为SETTINGS可能会为空，
默认情况下，帧的长度不得超过16384即只有14位被使用；如果希望使用更长的帧，则必须显式设置&lt;code class=&quot;highlighter-rouge&quot;&gt;SETTINGS_MAX_FRAME_SIZE&lt;/code&gt;。
长度的约定是不算固定头的部分。&lt;/p&gt;

&lt;p&gt;接下来的1个字节表示帧的类型，最多可以支持256种帧；1个字节的符号位信息预留给具体的帧类型可以按照需要指定不同的语义；
额外的1个比特目前被预留，协议要求必须设置为0。&lt;/p&gt;

&lt;p&gt;剩下的31个比特表示一个唯一的流标识符，0标识符被预留来表示整个连接而不是某个具体的流 - 恰恰类似于网络地址的广播地址。
可变长部分的结构和内容则完全依赖于具体的流类型而定。&lt;/p&gt;

&lt;h4 id=&quot;帧长度约定&quot;&gt;帧长度约定&lt;/h4&gt;

&lt;p&gt;所有的服务器和客户端必须支持长度为16384的帧，并且允许数据接收端声明更长的帧长度。
如果数据接收端收到的帧的长度超过了预先声明的最大长度或者特定帧类型所允许的最大长度，它需要发送给对方一个&lt;code class=&quot;highlighter-rouge&quot;&gt;FRAME_SIZE_ERROR&lt;/code&gt;的错误消息。
如果帧长度错误会影响整个连接的状态，则该错误必须被当作一个连接错误被处理。&lt;/p&gt;

&lt;p&gt;最大帧长度的设定并不意味着发送方总要用满允许的长度，因为过长的数据帧会显著地降低性能增大延时。使用小一些的帧则往往能提高服务的响应速度。&lt;/p&gt;

&lt;h4 id=&quot;头部压缩和解压&quot;&gt;头部压缩和解压&lt;/h4&gt;

&lt;p&gt;HTTP/2和HTTP/1的头定义方式一样，所不同的仅仅是前者采用了压缩和解压。压缩算法是基于哈夫曼编码，逻辑过程如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/3/30/HTTP_2_Header_Compression_HPACK.svg&quot; alt=&quot;http2_header_compression&quot; /&gt;&lt;/p&gt;

&lt;p&gt;压缩之后的字节流会被切分成一个或者多个帧，这类帧可以是HEADRES、PUSH_PROMISE、CONTINUTION等。由于Cookie的特殊性，它的处理略微不同，
因为Cookie内部会有多个K=V的结构，处理的时候会首先将Cookie扩展为多个Cookie头，然后以单个Cookie本身不允许再被切分到多个帧中。
接收端在收到这些头部块后，按照相反的顺序先解压然后再组装还原出原来的头部列表。&lt;/p&gt;

&lt;p&gt;一个完整的头部块可能是下属两种情况之一&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;单独的&lt;code class=&quot;highlighter-rouge&quot;&gt;HEADERS&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;PUSH_PROMISE&lt;/code&gt;帧并在该帧头部的标记位上，设置&lt;code class=&quot;highlighter-rouge&quot;&gt;END_HEADRES&lt;/code&gt;标记表明这是一个独立完整的头部帧&lt;/li&gt;
  &lt;li&gt;或者在对应的帧头部上，&lt;code class=&quot;highlighter-rouge&quot;&gt;END_HEADRES&lt;/code&gt;没有被设置，然后紧接着带有一个或者多个&lt;code class=&quot;highlighter-rouge&quot;&gt;CONTINUTATION&lt;/code&gt;帧，最后一个上面设置了&lt;code class=&quot;highlighter-rouge&quot;&gt;END_HEADRES&lt;/code&gt;标记&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于头部压缩是有状态的（和多个帧相关联），因此解码的时候的错误将被视为整个连接状态出了异常。&lt;/p&gt;

&lt;h4 id=&quot;流的状态和多路复合&quot;&gt;流的状态和多路复合&lt;/h4&gt;

&lt;p&gt;HTTP/2通过流这一抽象概念来表示多个逻辑上的并发连接，每个流有一个唯一的标识符。不同的流之间逻辑相互独立，数据可以被交叉发送（以帧为基本单元），
任何一方都可以关闭流；而流的标识有发起流的一方来指定。流本身也是有状态的，其状态图如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dist-prog-book.com/chapter/1/figures/http2-stream-lifecycle.png&quot; alt=&quot;http2_stream_state&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以图中间的是那个状态为分隔线，可以将状态分为2个对称的部分，左边对应的是本地发起的流，右侧对应的是对方发起的流。
简略起见&lt;code class=&quot;highlighter-rouge&quot;&gt;CONTINUATION&lt;/code&gt;帧没有标记在图中，因为该帧总是紧随&lt;code class=&quot;highlighter-rouge&quot;&gt;HEADRES&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;PUSH_PROMISE&lt;/code&gt;被发送。&lt;/p&gt;

&lt;h4 id=&quot;流标志符约定&quot;&gt;流标志符约定&lt;/h4&gt;

&lt;p&gt;协议约定流标志符被视为无符号的31位整数；客户端发起的流必须奇数作为标志符，而服务端发起的流则用偶数；新建立的流的标识符必须比已有的流标识符大，
这样就可以显示地避免标识符的冲突。数字0用于全连接的虚拟标志符，数字1则用于初始协议升级的情况，因为两者都不能作为普通流的标识符。
任何一方收到了不符合约定的标识符都必须返回连接错误，并将类型设置为协议错误&lt;code class=&quot;highlighter-rouge&quot;&gt;PROTOCOL_ERROR&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;当一方发起一个新的流的时候，如果有较小标识符的流处于&lt;code class=&quot;highlighter-rouge&quot;&gt;Idle&lt;/code&gt;状态，则这些流应该被迁移到&lt;code class=&quot;highlighter-rouge&quot;&gt;Closed&lt;/code&gt;状态。
流标志符也不允许被复用，而是一直往上增加。这样在长连接维持很长时间导致没有可用标志符的情况下，
协议要求必须新建立一条连接来解决这种情况。
对服务器端而言，它在出现类似情况的时候可以选择发送&lt;code class=&quot;highlighter-rouge&quot;&gt;GOAWAY&lt;/code&gt;以迫使客户端关闭当前长连接，建立新的连接释放流标识符。&lt;/p&gt;

&lt;h4 id=&quot;流的并发和控制&quot;&gt;流的并发和控制&lt;/h4&gt;

&lt;p&gt;客户端或者服务端都可以独立的设置最大允许的并发流的数量；此时设置的是对方可以发起的流的数量。
所有处于&lt;code class=&quot;highlighter-rouge&quot;&gt;Open&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;Half-Closed&lt;/code&gt;状态的流被统计在这个最大量控制上。
超过这个限制的情况下，协议栈要求视为错误，类型为&lt;code class=&quot;highlighter-rouge&quot;&gt;PROTOCOL_ERROR&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;REFUSED_STREAM&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;同一个TCP连接上建立多个逻辑流带来了额外的流量控制问题：一个流的阻塞可能会影响其它的流处理。
HTTP/2通过&lt;code class=&quot;highlighter-rouge&quot;&gt;WINDOW_UPDATE&lt;/code&gt;帧来施加控制。接收方告诉发方自己可以在该流上接收多少字节，以及在整个连接上接受多少字节；
发方必须遵照这些窗口设置，调整自己的数据发送行为；这一控制是基于接收方对发送方的信任。&lt;/p&gt;

&lt;p&gt;初始情况下，流量控制窗口对单个流和对整个连接都是65535个字节；流量控制机制不能被禁用。该控制仅仅使用于&lt;code class=&quot;highlighter-rouge&quot;&gt;DATA&lt;/code&gt;帧，
即其它的帧不受流量控制的限制，以免控制信息被阻塞。&lt;/p&gt;

&lt;p&gt;流也可以附带指定一个优先级，或者指定某个流依赖于另外一个流。优先级可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;HEADRES&lt;/code&gt;中指定，同时
任意时刻我们也可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;Priority&lt;/code&gt;帧来调整优先级。相互依赖的流则会被分配一个【1，256】之间的权值。
优先级和权值可以结合起来用于资源分配优先级的选择；具体细节可以参考协议定义。&lt;/p&gt;

&lt;h3 id=&quot;tls的争议&quot;&gt;TLS的争议&lt;/h3&gt;

&lt;p&gt;HTTP/2默认开启TLS并要求TLS1.2或者更高的版本，较低版本的协议已经被证明在当前的环境下不够安全。
尽管协议规范中没有强迫必须使用TLS，但包括Chrome、Firefox、Safari、IE、Edge等主流的浏览器实现都&lt;strong&gt;仅仅支持基于TLS的HTTP/2&lt;/strong&gt;；
从而使得开启TLS称为事实上的标准。&lt;/p&gt;

&lt;p&gt;另外还有一些批评的声音和加密、解密的计算资源开销密切相关；事实上许多HTTP流量并没有必须加密保护的必要，强制采用TLS带来了额外的性能开销。
另一种批评的声音认为当前的安全机制仅仅是复用已有的证书框架，在一些小型的设备上当前的模型必须强迫周期性的进行证书的登记和有效期展期，
这些操作都需要额外的开支而不是免费的。关于安全最后一个有名的争议是关于是否支持SMTP协议已经在使用的随机加密技术，
这种技术可以防范被动监听行为，而&lt;a href=&quot;https://tools.ietf.org/html/rfc7258&quot;&gt;被动监听被RFC7258列为是安全攻击&lt;/a&gt;；所幸的是RFC8164在2017年5月被发布出来，解决来该不一致。&lt;/p&gt;

&lt;h3 id=&quot;浏览器之外的支持&quot;&gt;浏览器之外的支持&lt;/h3&gt;

&lt;p&gt;HTTP/2不仅仅被作为前后端之间的API接口，就如HTTP协议被广泛应用于后端服务之间的接口一样，HTTP/2协议也被一些基础设施软件、中间件所广泛支持。&lt;/p&gt;

&lt;p&gt;HTTP服务器软件上，Apache 2.4.12通过mod_h2的方式添加了对HTTP/2的支持，老的mod_spdy已经被停止开发和维护；
Tomcat从8.5版本开始也加入了支持HTTP/2的阵营，只是需要修改些许配置；
提供高可用和负载均衡服务的HAProxy在1.8版本中加入了对HTTP/2的支持；
轻量级的嵌入应用服务器Jetty则从9.3版本中加入了对HTTP/2的支持；同时该版本也需要JDK8以上才能支持。
高性能的异步网络编程框架Netty从4.1版本开始支持HTTP/2。&lt;/p&gt;

&lt;h2 id=&quot;grpc&quot;&gt;gRPC&lt;/h2&gt;

&lt;p&gt;HTTP/2的诞生给了软件架构方面新的可能性。传统的微服务架构基于HTTP协议随处可得的现状，选择了HTTP协议和RESTful API作为服务间通信的协议；
受制于传统的HTTP协议单向请求、响应的通信模型，两个服务之间的通信如果有双向的（互相访问对方提供的服务），则不得不发起两条请求，
并要求双方同时扮演服务器和客户端的角色，给架构带来了额外的复杂性。RESTful API的默认同步、顺序特性迫使设计过程中有时候不得不绕开这一基本协议，
采用消息队列的方式做反向通信；遇到性能问题的时候，则不得不花费大力气去优化。&lt;/p&gt;

&lt;p&gt;gRPC是Google发明的一套使用HTTP/2的全部能力的基于RPC语义的协议，得益于HTTP/2所支持的服务端推送功能，它可以用一条持久连接同时支持请求、响应逻辑
和双向的消息流。&lt;/p&gt;

&lt;h3 id=&quot;protobuf编码&quot;&gt;Protobuf编码&lt;/h3&gt;

&lt;p&gt;gRPC采用广泛使用的Protobuf来编码过程调用信息，它本质上是一种可变长编码方式，内部用固定的标签、类型、域位置信息来编码基本的消息结构，
提供有效的信息压缩的同时兼顾了编解码的效率；客户端和服务端用于编解码的开销和JSON相差不大，而编码出来的二进制数据则必JSON要紧凑很多，
大概仅相当于基于SOAP的WSDL消息的几分之一。&lt;/p&gt;

&lt;h3 id=&quot;rpc语义&quot;&gt;RPC语义&lt;/h3&gt;

&lt;p&gt;RPC是一种存在很久的技术，它的基本思路是跨越网络进行过程调用；服务使用方（客户端）准备好过程调用的参数，然后发起一个本地调用（类似于一个函数调用），
然后本地的一个服务桩则将对应的调用信息封装成网络消息，并将请求发送给真正的服务端；服务端随后可以解析收到的请求，
在服务提供方自己的机器上完成运算，然后将结果封装为消息返回。此时服务使用方的桩调用往往处于阻塞状态，
在收到返回消息后，它再完成消息的反序列化和结构化，然后将结果返回给上层。&lt;/p&gt;

&lt;p&gt;传统的RPC框架往往需要自己手工写大量的代码，处理诸如网络异常、消息收发调度等和具体过程调用逻辑无关的代码才能顺利使用RPC。
gRPC则抽象了这些底层细节，用protobuf的格式来定义过程请求的语义，用HTTP/2做高效的传输层，使应用层仅仅通过使用protobuf格式定义自己的服务原语，
框架则可以自动生成上述这些繁琐的代码，而服务使用者仅仅需要关注自己的领域逻辑即可。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://grpc.io/img/landing-2.svg&quot; alt=&quot;grpc_req_resp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;gRPC框架本身是跨平台、跨语言的，这使得它很容易成为微服务架构下服务之间的接口。它的服务交互方式是基于RPC的，
和传统的SOA中的Web Service的方式有些相近而和基于RESTful的架构风格截然不同。两者没有绝对的有略，而是各自有其适用的场景。
从性能上来看，gRPC采用更紧凑的编码和领域相关的逻辑来描述服务接口，和传统的SOA中的WSDL也有明显的不同；
前者和微服务架构的基本设计哲学是匹配的，而后者的接口仍然是哑接口，仅仅侧重于消息交换而不是领域逻辑（之前&lt;a href=&quot;/post/2017/08/29/thinking-on-service-architecture/&quot;&gt;一篇文字&lt;/a&gt;探讨了微服务设计）。&lt;/p&gt;

&lt;p&gt;gRPC其实定义了一种自己的&lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;DSL&lt;/a&gt;来描述服务语义，只是它的语法和概念比WSDL要简化的多。
因为protobuf本身就是定位于跨语言之间的信息交换的中间格式，gRPC仅在protobuf语法的基础上增加了&lt;code class=&quot;highlighter-rouge&quot;&gt;service&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;rpc&lt;/code&gt;关键字。
声明一个最简单的请求、响应服务的定义如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// The greeter service definition.
service Greeter {
    // Sends a greeting
    rpc SayHello (HelloRequest) returns (HelloReply) {}
}

// The request message containing the user's name.
message HelloRequest {
    string name = 1;
}

// The response message containing the greetings
message HelloReply {
    string message = 1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;服务提供方和使用者两边都需要持有上述的服务定义，然后利用已有的protobuf编译器可以生成目的平台编程语言对应的代码；
领域逻辑代码需要将生成的代码加入到代码库中，调用或者扩展生成的类/结构即可。
目前gRPC支持11种语言环境，细节见&lt;a href=&quot;https://grpc.io/docs/&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;双向流&quot;&gt;双向流&lt;/h3&gt;

&lt;p&gt;gRPC封装了HTTP/2协议的服务端推送功能，并提供了丰富的流功能，包括客户端发起的数据流服务，服务端发起的流服务，以及双向的流服务。
调用的发起过程总是由客户端发起调用，提供服务方法和元数据;服务端在收到请求之后，可以依据流的类型发出元数据、响应消息等。&lt;/p&gt;

&lt;p&gt;对于服务端发起的流处理服务，服务端在收到客户端的请求之后，直接将响应消息依次写入到输出流中；这时候客户端已经准备好接收消息了，
只需要依次从流中读取即可。客户端发起的流服务的处理是类似的，所不同的是这时候客户端可以依次写入多条请求，
而服务端往往仅需要在处理请求的过程中，发送一条响应即可；大部分情况下，&lt;strong&gt;响应消息在处理完最后一个请求的时候发出&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;所谓的双向流是指它的RPC服务方的接口接受一个流作为输入，同时返回的结构又是另外一个流，逻辑上有两个相互独立的流用作两者之间的通信。
流的发起方（客户端或者服务端）可以根据应用逻辑不断地往流中写入消息，接收方就可以依次按顺序读取其中的消息。
具体怎样去处理流中收到的消息以及如何将两个流中的数据关联起来，完全依赖于应用层的实际，gRPC本身支持丰富的场景&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;服务端可以在收全所有的客户端流中的数据之后，再往客户端的流（输出流）中写入数据&lt;/li&gt;
  &lt;li&gt;服务端也可以每收到一条数据，就做出相应业务处理，并将处理结果写入到客户端的流，实现类似Reactor的模式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;流的定义是通过一个额外的&lt;code class=&quot;highlighter-rouge&quot;&gt;stream&lt;/code&gt;关键字来指明的，如下面的例子&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//服务端流
rpc manyReplies(Request) returns (stream Response){
}

//客户端流
rpc manyRequests(stream Request) return (Response) {
}
//双向流
rpc bidirectionalRequests(stream Request) return (stream Response) {
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;具体stream的实现是和编程语言相关的，在Java中它是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;StreamObserver&amp;lt;T&amp;gt;&lt;/code&gt;来抽象stream对象的，它支持常见的流操作接口&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onNext&lt;/code&gt;方法实现往流中追加消息&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onCompleted&lt;/code&gt;则会结束流&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个双向聊天的服务端实现如下&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StreamObserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RouteNote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;routeChat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StreamObserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RouteNote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseObserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StreamObserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RouteNote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RouteNote&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RouteNote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getOrCreateNotes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Respond with all previous notes at this location.&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RouteNote&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prevNote&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RouteNote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;responseObserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prevNote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Now add the new note to the list&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;notes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WARNING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Encountered error in routeChat&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;responseObserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;超时控制和rpc终止&quot;&gt;超时控制和RPC终止&lt;/h3&gt;

&lt;p&gt;在微服务架构下，一个客户端的请求往往需要经历多个微服务节点的处理才能最终完成处理返回响应，如果中间某个服务节点宕机无法提供服务，
那么后续从错误中恢复出来后再向下游节点重新请求就会失去意义。
gRPC通过内置的超时控制机制来简化应用层的逻辑复杂度&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;服务的调用方可以指定一个RPC必须终止的最长时间&lt;/li&gt;
  &lt;li&gt;服务端则会在调用RPC之前先检查给定的服务调用是否已经超时，或者剩余多少时间可以用于调用本身&lt;/li&gt;
  &lt;li&gt;如果已经超时，就会直接返回错误而不是继续调用服务实现&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;gRPC正在崛起为新的微服务基础设施之一，甚至可以和传统的微服务基础设施HTTP/RESTful API并驾齐驱，越来越多的基础软件加入到了支持gRPC的行列。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://community.akamai.com/community/web-performance/blog/2017/08/10/how-does-http2-solve-the-head-of-line-blocking-hol-issue&quot;&gt;How does HTTP/2 solve the Head of Line blocking (HOL)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.chromium.org/spdy/spdy-whitepaper&quot;&gt;SPDY: an experiemental protocol for a faster web&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7540&quot;&gt;RFC7540&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dist-prog-book.com/chapter/1/gRPC.html&quot;&gt;Distributed Programming Book: gRPC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://grpc.io/docs/guides/concepts.html&quot;&gt;gRPC core concpets&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Fei Yan</name><email>skyscribe.yf@gmail.com</email></author><category term="design" /><category term="architecture" /><category term="microservice" /><summary type="html">大部分的规模较大的商业应用软件后端系统如今都采用了分布式软件架构，并沿着SOA -&amp;gt; 微服务 的路径在往前演进；并按照领域驱动设计的绑定上下文的设计思路来切分服务； 服务之间的接口则不约而同地选择了HTTP协议作为基本的交互协议，背后的原因很大一部分应该来自于HTTP协议简洁、清晰的设计（尽管功能非常复杂）和随手可得的协议栈实现。</summary></entry><entry><title type="html">从API网关到服务网格</title><link href="https://skyscribe.github.io/post/2018/01/20/api-gw-to-servicemesh/" rel="alternate" type="text/html" title="从API网关到服务网格" /><published>2018-01-20T00:00:00+08:00</published><updated>2018-01-20T00:00:00+08:00</updated><id>https://skyscribe.github.io/post/2018/01/20/api-gw-to-servicemesh</id><content type="html" xml:base="https://skyscribe.github.io/post/2018/01/20/api-gw-to-servicemesh/">&lt;p&gt;API网关是微服务结构中的一个重要的边界组件，用于隔离外部用户和内部的服务部署，完成诸如安全、鉴权等集中化的功能。
边车代理则是服务网格架构中的一个重要概念，两者从逻辑上都是作为基础设施和业务的核心功能逻辑相分离的，有一定的相似性而又有很大的不同。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;微服务和api网关&quot;&gt;微服务和API网关&lt;/h2&gt;

&lt;p&gt;微服务架构本身强调服务本身需要关注于系统的某一部分领域逻辑，并按照系统的领域问题拆分达到每一个微服务仅仅关注一个领域逻辑，
而这些微服务的整体组合成为一个大的系统；并根据不同的领域特点采用合适的软件技术实现；只要服务之间的接口协议是标准的跨语言协议即可；
大部分情况下微服务采用RESTful API（或者RPC ）加上异步消息队列来作为接口。&lt;/p&gt;

&lt;p&gt;从架构静态设计上来说，这样解决了服务抽象和切分的问题，只是大部分业务逻辑呈现典型的前后端逻辑，一般情况下是
后端有一系列微服务组合而成，最终被部署在企业的云服务器（数据中心）上；这些云服务器可能是公有云、私有云乃至混合云。
不同的服务可能有不同的水平扩展需求，以及可用性、可靠性需求。还有一部分业务逻辑可能是在用户终端设备上，
包括浏览器页面、Android手机、iOS系统、桌面应用乃至或者其它的智能设备等。
很多情况下，前端对后端业务的访问有一些额外的需求，包括诸如安全、授权、审计等需求，并且大部分高可用的需求都是在后端上。&lt;/p&gt;

&lt;p&gt;让每个微服务都提供这些跟领域逻辑无关的负载均衡、备份、流量控制、安全等功能，明显和&lt;strong&gt;关注点分离&lt;/strong&gt;的设计原则相违背。
自然没有人再想回到传统SOA架构中的基于类似ESB总线的厚基础设施的工作方式上来，毕竟如果这样做，就和微服务设计的智能协议接口的思想背道而驰了。&lt;/p&gt;

&lt;p&gt;微服务采用的思路将这些后端的具体的领域逻辑组成的微服务看作一个子系统，在这个子系统和外部服务调用者之间再加上一个网关，
让这个网关来负责这些比较通用的、和领域逻辑非紧密相关的需求；因为它本身是基于已有的服务访问的APi做的中间处理，所以被称为API网关。
这样问题就得到了解决，毕竟计算机科学中的复杂问题都可以通过加一个中间层来分而治之。&lt;/p&gt;

&lt;h3 id=&quot;api网关解决的主要问题&quot;&gt;API网关解决的主要问题&lt;/h3&gt;

&lt;p&gt;API网关主要解决以下这些微服务架构中的问题&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;前端访问的API的粒度和后端微服务的API不匹配的问题 - 典型的微服务架构可能有数百个后端微服务组成，每一个微服务可能提供很多个粒度很细的API，
而这些API可能很多不是客户端直接需要的&lt;/li&gt;
  &lt;li&gt;不同的客户端可能有不同的API访问版本需求，譬如桌面客户端需要访问的微服务API可能就比手机端的要丰富一些&lt;/li&gt;
  &lt;li&gt;不同的客户端访问可能具有不同的网络性能、带宽和时延需求，这些需求和核心领域逻辑是非紧密相关的；桌面计算机上的浏览器可以在同时发起很多条并发的HTTP请求，
而移动手机端则可能出于性能、能耗考虑需要前置其连接数量；本地局域网中的客户端访问和跨越骨干网的客户端访问的要求可能也是不一样的&lt;/li&gt;
  &lt;li&gt;后端微服务的动态扩展（通过启动新的服务示例增加处理能力）需要对外部访问者做隐藏，负载均衡以及集群控制逻辑需要对客户端做隐藏&lt;/li&gt;
  &lt;li&gt;后端微服务可能采用不同的协议，有些协议可能不需要暴露给客户端&lt;/li&gt;
  &lt;li&gt;安全、审计、计费等需求&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;典型的解决方法&quot;&gt;典型的解决方法&lt;/h3&gt;

&lt;p&gt;一种常用的做法是在前端和后端之间，让API网关成为一个单一的访问点，它可以处理两者的请求，
处理请求可以被转发或者内部路由到某个服务节点上，也可以被扇出到多个微服务实例上做负载均衡，或者根据安全配置直接拒绝。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://microservices.io/i/apigateway.jpg&quot; alt=&quot;api_gw_solution&quot; /&gt;&lt;/p&gt;

&lt;p&gt;实现上，API网关也可以根据客户端的不同而暴露不同的API，比如Netflix的API 网关内部有依据客户端的不同而动态选择适配的代码，使不同的客户端可以得到不同的访问API。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*ceTE4I9CbLv_cRPQEyrkMw.png&quot; alt=&quot;netflix_api_gw&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;基于前端的变种&quot;&gt;基于前端的变种&lt;/h3&gt;

&lt;p&gt;另外一种解决方案是依据前端的不同，设置多个API网关，每个网关针对一种客户端提供一个具体的API网关；这些网关分别和后端的服务交互完成整个处理流程。
其架构如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://microservices.io/i/bffe.png&quot; alt=&quot;api_gw_backend_for_frontend&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;api网关的特点&quot;&gt;API网关的特点&lt;/h3&gt;

&lt;p&gt;API网关是对后端微服务的整体封装，它提供了一个受控的API环境，由此&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;API网关会调用被其隐藏的更下游的微服务，并确保这些调用满足高度可用和弹性设计模式，包括断路控制、超时控制、负载均衡和自动切换等。
很多API网关实现会包含这些基本弹性设计功能。&lt;/li&gt;
  &lt;li&gt;API网关往往也提供对服务发现和注册，性能指标统计、监控、分布式日志、跟踪和安全审计等功能&lt;/li&gt;
  &lt;li&gt;同时API网关也会和API发布、计费等一些通用的API管理功能相结合，共同提供服务&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;无服务器架构和服务网格&quot;&gt;无服务器架构和服务网格&lt;/h2&gt;

&lt;p&gt;基于上述讨论的微服务架构自身在通用基础设施方面的不足，以及API网关本身容易成为系统灵活性和扩展性的瓶颈的隐忧，
致力于进一步缩小运维成本的无服务器架构用服务网格来作为底层基础设施的封装，
使每个微服务都有一个基础设施的部分负责上述API网关完成的通用功能，使得系统设计的灵活性得到更大的提高。
无服务器架构在很多场景下被称为是”下一代微服务”；可以看作它是微服务架构的进一步延伸; 其本身是为了更好的满足云原生应用的要求而被提出的。&lt;/p&gt;

&lt;h3 id=&quot;云原生应用&quot;&gt;云原生应用&lt;/h3&gt;

&lt;p&gt;很多企业应用程序都带着”历史包袱”并采用云计算技术出现之前的建构方式进行设计、开发、部署和维护的；
云原生应用(Cloud Native Application)的想法是&lt;strong&gt;直接将云计算基础设施当作基本前提&lt;/strong&gt;，
充分利用云计算技术提供的持续集成、持续交付等技术优势来设计、开发和维护应用程序；采用微服务架构和分布式设计的最佳设计以便开发出来的应用更适合云计算时代的IT环境。&lt;/p&gt;

&lt;p&gt;云原生应用的开发需要商业组织具备基本的云计算部署平台，可以方便地和持续交付、DevOps、容器化和微服务这些技术相辅相成，充分发挥云计算高深缩性、灵活性和易扩展的优势。
从软件过程上而言，云原生应用的方法更具有敏捷性，可以更快&lt;strong&gt;将最小可行产品以不损失目标质量要求的情况下，以尽可能快的速度推向市场，获取客户的反馈&lt;/strong&gt;，持续迭代赢得竞争优势。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1fto35gcfffzn.cloudfront.net/images/topics/cloudnative/diagram-cloud-native.png&quot; alt=&quot;cloud_native&quot; /&gt;&lt;/p&gt;

&lt;p&gt;云原生应用从设计上来说和传统的企业软件应用有如下不同&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;软件行为的可预测性上来说，前者更强调充分利用容器技术来驱动自动化的开发，这比传统的自上而下的传统分层架构方法有更高的可预测性。&lt;/li&gt;
  &lt;li&gt;底层操作系统和平台的抽象隔离上，基于容器技术或虚拟化技术的云原生应用可以天然隔离底层操作系统平台的维护、升级、安全补丁等繁琐的IT细节的影响，
使应用开发人员更专注于业务逻辑；而传统的应用则必须考虑这些底层硬件、存储、网络、操作系统的细节；实现动态可扩展性上则更加有挑战。&lt;/li&gt;
  &lt;li&gt;IT资源的使用率上来说，云原生可以利用容器编排技术动态分配工作负载，而传统的企业应用则往往通过预留资源的方式应对不确定的流量和负载。&lt;/li&gt;
  &lt;li&gt;开发模式上来说，前者更具有敏捷性，可以结合高度的测试自动化和持续发布模型实现快速迭代；后者则更为依赖一些笨重的开发模型&lt;/li&gt;
  &lt;li&gt;架构独立性上来说，前者更强调微服务架构和领域驱动建模方法，比基于传统单体架构的企业应用有更小的系统耦合。&lt;/li&gt;
  &lt;li&gt;扩展性和自动恢复方面看，云原应用可以利用云计算的基础设施实现快速、灵活的自动水平扩展，并可以利用诸如Kubernetes或者MeSoS这样的开源平台提高可用性和可扩展性；
传统的架构则则多可以实现虚拟机粒度的扩展性和自动恢复控制。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;服务网关的方式则明显带有传统企业应用架构模式下的分层思维，和微服务的领域解耦思路有些不太协调的地方。
服务网格则试图简化这一基础设施层面的工作，将这些基础设施的部分用一个单独的层来维护的同时，保持单个服务自身的完整性。&lt;/p&gt;

&lt;h3 id=&quot;服务网格的基本思路&quot;&gt;服务网格的基本思路&lt;/h3&gt;

&lt;p&gt;服务网格的基本想法是，让微服务的设计者无需再关心服务于服务之间如通过复杂的拓扑结构进行相互通信；作为一个新的抽象层，
服务网格提供一个轻量级的代理来和微服务一一绑定，并使微服务本身无需关注该代理的存在。这些代理总是处于一个一个具体的微服务的边界上，所以被称为边车代理。
这些边车代理自身可以形成一个网格，之间可以相互通信，设置路由，进行超时、断路器控制，进行安全管控等。&lt;/p&gt;

&lt;p&gt;服务网格的基本结构可以参考下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://philcalcado.com/img/service-mesh/6-a.png&quot; alt=&quot;service_mesh_basic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;结合微服务架构的基本思想和云原生应用设计的原则，边车代理一般和具体的微服务实例是一一配对的，即每一个微服务都有一个相关的代理处理和其他微服务的通信；
两者往往部署在同一个微服务容器中。不同的微服务之间的底层通信则是通过这些代理之间的通信的完成的。
某种程度上来说，服务网格仍然是想用轻量级的方式来提供ESB类似的能力，并不破坏架构的灵活性以更敏捷的方式架构复杂多变的软件系统。&lt;/p&gt;

&lt;p&gt;显然边车代理的功能和API网关有某些逻辑上相似的地方，并且边车代理可以提供更灵活的配置和管理。&lt;/p&gt;

&lt;h2 id=&quot;边车代理和api网关的简单比较&quot;&gt;边车代理和API网关的简单比较&lt;/h2&gt;

&lt;p&gt;一个最明显的不同是，边车代理是一个专门为不同的微服务之间提供服务间通信的基础设施；而API网关则是一个比较纯粹的用于隔离系统架构的边界微服务。
前者可以和具体的微服务示例一一绑定提供底层通信服务，而后者则往往处于系统前后端的隔离边界上实现系统视图上的分离和控制。
从业务领域逻辑上来说，&lt;strong&gt;边车代理基本不关心具体的业务逻辑&lt;/strong&gt;而仅仅和软件技术架构的弹性设计需求以及控制密切相关；
API网关则和需要控制的API功能息息相关。&lt;/p&gt;

&lt;p&gt;API网关可以看作是中心化的服务管理和控制；而边车代理则具备更强的分布式控制能力；具有&lt;strong&gt;更多去中心化&lt;/strong&gt;的想象空间(读过凯文凯利的《失控 》的话会更明白去中心化的威力)。&lt;/p&gt;

&lt;p&gt;一个软件系统中，边车代理也可以和API网关同时存在，如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*JHrJe_8TO05wRQvwhwoKfA.png&quot; alt=&quot;api_gw_coexist_with_sidecar_proxy&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;边车代理服务网格的几种实现主要实现&quot;&gt;边车代理/服务网格的几种实现主要实现&lt;/h2&gt;

&lt;p&gt;边车代理和服务网格仍然是比较新的软件架构技术；尽管其出现的时间不算太长，借助于开源社区的力量，该技术却取得了比当初微服务更多的关注，
同时既有的一些实现也有更快的迭代速度。&lt;/p&gt;

&lt;h3 id=&quot;linkerd&quot;&gt;Linkerd&lt;/h3&gt;

&lt;p&gt;Linkerd是&lt;a href=&quot;https://buoyant.io/products/&quot;&gt;Buoyant&lt;/a&gt;推出的第一代服务网格技术；辅一推出即在开源社区引起了极大的关注。
Linkerd支持产品级别的全功能的服务网格功能，涵盖服务发现、负载均衡、路由、错误处理、服务状态跟踪、跨平台、跨语言等功能，
支持HTTP/2、gRPC、Kubernetes等技术，具备强大而又灵活的处理能力和上好的扩展性。&lt;/p&gt;

&lt;p&gt;可能是出于开发效率的选择，Linkerd是用Java开发的，而JVM的开销对于一个边车代理而言有可能太厚重了一些，毕竟基于Docker 的容器技术的一大挑战就是image的尺寸问题；
作为轻量级代理嵌入容器的Linkerd占用的地盘比上层的微服务本身还大可不是什么好事情。&lt;/p&gt;

&lt;p&gt;Buoyant的官方博客的数据显示，默认情况下，Linkerd本身可能会占掉数百MB的内存；即使经过JVM虚拟机JIT配置的优化（比如使用32位的虚拟机和禁用C2即使编译），其内存使用开销
在QPS超过10000的情况下，仍然可能达到100MB以上；参考下图的数据&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://buoyant.io/wp-content/uploads/2017/07/buoyant-linkerd-memory-footprint-chart.png&quot; alt=&quot;linkerd_memory&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;lstio和envoy&quot;&gt;lstio和Envoy&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://istio.io/&quot;&gt;lstio&lt;/a&gt;是另外一个服务网格领域的后起之秀，严格来说它和Linkerd并不完全类似；尽管从功能上来说，lstio也提供了一个
开源的基础设施，方便对微服务之间的通信流量进行管理、安全控制、负载均衡和流量控制。&lt;/p&gt;

&lt;p&gt;lstio显示地将它的架构分成2个逻辑部分&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;数据平面负责边车代理以及这些代理之间的数据通信和传输控制&lt;/li&gt;
  &lt;li&gt;控制平面仅仅负责管理代理之间的路由、安全等配置数据和策略设定，并支持在运行期进行调整和定制
数据平面实际上是通过Envoy项目实现的，控制平面则有另外一些组件组成，包括Pilot, Mixer, lstio-Autio 等部分。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://istio.io/docs/concepts/what-is-istio/img/overview/arch.svg&quot; alt=&quot;lstio_arch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://envoyproxy.github.io/envoy/&quot;&gt;Envoy&lt;/a&gt;是一个用C++语言写成的高性能代理，用于处理进出该代理（以及封装的微服务）的数据流量。
lstio使用了Envoy内置的动态服务发现、负载均衡、TLS终止、HTTP/2以及gRPC路由、请求断路器、健康状态检查功能和丰富的诊断度量参数。
部署上，Envoy被部署在所负责的微服务相同的pod上，方便lstio通过Mixer组件施加代理策略，并可以将系统监控信息发送给控制平面，以方便对整个服务网格的控制。&lt;/p&gt;

&lt;p&gt;Mixer是一个平台无关的专门用于在整个服务网格上施加访问控制策略和使用策略的组件；它可以从Envoy上提取电报数据，
并对从服务网格中的各个Envoy实例发送的请求属性信息进行评估，根据以插件方式提供的策略决策逻辑来决定如何对运行中的Envoy加以调整。
这些请求属性包括源地址、请求时间、请求大小等信息。&lt;/p&gt;

&lt;p&gt;Pilot组件则专门用于支持这些边车代理服务的服务发现，提供服务流量和路由管理能力以便支持A/B测试、金丝雀发布，以及服务超时、重试、断路器等控制。
它可以将高层的路由控制信息转换为具体的Envoy配置，在运行期动态地下发给对应的Envoy代理，对流量进行控制。
Pilot提供了高度抽象的服务发现机制API，以避免和具体的实现相绑定；这种&lt;strong&gt;松散耦合设计&lt;/strong&gt;允许lstio运行在多种异构的云平台上；
同时它和Envoy的接口仅仅是抽象的 Envoy数据平面API，使得其它的代理也可能被lstio所控制。&lt;/p&gt;

&lt;p&gt;lstio-Auth 用于安全和认证控制；基于内置的双向TLS认证，身份和证书管理，可以将为提供TLS服务的微服务自动提升为TLS保护的访问，
方便用户根据需要依据特定的安全策略选择性对微服务添加不同的安全控制。未来版本的lstio可能会增加更细粒度的请求级别的访问认证和控制；
使得用户可以选择灵活的访问控制策略，如属性控制，基于角色的控制或者授权钩子。&lt;/p&gt;

&lt;p&gt;lstio的不足是目前仅仅支持Kubernetes的架构，并且很多功能都没有完全开发完毕，尚不具备足够的成熟度以便在生产环境进行部署。
这一项目目前仍然在快速演进。&lt;/p&gt;

&lt;h3 id=&quot;conduit&quot;&gt;Conduit&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://conduit.io/&quot;&gt;Conduit&lt;/a&gt;可以看作是Buoyant在lstio对Linkerd提出挑战的情况下的应对之策 - 不是在优化Linkerd上下功夫而是另起炉灶创建了一个新的以轻量级、高性能为目标的新项目。
Conduit的设计目标包括&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;轻量级&lt;/li&gt;
  &lt;li&gt;高性能&lt;/li&gt;
  &lt;li&gt;安全、高可用性&lt;/li&gt;
  &lt;li&gt;重用Linkerd设计中踩的一些”坑”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conduit采用和lstio类似的设计，并处于安全和性能的考虑，这次不再执着于JVM平台而是用Rust语言重写数据平面；
关于Rust为什么可以做到更安全的编程，可以参考之前&lt;a href=&quot;/post/2015/11/28/rust-language-quick-overview/&quot;&gt;这篇文字&lt;/a&gt;。
控制平面则选用了更适合云计算基础应用的Golang来开发；并刻意保证两者都有很高的性能。&lt;/p&gt;

&lt;p&gt;一个随之而来的问题是，作为同一个组织推出的2个类似产品，两者是否会互相竞争？
Buoyant给出的答案是不会，目前Conduit主要定位于Kubernetes平台的应用，虽然没有明说但明显是冲着防御lstio来的。
Linkerd则会继续开发，并致力于产品级的支持和维护，支持ECS、Consul、Mesos、Zookeeper、Nomad等各种已有的云平台；
提供丰富的功能集吸引商业用户。&lt;/p&gt;

&lt;p&gt;显然服务网格和边车代理的战争才刚刚拉开序幕。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://microservices.io/patterns/apigateway.html&quot;&gt;API Gateway Pattern&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/netflix-techblog/embracing-the-differences-inside-the-netflix-api-redesign-15fd8b3dc49d&quot;&gt;Netflix Techblog - Embrace the differences: Inside the Netflix API Redesign&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/microservices-in-practice/service-mesh-vs-api-gateway-a6d814b9bf56&quot;&gt;Service Mesh vs API Gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://buoyant.io/2017/04/25/whats-a-service-mesh-and-why-do-i-need-one/&quot;&gt;Buoyant blog - what’s a service mesh and why I need one?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://philcalcado.com/2017/08/03/pattern_service_mesh.html&quot;&gt;Pattern: service mesh&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pivotal.io/cloud-native&quot;&gt;Cloud Native Application&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Fei Yan</name><email>skyscribe.yf@gmail.com</email></author><category term="design" /><category term="architecture" /><category term="servicemesh" /><category term="microservice" /><summary type="html">API网关是微服务结构中的一个重要的边界组件，用于隔离外部用户和内部的服务部署，完成诸如安全、鉴权等集中化的功能。 边车代理则是服务网格架构中的一个重要概念，两者从逻辑上都是作为基础设施和业务的核心功能逻辑相分离的，有一定的相似性而又有很大的不同。</summary></entry><entry><title type="html">Kafka的设计为什么高效</title><link href="https://skyscribe.github.io/post/2017/11/18/kafka-design-study/" rel="alternate" type="text/html" title="Kafka的设计为什么高效" /><published>2017-11-18T00:00:00+08:00</published><updated>2017-11-18T00:00:00+08:00</updated><id>https://skyscribe.github.io/post/2017/11/18/kafka-design-study</id><content type="html" xml:base="https://skyscribe.github.io/post/2017/11/18/kafka-design-study/">&lt;p&gt;Kafka这一孵化于LinkedIn的开源项目正得到越来越多组织的关注和使用；其优雅的设计和对实时性处理的探索有很多值得学习的地方。
本文试就个人学习过程中的一些思考和理解来分析为什么Kafka可以兼顾可靠性、一致性和尽可能强的实时处理能力。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;kafka的基本设计&quot;&gt;Kafka的基本设计&lt;/h2&gt;

&lt;h3 id=&quot;设计目标&quot;&gt;设计目标&lt;/h3&gt;
&lt;p&gt;Kafka的首要设计目标是一个高性能的分布式数据流处理平台，它需要处理巨大的数据量并且提供极强的可靠性约束和一致性保障；这在分布式设计中是一个巨大的难题，
因为同时能满足CAP要求的数据管理系统从理论上来说是不可能的。这里主要的区别是，Kafka仅仅是一个数据中间处理平台，作为一个broker本身，
它对数据的内容和模型范式是不关心的，其主要任务是作为一个可靠、易扩展、高性能的中间媒介，尽快消费生产者送过来的消息，
按照消费者的数目、集群配置将收到的消息尽可能高效地分发个消费者。&lt;/p&gt;

&lt;h3 id=&quot;基本概念&quot;&gt;基本概念&lt;/h3&gt;

&lt;p&gt;作为一个中间媒介，Kafka将从生产者中收到的数据保存在其平台上的内部存储系统上，这些数据逻辑上被保存在不同的逻辑分区上。
出于高可靠性的考虑，这些逻辑分区可能会被分别放置在不同的磁盘，或者是同一机架上的不同的物理机器上，或者是同一数据中心的不同机架上。
这样的灵活性考量是为了方便用户订制不同的可靠性策略。&lt;/p&gt;

&lt;h4 id=&quot;话题&quot;&gt;话题&lt;/h4&gt;
&lt;p&gt;考虑到Kafka的核心是提供一个&lt;strong&gt;消息流处理平台&lt;/strong&gt;，并同时可以处理多个并发的消息流；从概念上它将一个独立的逻辑消息流抽象为一个话题 (Topic) 。
话题才是Kafka基本的逻辑处理单元，所有的分发和调度，乃至集群处理等技术均以话题为基本处理单元。因为是话题是数据流的抽象，
因而其中的单个数据记录可以认为&lt;strong&gt;总是按照时间顺序依次往后面追加&lt;/strong&gt;的。生产者和消费者均需要知道它所要操作的话题名称然后才可以做对应的流操作：
生产数据追加到话题中，或者从话题中取数据消费。&lt;/p&gt;

&lt;h4 id=&quot;生产者和消费者&quot;&gt;生产者和消费者&lt;/h4&gt;

&lt;p&gt;生产者和消费者都可以认为是实际的用户应用程序；Kafka提供API的方式将对应的生产者、消费者代码嵌入到用户的程序中，实现对Kafka平台的访问。
生产者和消费者是对主题而言的一个相对概念，即同一个应用程序既可以是生产者，也可以是消费者（对另外一个不同的主题）。&lt;/p&gt;

&lt;p&gt;生产者产生数据记录并通过封装API发送到Kafka平台上，被内部存储和分发。消费者则通过订阅某个主题收到Kafka平台的数据推送。整个数据处理风格是 Pub/Sub 风格的，
即生产者发布数据到Kafka，生产者从Kafka订阅数据的生成。&lt;/p&gt;

&lt;p&gt;生产者和消费者&lt;strong&gt;从业务逻辑和物理部署上相解耦，二者的关联是纯粹逻辑上的&lt;/strong&gt;，可以在运行期随着负载而扩展，这一方式具有极大的灵活性；
用户可以根据自己的需要订制和分发自己的工作负载。&lt;/p&gt;

&lt;h3 id=&quot;分组式处理&quot;&gt;分组式处理&lt;/h3&gt;

&lt;p&gt;从分布式可靠性的角度考虑，话题的内容需要被平台内部存储和调度；为了应对可能的硬件错误或者节点失效，Kafka内部将&lt;strong&gt;每一个话题切割为多个子部分&lt;/strong&gt;，每个子部分称为一个分区。
逻辑上来说这些分区里面的数据记录的合集是生产者所生成的数据的整体，见下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://kafka.apache.org/10/images/log_anatomy.png&quot; alt=&quot;kafka_partition&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;消费者分组&quot;&gt;消费者分组&lt;/h4&gt;

&lt;p&gt;由于生产者和消费者可以是完全解耦的（微服务设计下的一个潜在假设），他们的处理能力及其实例的数量都可能是不同的（可以用Kubenetes或者MeSos等工具动态管理 )，
Kafka从设计上将消费者分成逻辑的组，并且保证&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;一个分组中的多个消费者作为一个整体需要能够读到它关心的话题的所有数据记录&lt;/li&gt;
  &lt;li&gt;同一个分组中的多个消费者的处理负载可以很容易的被Kafka自身做负载均衡&lt;/li&gt;
  &lt;li&gt;对于多个不同的消费者分组而言，同一个分区对每一个分组都有一个唯一的消费者和其关联&lt;/li&gt;
  &lt;li&gt;这种潜在的关联映射决定了任何一个消费者分组中&lt;strong&gt;消费者实例的数量不能超过话题本身所对应的分区的数目&lt;/strong&gt;，否则分区到消费者实例的关联关系则无法分配&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;譬如下面的例子&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://kafka.apache.org/10/images/consumer-groups.png&quot; alt=&quot;kafka_consumer_group&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里的同一个话题被分隔到2个服务器集群上，第一个服务器上有2个分区被标记为P0和P3，第二个服务器上则存储剩下的2个分区P1和P2。
对于2个消费者分组A （包含2个消费者 ）和 B （包含4个消费者 ）而言，P0 的数据最终会被Kafka分给各组中的第一个消费者，P1被分给第二个；P2被分给第一/第三个，P3被分给第二/第四个。
注意默认情况下，Kafka分配数据的方式是轮询式的，并尽量将连续的数据流分配到不同的服务器上；当然每一个具体的分区内部也可以在多个Kafka实例之间做主从复制以应对可能的失效，
这里只是简化起见仅仅描述了没有分区复制的情况。&lt;/p&gt;

&lt;h4 id=&quot;轮询式记录分发&quot;&gt;轮询式记录分发&lt;/h4&gt;

&lt;p&gt;可以看出默认的策略是按照轮询式分配分组中的消费者实例的，如果分区数超过消费者数量，则采用取模运算的方式，从第一个开始继续分配。
处于均衡复杂的考虑，最好是设置主题中分区的数目是消费者数目的整数倍，即&lt;strong&gt;消费者数量可以整除于分区数量&lt;/strong&gt;。即上图的例子中，如果消费者的数目是3，
那么默认的情况下，第一个消费者的负载会是其它两个消费者的2倍。&lt;/p&gt;

&lt;h4 id=&quot;数据记录的顺序性&quot;&gt;数据记录的顺序性&lt;/h4&gt;

&lt;p&gt;Kafka&lt;strong&gt;仅仅保证同一个分区的数据一定会按照顺序被某个消费者处理&lt;/strong&gt;，多个分组之间的顺序是不被Kafka自身所保证的。
每个分组内部的单个记录，相对于第一个数据记录的偏移被Kafka内部保存并传递个消费者，消费者可以据此得知当前读到的记录在分区中的位置。
如果应用程序需要额外的顺序性保证，则必须在消息记录中添加自定义的字段来处理，或者确保消费者组中仅仅有一个消费者（并不订制自己的消费者关联策略）。&lt;/p&gt;

&lt;h2 id=&quot;数据存储&quot;&gt;数据存储&lt;/h2&gt;

&lt;p&gt;作为一个中间处理平台，Kafka必须保证数据可以被持久化存储，因为生产者产生的数据的时候，对应的消费者可能还没有启动来接受数据，或者消费者可能在处理过程中被重启。
同时Kafka被设计用来处理和存储大量的数据，因此数据必须被持久存储于磁盘中。记录中的数据可以被存储和保留多长时间，完全由系统配置所决定，默认情况下，
数据会被保存2天时间，然后同一个分区中最早的数据记录会被删除，以保证数据记录的逻辑连续性和不可变性。&lt;/p&gt;

&lt;p&gt;每一个新加入的消费者组在默认情况下，都会按照现有系统中已经保存的数据，从最老的开始依次被分发处理。如果此过程中，由于消费者处理速度太慢而生产者产生新数据过快而产生
未读取的分区数据被删除，消费者侧会得到&lt;strong&gt;异常提醒和偏移量重置通知&lt;/strong&gt;。这种情况一直发生的时候，应用程序就需要考虑增加更多的消费者实例或者降低生产者微服务的处理速度；
在采用微服务风格的系统中，通过云基础设施动态调整工作负载可以不修改代码动态应对这种突发的流量高峰。&lt;/p&gt;

&lt;h3 id=&quot;内部分段式存储&quot;&gt;内部分段式存储&lt;/h3&gt;

&lt;p&gt;由于具体记录的内容不是Kafka平台所关心的重点，内部数据存储上很容易按照二进制块的方式存储，并且记录的offset和分区分配策略信息很容易被内部单独存储和优化以提高处理性能。
同时为了便于快速的删除过期的老数据（依具体的数据保存策略而定），数据记录必须按照易于检索的方式存储；考虑到这些因素其内部数据是将一个记录划分为多个段来分开存储的。
这样可以让Kafka快速方便地找到那些块需要被删除。&lt;/p&gt;

&lt;p&gt;写数据的时候，Kafka需要保持一个记录指向当前写入的段。如果段的大小超过了预先设定的值，那么Kafka会创建一个新的段；同时每一个段有一个基本偏移量。逻辑上可以认为，
任何&lt;strong&gt;一个新的段的基础偏移量总是大于等于更老的段&lt;/strong&gt;的所有偏移量，并小于同段中所有的记录；如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*bZ-fWeb2KG_KhYv2EKDvhA.png&quot; alt=&quot;kafka_segments&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;tree&lt;/code&gt;命令来查看Kafka在磁盘上留下的存储文件，任何一个分区的分段都有一个这些段索引的&lt;code class=&quot;highlighter-rouge&quot;&gt;.index&lt;/code&gt;文件和对应的段记录文件，后者以&lt;code class=&quot;highlighter-rouge&quot;&gt;.log&lt;/code&gt;后缀来标识。
段记录文件中实际存放了记录的压缩编码值、时间戳、大小、版本号以及校验值等信息。&lt;/p&gt;

&lt;p&gt;磁盘上的实际文件格式和Kafka从生产者那里接收的消息一下，从而Kafka可以&lt;strong&gt;直接不经拷贝即将对应的数据发送给消费者&lt;/strong&gt;，显著的降低IO的开销提高性能。&lt;/p&gt;

&lt;h2 id=&quot;性能和可靠性考虑&quot;&gt;性能和可靠性考虑&lt;/h2&gt;

&lt;h3 id=&quot;数据复制-replication&quot;&gt;数据复制 (Replication)&lt;/h3&gt;

&lt;p&gt;Kafka内部以分区为基本单位提供数据复制，即同一个分区有多分不同的拷贝；这些拷贝可以按照配置的不同分散在同一机器的不同的磁盘、同一机架上的不同磁盘或者不同的机器上，
从而应对不同的失效或者错误。复制策略可以按照不同的主题来配置，Kafka提供了丰富的配置选项来调整这些配置，方便根据实际应用场景提供不同的可靠性保证。&lt;/p&gt;

&lt;p&gt;非失效情况下，每一个分区按照分布式一致性的概念区分为一个Leader，0个或者多个Followers的方式工作；实际Followers的个数依据具体的主题的设置而定。
所有的数据读写都发生在Leader上面，而数据会同时复制给所有的Follower上。通常情况下，分区的数目多余实际Kafka集群机器的个数，建议将不同的主题的Leader平均地分布在多个Kafka实例上，
最大程度地避免单点故障。&lt;/p&gt;

&lt;p&gt;所有Follower上的数据和Leader上的数据保证一致，从而可以在&lt;strong&gt;Leader失效的情况下，采用一致性共识算法重新选举&lt;/strong&gt;出新的Leader。
Follower节点消费数据的方式和外部消费者处理数据的方式是一致的。和其他的分布式系统一样，Leader和Follower之间需要维护保活信息，从而维持共识算法的运转。
当前内部的一致性处理是采用ZooKeeper来实现的；任何一个节点必须定期和ZooKeeper发送心跳保活，并且如果它处于活跃状态并且是follower节点，则必须复制（消费 ) Leader节点上新写入的数据。&lt;/p&gt;

&lt;h3 id=&quot;数据写入保证&quot;&gt;数据写入保证&lt;/h3&gt;

&lt;p&gt;生产者写入数据的时候，可以选择某个特定的策略来决定写入是否完成，具体策略的选择需要依据性能和时延方面的考量做权衡&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;要么是不关心Leader和Follower之间的复制，一旦写入Leader节点就直接返回认为数据提交。这样做的风险是，万一此时Kafka集群中的Leader节点发生故障而数据没有被同步到其他Follower节点上，
那么数据可能被丢弃导致消费者收不到该数据&lt;/li&gt;
  &lt;li&gt;要么等到数据被所有的Follower所复制后才返回，这样即使Leader节点发生错误，也可以保证消费者在新的Leader生效后一定可以获取到消息记录&lt;/li&gt;
  &lt;li&gt;或者等待至少一个副本写入成功&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;显然这里&lt;strong&gt;任然逃不开CAP定理&lt;/strong&gt;的约束，要么保证绝对可靠性和持久性，但损失性能和吞吐率，要么保证数据处理性能但丢失一定的可靠性、持久性。&lt;/p&gt;

&lt;p&gt;同时Kafka对任何一个主题，还支持一个最小必须同步的复制实例个数的设置以提高灵活性；显然这个配置应该小于该主题的副本个数。
当生产者要求获取消息写入确认的时候，Kafka会检查是否超过给定设置的Follower实例已经得到了该消息，如果没有，则写入操作会被阻塞直到满足要求的副本复制完毕。&lt;/p&gt;

&lt;p&gt;第三个选项则依赖于一个Kafka所提供的保证，&lt;strong&gt;只要有超过一个副本在数据写入过程中是活跃的（心跳未丢失可以消费数据 ) , 那么该消息就不会被Kafka丢弃&lt;/strong&gt;，即使设置的最小同步副本数超过一个。&lt;/p&gt;

&lt;h4 id=&quot;leader失效情况下的选举算法&quot;&gt;Leader失效情况下的选举算法&lt;/h4&gt;

&lt;p&gt;如果Leader节点从来不会失效，那么我们根本不需要Follower节点；问题是分布式计算中任何一个节点都有可能是不可靠的，网络也可能时不时失效，所以软件系统必须设计好处理这种失效。
问题的复杂性在于，当Leader失效的时候，Follower中的有些节点可能已经crash，或者有的节点的数据老友的节点数据新一些；最大的&lt;strong&gt;挑战是我们需要选出持有最新数据的节点&lt;/strong&gt;作为新的Leader，
否则上述的消息不丢失担保就无法满足。&lt;/p&gt;

&lt;h5 id=&quot;基于多数的选举算法&quot;&gt;基于多数的选举算法&lt;/h5&gt;
&lt;p&gt;最常用的算法是一种基于投票的方法，一般地Follower的个数必须是奇数以便于进行基于多数的投票和选举：即如果有 2N+1 个副本，那么必须有 N+1 个节点确认收到数据后，Leader节点才能确认数据写入成功。
这样当Leader失效的时候，我们仅仅需要从 N+1 个节点中选取出持有最新数据的节点即可。具体的选举算法细节这里不详细展开，
一个明显的好处是，&lt;strong&gt;基于多数的选举算法可以保证处理延迟仅仅依赖于最快的节点&lt;/strong&gt;，可以大大提高系统的可用性。&lt;/p&gt;

&lt;p&gt;这一处理算法有很多中实现，包括ZooKeeper的Zab、Raft乃至&lt;a href=&quot;http://pmg.csail.mit.edu/papers/vr-revisited.pdf&quot;&gt;Viewtamped Replication&lt;/a&gt;等。
该方法的弊端也是显而易见的：我们需要更多的节点和存储空间，譬如为处理单一节点的可能失效，我们需要3份数据拷贝，这在实际情况在往往是不过的；而对于有大量数据的系统中，
增加系统的存储空间到5倍乃至更多倍以上则资源浪费也是相当惊人的。实际的场景中，这一策略仅仅适宜于维护轻量级的数据（如系统配置信息）而不是应用的实际数据。&lt;/p&gt;

&lt;h5 id=&quot;kafka的处理策略&quot;&gt;Kafka的处理策略&lt;/h5&gt;

&lt;p&gt;Kafka应用的方法有些略微的不同，它内部动态维护了一个保持同步的副本集合，该集合中的副本虚保证其处理速度和Leader是匹配的。&lt;strong&gt;只有该集合中的副本才会参与Leader的选举&lt;/strong&gt;。
所谓的动态，以为这这个副本集会在运行期中被修改刷新并保存于ZooKeepr中去；并且其数量小于实际的节点数量。
写入某个分区数据的操作仅仅在这个集合中的所有节点都消费了该数据的时候才会被认为是写入提交完毕的。基于该算法，同步副本集中的任何一个副本都可以在出错的情况下被选举为新的Leader。&lt;/p&gt;

&lt;p&gt;当然前述的数据不丢失保证是在至少有一个副本不失效的情况下才可以达成的。如果所有的副本都失效了又怎么办？一旦这种情况发生，Kafka本身其实无能为力，应用系统的设计者必须考虑好如何应对&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;一种方法是等待同步副本集中的一个恢复正常，然后设置该副本为新的Leader并祈祷它没有丢数据 （考虑到墨菲定律，一定有某些情况下数据是丢失的）&lt;/li&gt;
  &lt;li&gt;另外一种办法选择第一个恢复正常的副本作为Leader，然后继续运行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里的选择任然是从一致性和可用性中间二选一，毕竟&lt;strong&gt;CAP问题理论上无解&lt;/strong&gt; ！Kafka默认情况下会采用后一种策略，即尽快从先活过来的节点中选一个恢复可用性。&lt;/p&gt;

&lt;h3 id=&quot;均匀分布leader角色&quot;&gt;均匀分布Leader角色&lt;/h3&gt;

&lt;p&gt;Kafka提供的一个有意思的机制是尽可能得均衡Leader角色的分区，使得&lt;strong&gt;集群中的每一个机器上的Leader角色的分区数量大致相同&lt;/strong&gt;，从而最大程度地提高整个系统的可用性。
因为Leader角色是按照分区来设置的，而一个主题可能被切分为多个分区，同时Kafka系统中可能处理成百上千个主题；总体分摊角色的结果是，
任何一个机器节点的失效都尽量不引入系统性的故障。&lt;/p&gt;

&lt;p&gt;同时Kafka内部会将其中的一个节点设置为controller角色，这样可以处理Kafka节点层面的失效，当controller节点检测到其他的机器节点失效时，
Kafka可以尽量主动切换这些设置故障节点为Leader角色的所有分区，避免被动的Leader选举算法影响整体可用性，可谓是一种主动优化措施。&lt;/p&gt;

&lt;h2 id=&quot;流处理和外部工具整合&quot;&gt;流处理和外部工具整合&lt;/h2&gt;

&lt;p&gt;Kafka自身的流式处理设计更适合于作为大数据处理中的一个中间环节，可靠的实现数据的收集和即使传递。如果消费者工具是一些基于微服务的应用层工具，
很容易在准实时的情况下即使分析实时数据完成一些传统的ELK框架无法完成的基于即时反馈的自适应软件系统。
传统的ELK框架依赖于线下的数据分析和处理，等到产生一些有意义的结果来作为依据对原系统进行调整的时候，可能具体情况以及发生了变化。
Kafka的准实时特性则允许我们更快地对系统的运行产生影响。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kafka.apache.org/documentation/streams/&quot;&gt;Kafka Streams&lt;/a&gt; 提供了一种新的方式构建实时分析微服务应用；
我们仅仅需要依赖于存放在Kafka集群中的数据作为输入，在自己的微服务应用中实现反馈控制逻辑，并将分析结果再放入Kafka集群中；
同时修改原系统中使其反过来从Kafka集群中订阅这些反馈，实时对系统行为作出调整即可。&lt;/p&gt;

&lt;p&gt;一个简单的统计流中的文本并计算字数的插件式微服务应用如下&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WordCountApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Construct config&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StreamsConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_ID_CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;wordcount-application&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StreamsConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BOOTSTRAP_SERVERS_CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;kafka-broker1:9092&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StreamsConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DEFAULT_KEY_SERDE_CLASS_CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serdes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StreamsConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DEFAULT_VALUE_SERDE_CLASS_CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serdes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;StreamsBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StreamsBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;KStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textLines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TextLinesTopic&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;KTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wordCounts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textLines&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flatMapValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textLine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\\W+&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;groupBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Materialized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyValueStore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;counts-store&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;wordCounts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WordsWithCountsTopic&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Produced&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serdes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serdes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;//Build and start stream&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;KafkaStreams&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;streams&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KafkaStreams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;streams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://kafka.apache.org/documentation/&quot;&gt;Kafka documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://thehoard.blog/how-kafkas-storage-internals-work-3a29b02e026&quot;&gt;How Kafka’s Storge Internals Work&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Kafka Streams Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Fei Yan</name><email>skyscribe.yf@gmail.com</email></author><category term="design" /><category term="architecture" /><category term="performance" /><category term="database" /><category term="concurrency" /><category term="microservice" /><summary type="html">Kafka这一孵化于LinkedIn的开源项目正得到越来越多组织的关注和使用；其优雅的设计和对实时性处理的探索有很多值得学习的地方。 本文试就个人学习过程中的一些思考和理解来分析为什么Kafka可以兼顾可靠性、一致性和尽可能强的实时处理能力。</summary></entry><entry><title type="html">C++17整装待发</title><link href="https://skyscribe.github.io/post/2017/10/04/cpp-17-updates/" rel="alternate" type="text/html" title="C++17整装待发" /><published>2017-10-04T00:00:00+08:00</published><updated>2017-10-04T00:00:00+08:00</updated><id>https://skyscribe.github.io/post/2017/10/04/cpp-17-updates</id><content type="html" xml:base="https://skyscribe.github.io/post/2017/10/04/cpp-17-updates/">&lt;p&gt;9月份对于C++社区而言绝对是个令人振奋的收获季节。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;先是在９月上旬的时候，语言标准化委员会完成了新的语言标准的&lt;strong&gt;草案投票并取得了全票&lt;/strong&gt;通过（虽然有一些小的语法、修辞上的评论待修改）；
Herb Sutter第一时间在&lt;a href=&quot;https://herbsutter.com/2017/09/06/c17-is-formally-approved/&quot;&gt;其博客上发布了这一激动人心的消息&lt;/a&gt;：C++2017已经获得了实质性的通过静待最终发布。
值得注意的是，这是C++这门大象一般行动缓慢的语言在变更为&lt;a href=&quot;https://en.wikipedia.org/wiki/Software_release_train&quot;&gt;更敏捷的火车发布模型&lt;/a&gt;之后，第一次按照时间点准时发布大的语言版本。
之前可是有10多年才发布一个版本（说好的C++0x最终变成了十六进制年份的玩笑）导致开发者等到心凉自己造轮子的事情；而C++14是一个修复设计问题的小版本。&lt;/p&gt;

&lt;p&gt;另外一个大事件则是CppCon2017社区大会的成功举办，与往常一样有一大堆的新料演讲(已经放在&lt;a href=&quot;https://github.com/CppCon/CppCon2017&quot;&gt;这里&lt;/a&gt;)放了出来供社区消化、学习。&lt;/p&gt;

&lt;h2 id=&quot;c17&quot;&gt;C++17&lt;/h2&gt;
&lt;p&gt;作为一个按照敏捷发布模型出来的第一个大的语言版本，由于需要照顾到质量、时间节点（毕竟需要按时发布）和参考实现成熟度等因素，本来新特性不会很多。
然而作为一个语言的大版本来说，没有一定的新料自然也有滥竽充数的嫌疑；在敏捷的大背景下，谁也不愿意多等都希望马上出来一些质量够好、实现就绪马上可用的新特性；而且要不止一个，因为可供选择的编程语言实在是太多了。&lt;/p&gt;

&lt;p&gt;值得庆幸的是，WG21标准化小组早在３月份就完成了新语言特性的草稿准备工作。&lt;/p&gt;

&lt;h3 id=&quot;语言特性&quot;&gt;语言特性&lt;/h3&gt;

&lt;p&gt;很多语法糖方面的更新，可以让程序员生产率更高，包括以下这些主要的更新&lt;/p&gt;

&lt;h4 id=&quot;嵌套的命名空间声明&quot;&gt;嵌套的命名空间声明&lt;/h4&gt;
&lt;p&gt;这是一个小小的改进，但足以节省大家很多敲击键盘和格式化缩进的烦恼。因为在比较大的项目中，经常用嵌套的命名空间来隔离API和类，之前我们不得不这样写&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;namesapce&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//my module definitions...
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;或者为了节省空间（采用微软的换行风格有强迫症的更要哭了），直接缩略为&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//my module definitions...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;新标准直接允许我们写为&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//my module definitions...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;是否清爽了很多，或者有本来就应该如此的感觉？为什么没有更早支持啊。&lt;/p&gt;

&lt;h4 id=&quot;static_assert的消息提醒参数变为可选&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;static_assert&lt;/code&gt;的消息提醒参数变为可选&lt;/h4&gt;
&lt;p&gt;这个是针对之前引入的用于与编译期间静态检查机制&lt;code class=&quot;highlighter-rouge&quot;&gt;static_assert&lt;/code&gt;的一点小修正，允许其携带的消息提醒参数被忽略，以减少编译噪音。
本来这个静态断言机制可以很好地服务于编译器多态检查，如果没问题就一路继续编译下去，如果出错，则会打印一条错误信息包含在错误诊断中，并终止编译。
新的改动允许不提供该诊断信息。&lt;/p&gt;

&lt;h4 id=&quot;auto可以用于初始化列表的类型推导&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;auto&lt;/code&gt;可以用于初始化列表的类型推导&lt;/h4&gt;
&lt;p&gt;C++11通过重用&lt;code class=&quot;highlighter-rouge&quot;&gt;auto&lt;/code&gt;关键字来做自动类型推断，而C++17将其扩充到了初始化列表类型，并要求它符合特定的规则。即&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//decltype(x) = initializer_list&amp;lt;int&amp;gt;:
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//declytpe(y) = initializer_list&amp;lt;int, int&amp;gt;;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//same as x
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//ill-formed! Not a single element!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;字面量类型扩展&quot;&gt;字面量类型扩展&lt;/h4&gt;
&lt;p&gt;字面量类型具有很好的声明式风格和良好的可读性，之前的语言标准支持的类型比较有限（比如字符常量、整数、浮点常量），而C++17引入了对其他字符集的支持&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;u8'c-char'&lt;/code&gt;用以支持UTF-8编码的字符常量，其类型依然是&lt;code class=&quot;highlighter-rouge&quot;&gt;char&lt;/code&gt;类型，而其值则是用ISO10646编码的单个字符。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;u'c-char'&lt;/code&gt;用以支持UCS2编码可以支持２个字节，内部类型是&lt;code class=&quot;highlighter-rouge&quot;&gt;char16_t&lt;/code&gt;,如 &lt;code class=&quot;highlighter-rouge&quot;&gt;u'\U0001f34c'&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;U'c-char'&lt;/code&gt;支持４个字节的UCS4,内部类型是&lt;code class=&quot;highlighter-rouge&quot;&gt;char32_t&lt;/code&gt;,内部用Unicode编码，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;U'猫'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;浮点类型的常量声明支持了更多可读性更好的格式，下边的例子&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;123.456e-67&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.1E4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;58.&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4e2&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;会输出四种方式所声明的浮点数字如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.23456e-65
1000
58
400
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;可变长模板参数中的折叠表达式&quot;&gt;可变长模板参数中的折叠表达式&lt;/h4&gt;

&lt;p&gt;C++11 引入了可变长的模板参数，大大简化了模板元编程 (为什么要改进这个 ? 因为语言的设计哲学就是追求&lt;strong&gt;零开销的抽象，这一切都需要强大的模板元编程能力才能二者兼得&lt;/strong&gt;) 。
C++17 则支持在变长模板参数中使用折叠 （&lt;code class=&quot;highlighter-rouge&quot;&gt;fold&lt;/code&gt; ） 或归约 (&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;) , 这两者是函数式编程中最基本的函数单元 ; 最基础的 Haskell 或者 Javascript 教程都会介绍两者 , 
可惜 C++ 才刚刚加入支持 ; 喜欢函数式编程语言的早就改换门庭了吧 :-)&lt;/p&gt;

&lt;p&gt;这一新特性可以支持从一堆模板参数中，仅仅指明第一个而省略其他，也可以指明最后一个省略前边的。
这些参数中间可以用操作符来连接，编译器需要自己负责将他们按照既定的规则串联起来。&lt;/p&gt;

&lt;p&gt;比如这个例子完成左折叠运算 (如注释所写)&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;//op is &amp;amp;&amp;amp;, pack parameters as ..., specified last parameter
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//expanded as left fold, as 
// ((true &amp;amp;&amp;amp; true) &amp;amp;&amp;amp; true) &amp;amp;&amp;amp; false = false
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fold&lt;/code&gt; 操作的详细语法定义如下&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//unary right fold
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//unary left fold
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//binary right fold
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//binary left fold 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;运算符可以是所有语法已经定义的运算符或者调用操作 , 然而当我们使用特殊的运算符去带入表达式的时候，代码可能并不是那么直观 , 
下面更复杂一点的例子分别演示了使用标准输出运算符和逗号运算符的情形&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//left fold print
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;push_back_vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//binary left fold, push back from left to right, init=v
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;第一个例子中，操作绑定于标准输出流的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&lt;/code&gt; 运算符 ，这里使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;universial reference&lt;/code&gt; 可以自动转发避免拷贝。
第二个例子中，对应的操作符为成员函数调用 (&lt;code class=&quot;highlighter-rouge&quot;&gt;push_back&lt;/code&gt; 调用) 。&lt;/p&gt;

&lt;p&gt;如下一个例子则用编译器元编程技术实现常量的按bit字节序转换 :&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// compile-time endianness swap based on http://stackoverflow.com/a/36937049 
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bswap_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index_sequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHAR_BIT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHAR_BIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_unsigned_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bswap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bswap_impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_index_sequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static_assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bswap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1234u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3412u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static_assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bswap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0123456789abcdefULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xefcdab8967452301ULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;constexpr-可以作用于-if-判断&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;constexpr&lt;/code&gt; 可以作用于 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; 判断&lt;/h4&gt;
&lt;p&gt;自从在 C++11 标准中引入以来 , &lt;code class=&quot;highlighter-rouge&quot;&gt;constexpr&lt;/code&gt; 一直有诸多限制和不便，新的语言标准则在一直放宽对其的限制 , 以便提供更高的优化效率 。
简单来说 , &lt;code class=&quot;highlighter-rouge&quot;&gt;constexpr&lt;/code&gt; 用于修饰可能潜在地被编译期计算赋值的函数或者变量 。&lt;/p&gt;

&lt;p&gt;C++17 主要放松了之前常量表达式不可用于 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; 判断的限制。它可以达到的效果是 , 对于声明为 &lt;code class=&quot;highlighter-rouge&quot;&gt;constexpr&lt;/code&gt; 的条件表达式 , 
如果传入的参数在编译期没有被命中 ,  则其对应的&lt;strong&gt;代码块甚至可以被编译器优化&lt;/strong&gt;掉 。&lt;/p&gt;

&lt;p&gt;考虑如下的 C++14 代码&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Xs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Xs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//type alias
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// arg&amp;lt;2&amp;gt;(0, 1, 2, 3, 4, 5) == 2;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;为了实现提取第 &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; 个特定的参数，我们需要大量的模板元代码以实现目的，可读性非常不友好。新的语言特性则允许我们写为&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Xs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里如果对应的分支没有被命中，那么对应的代码可以不用编译，一个明显的好处是可以减少目标代码的体积，
并减少和复杂的模板元技巧斗争的痛苦。
在 Linux GCC7.1 编译上述代码，同样的编译开关和优化选项下，新的版本目标代码体积更小一些，执行速度也略快。&lt;/p&gt;

&lt;h3 id=&quot;标准程序库&quot;&gt;标准程序库&lt;/h3&gt;
&lt;p&gt;标准库同时更新了一些新的基础设施，包括用于函数式编程范式的 &lt;code class=&quot;highlighter-rouge&quot;&gt;optional&lt;/code&gt; 类型和类型安全的 &lt;code class=&quot;highlighter-rouge&quot;&gt;variant&lt;/code&gt; 类。&lt;/p&gt;

&lt;h4 id=&quot;stdoptionalt&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::optional&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;类似于 Haskell 中的 &lt;strong&gt;Maybe Monad&lt;/strong&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;optional&lt;/code&gt;类用于表述一个封装类型，它要么是有初始化好的一个值，要么什么也没有。
该类型最合适的应用场景就是用于返回可能失败也可能成功的情形，这种情况下如果操作成功，那么返回的结果是一个封装过的类型安全的对象，
如果操作失败，则返回空。&lt;/p&gt;

&lt;p&gt;其好处是明显提高了代码的可读性，并且提供了方便的构造函数去生成封装好的对象。同时为了便于使用，它还支持隐式转换为 &lt;code class=&quot;highlighter-rouge&quot;&gt;bool&lt;/code&gt; 类型&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;如果其有值，则返回&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;否则就返回&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;出于强类型保证考虑，空值的情况下，其封装类型本质上是 &lt;code class=&quot;highlighter-rouge&quot;&gt;std::nullopt_t&lt;/code&gt; 类型，并定义了一个对象 &lt;code class=&quot;highlighter-rouge&quot;&gt;nullopt&lt;/code&gt;, 
标准要求其必须是一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;constexpr&lt;/code&gt; 修饰的编译器常量，实现可以根据具体编译器实现来自主决定。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;optional&lt;/code&gt;类型支持类型的值提取，用 &lt;code class=&quot;highlighter-rouge&quot;&gt;value_or&lt;/code&gt; 来封装一个取值或者返回一个给定的值的操作。其用法和 
&lt;a href=&quot;/post/2016/10/14/fp-support-in-java8/&quot;&gt;Java8 的Optional&lt;/a&gt;类有些相似，
只是它没有提供现成的链式操作封装，API不如Java的丰富。&lt;/p&gt;

&lt;h4 id=&quot;stdvarianttypes&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::variant&amp;lt;...Types&amp;gt;&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;variant&lt;/code&gt; 类型用于表述多个不同的可能值的联合类型，任何一个时刻其值可能是给定的模板类型中的一个；初始化完成一个对象后，标准不允许动态
的申请内存。它封装的类型可以任意的对象类型，然而不允许是&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;引用类型&lt;/li&gt;
  &lt;li&gt;数组&lt;/li&gt;
  &lt;li&gt;空类型 &lt;code class=&quot;highlighter-rouge&quot;&gt;void&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个简单的例子如下&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//initialize variant and hold a value of double type
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;12.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//default construct from first type, contains 0 of int type
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;decltype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;内部参数值的访问&quot;&gt;内部参数值的访问&lt;/h5&gt;

&lt;p&gt;需要获取其封装的值的时候，可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;std::get&lt;/code&gt;来获取，由于任意时刻其值可能是给定类型的一种，
当对应的值的当前类型和期望获取的类型不匹配时，&lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt; 操作使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;std::bad_variant_access&lt;/code&gt; 异常来传递错误。
&lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt;操作提供两种类型的提取方法，一种是使用索引位置获取，此时可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;auto&lt;/code&gt;类型完成自动类型推导；另外一种方式是使用类型作为模板参数。&lt;/p&gt;

&lt;p&gt;标准库也提供了查询操作可以让调用者检查给定的&lt;code class=&quot;highlighter-rouge&quot;&gt;variant&lt;/code&gt;是否当前持有一个给定的类型的值而不抛出异常。
&lt;code class=&quot;highlighter-rouge&quot;&gt;variant&lt;/code&gt; 类型支持&lt;code class=&quot;highlighter-rouge&quot;&gt;hash&lt;/code&gt;操作，因此它可以被放置在 &lt;code class=&quot;highlighter-rouge&quot;&gt;unordered_map&lt;/code&gt; 中作为索引。&lt;/p&gt;

&lt;h5 id=&quot;赋值&quot;&gt;赋值&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;variant&lt;/code&gt;对象可以被赋值为新的&lt;code class=&quot;highlighter-rouge&quot;&gt;varant&lt;/code&gt; 对象，然而其赋值语义却略微复杂一些，规则是首先判断两者是否同是variant类型，如果是则做如下判断&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;如果传入的对象和自身都没有持有任何具体值，则什么也不做&lt;/li&gt;
  &lt;li&gt;否则如果传入的对象没有持有值但是自身有值，则销毁内部持有的对象并标记自身为不持有值&lt;/li&gt;
  &lt;li&gt;否则，判断传入的对象的可能的值类型是否和自身可能持有的值类型完全一致，如果一致则取出传入的对象的值，放入本对象中&lt;/li&gt;
  &lt;li&gt;否则对传入的值的可能类型进行检查，如果其类型满足可以被不抛异常的拷贝或者不抛异常的移动，则调用对应类型的&lt;code class=&quot;highlighter-rouge&quot;&gt;emplace&lt;/code&gt;操作&lt;/li&gt;
  &lt;li&gt;否则等价于对给定类型加一层 &lt;code class=&quot;highlighter-rouge&quot;&gt;variant&lt;/code&gt; 封装之后的赋值操作&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;variant&lt;/code&gt; 对象也支持重新赋值为一个非&lt;code class=&quot;highlighter-rouge&quot;&gt;variant&lt;/code&gt;类型的新值；其赋值逻辑是先从所有的可能的类型中使用类型重载解析来决定可以被转换的类型，
然后判断当前的对象中是否已经持有和选出的类型相同的值 (因为任意时刻其持有的值可能是动态可变的) ，如果是则调用转发赋值；
否则判断是否能用传入参数类型构造出选中的类型的值（可以不抛异常地构造新值或者选中的类型没有不抛异常的移动构造函数），
如果有则相当于对给定类型调用&lt;code class=&quot;highlighter-rouge&quot;&gt;emplace&lt;/code&gt;操作；
否则就用&lt;code class=&quot;highlighter-rouge&quot;&gt;variant&lt;/code&gt;类型封装传入的参数，再调用前述的两个&lt;code class=&quot;highlighter-rouge&quot;&gt;variant&lt;/code&gt;类型的赋值处理逻辑尝试赋值。&lt;/p&gt;

&lt;p&gt;考虑如下的例子&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//holds nothing
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//construct string and save it
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Error! Resolution fails!
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//choose bool, v3 contains true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;第二个赋值中，由于选不出一个唯一的重载版本赋值，这里最终会编译出错。第三个赋值中，bool 类型被选中作为 &lt;code class=&quot;highlighter-rouge&quot;&gt;const char*&lt;/code&gt; 的接收类型。&lt;/p&gt;

&lt;h5 id=&quot;特殊的-monostate&quot;&gt;特殊的 &lt;code class=&quot;highlighter-rouge&quot;&gt;monostate&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;由于&lt;code class=&quot;highlighter-rouge&quot;&gt;variant&lt;/code&gt;类型要求第一个值类型必须可以默认构造，对于不满足默认构造的类型值，如果想将其放入&lt;code class=&quot;highlighter-rouge&quot;&gt;variant&lt;/code&gt;中，则需要下一番功夫。
标准库提供了一个特殊的 &lt;code class=&quot;highlighter-rouge&quot;&gt;monostate&lt;/code&gt; 类型用来处理情况，从而我们可以将其放在第一个类型参数处应对上述情况。
即给定如下定义&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MyData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//std::varinat&amp;lt;MyData, OtherType&amp;gt; v; wouldn't compile!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们可以采用变通的方法构造期望的&lt;code class=&quot;highlighter-rouge&quot;&gt;variant&lt;/code&gt;为 &lt;code class=&quot;highlighter-rouge&quot;&gt;std::variant&amp;lt;std::monostate, MyData, OtherType&amp;gt;&lt;/code&gt;；
这样默认构造出来的对象其实包含了一个空的&lt;code class=&quot;highlighter-rouge&quot;&gt;monostate&lt;/code&gt;对象。&lt;/p&gt;

&lt;h5 id=&quot;stdvisit函数&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::visit&lt;/code&gt;函数&lt;/h5&gt;
&lt;p&gt;该函数其实封装了visitor模式，用于调用一个给定的函数到一系列&lt;code class=&quot;highlighter-rouge&quot;&gt;variant&lt;/code&gt;对象上，其签名如下&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Visitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Variants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*result of vis call*/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Visitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Variants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如下的例子可以打印所有的对象&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;结合上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;constexpr if&lt;/code&gt; 我们可以模拟出类似 Haskell 的类型匹配代码&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//helper 
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AlwaysFalse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;false_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;declytype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_same_v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;It's a int with value: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_same_v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;It's a long with value: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_same_v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;It's a double with value: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_same_v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;It's a string with value: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;static_assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlwaysFalse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;non-exhaustive value!&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;字符串及工具函数&quot;&gt;字符串及工具函数&lt;/h4&gt;
&lt;p&gt;C++17 将之前放在 &lt;code class=&quot;highlighter-rouge&quot;&gt;experimental&lt;/code&gt; 空间中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;string_view&lt;/code&gt; 正式标准化，放入了 &lt;code class=&quot;highlighter-rouge&quot;&gt;std&lt;/code&gt; 命名空间中。
顾名思义，&lt;code class=&quot;highlighter-rouge&quot;&gt;string_view&lt;/code&gt; 类提供了对某个 &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt; (或者 C 的数组)  的一个只读的视图，程序员自己必须保证所引用的 &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt; 对象是有效的。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::to_chars&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;std::from_chars&lt;/code&gt; 则提供了对字符串和数值类型的相互转换，转换结果存放在一个结构体中，此结构体包含一个指针位置和一个错误码，
如果发生错误，则可以检查转换进行到哪个位置发生了错误。出于性能的考虑，这些转换函数会忽略本地化设置也不会抛出任何异常。
典型的应用场景是诸如XML或者JSON的转换等。&lt;/p&gt;

&lt;h2 id=&quot;cppcon2017&quot;&gt;CppCon2017&lt;/h2&gt;
&lt;p&gt;作为一个紧凑的技术社区大会，很多精彩的演讲材料放出来，各行各业的大牛纷纷登台分享；一个明显的趋势是现代的C++社区更加关注泛型编程和模板元编程，
并更加探索语言所能达到的极限。这里仅挑两个个人感兴趣的琢磨一下。&lt;/p&gt;

&lt;h3 id=&quot;constexpr-的威力&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;constexpr&lt;/code&gt; 的威力&lt;/h3&gt;
&lt;p&gt;Ben Deane 和 Jason Turner 提出了一个大胆的想法，期望&lt;strong&gt;用编译期计算的方法&lt;/strong&gt;自动地从一个JSON常量字符串生成一个C++的对象出来，也就是如下的伪代码&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsv&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;R&quot;({
    &quot;feature-x-enabled&quot;: true,
    &quot;value-of-y&quot;: 1729,
    &quot;z-options&quot;: {&quot;a&quot;: null,
    &quot;b&quot;: &quot;220 and 284&quot;,
    &quot;c&quot;: [6, 28, 496]}
    })&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;feature-x-enabled&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// code for feature x
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// code when feature x turned off
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;目标&quot;&gt;目标&lt;/h4&gt;

&lt;p&gt;显然他们想到了&lt;code class=&quot;highlighter-rouge&quot;&gt;constexpr&lt;/code&gt;给出的&lt;strong&gt;更高的执行效率、更清晰的代码、更少跨平台折磨的承诺&lt;/strong&gt;；进而他们回顾了C++历史上重要版本对 &lt;code class=&quot;highlighter-rouge&quot;&gt;constexpr&lt;/code&gt; 从诞生到逐步完善过程中
的特性和限制，进而提出了2个需要解决上述问题的重要挑战&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;如何采用&lt;strong&gt;一致的数据结构&lt;/strong&gt;来表示 JSON 数据&lt;/li&gt;
  &lt;li&gt;如何解析json串&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从Json的数据要素上来看，无非是空值、bool类型、字符串、数组和字典类型的组合，而字典类型则本身又包含了值类型，因而我们需要递归处理，
并且需要&lt;strong&gt;设法将&lt;code class=&quot;highlighter-rouge&quot;&gt;constexpr&lt;/code&gt; 应用到所有这些结构&lt;/strong&gt;上，才能保证编译期和运行期可以采用一致的算法。&lt;/p&gt;

&lt;h4 id=&quot;原型&quot;&gt;原型&lt;/h4&gt;
&lt;p&gt;最简单的地方显然是从字符串类型入手，而且 &lt;code class=&quot;highlighter-rouge&quot;&gt;string_view&lt;/code&gt; 看起来是个不错的选项，可惜某些成员函数不支持 &lt;code class=&quot;highlighter-rouge&quot;&gt;constexpr&lt;/code&gt;, 于是他们自己动手。。。
造了一个类似的 &lt;code class=&quot;highlighter-rouge&quot;&gt;static_string&lt;/code&gt; 并且对所有的函数加上了&lt;code class=&quot;highlighter-rouge&quot;&gt;constexpr&lt;/code&gt;， 看起来还是一切顺利。
接下来一个数据结构是数组，最自然的选择当然是&lt;code class=&quot;highlighter-rouge&quot;&gt;vector&lt;/code&gt; 了， 内部可以用 C++11 中引入的 &lt;code class=&quot;highlighter-rouge&quot;&gt;std::array&lt;/code&gt; 来做，非常清晰自然。
&lt;code class=&quot;highlighter-rouge&quot;&gt;vector&lt;/code&gt;的挑战首先来自于 &lt;code class=&quot;highlighter-rouge&quot;&gt;push_back&lt;/code&gt;，一个疑似的 &lt;code class=&quot;highlighter-rouge&quot;&gt;std::next() &lt;/code&gt; 的bug被挖出来了，在GCC7.2的实现中，
它的一个内部成员是无法用 &lt;code class=&quot;highlighter-rouge&quot;&gt;constexpr&lt;/code&gt; 的方式来构造。&lt;/p&gt;

&lt;p&gt;接下来的部分是关于 &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; 这一类似的数据结构的，否则我们就没法处理字典类型了。
有人可能问为什么不能用 &lt;code class=&quot;highlighter-rouge&quot;&gt;std::pair&lt;/code&gt; 类型呢？原因仍然是 &lt;strong&gt;既有实现的限制&lt;/strong&gt; 导致没法用了，因为它内部有个赋值操作不支持 &lt;code class=&quot;highlighter-rouge&quot;&gt;constexpr&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;搞定了数据结构的部分，剩下的就是算法了；你重写了一些基本容器，当然也需要搞定算法了。
初始版本的自定义容器虽然支持各种&lt;code class=&quot;highlighter-rouge&quot;&gt;constexpr&lt;/code&gt; 操作，但他们还不支持运行时缩放（注意编译器运行也是一个特殊的运行时）并且大小是固定的。
他们想到的可能的改进之道是，封装对象到&lt;code class=&quot;highlighter-rouge&quot;&gt;std::optional&lt;/code&gt; 中去，和改进 &lt;code class=&quot;highlighter-rouge&quot;&gt;allocator&lt;/code&gt; 使其也可以被模板化运算。&lt;/p&gt;

&lt;p&gt;解决了这些，剩下的就是解析给定的JSON字符串了。最容易的思路还是从简单的解析器开始，而最简单的解析器莫过于匹配一个给定的字符了。
这一项准备工作完成了对 lambda 表达式的optional封装和 &lt;code class=&quot;highlighter-rouge&quot;&gt;constexpr&lt;/code&gt; 化处理。&lt;/p&gt;

&lt;p&gt;有了这个解析器，那么其它复杂一点的对字符串处理的解析就不难完成，譬如匹配某些字符中的一个，可以组合字符串函数和字符匹配解析器完成。
不匹配任何一个字符的解析，或者解析匹配给定字符串都可以迎刃而解。不难看出，这一思路是&lt;strong&gt;函数式编程的组合式思路&lt;/strong&gt;。
进而他们将这些&lt;strong&gt;基本的函数式编程特性&lt;/strong&gt;借用过来，使用组装得到更为强大的解析器，即使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;fmap&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;bind&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; /&lt;code class=&quot;highlighter-rouge&quot;&gt;combine&lt;/code&gt;,
余下的部分就如砍瓜切菜，上面贴出一些 &lt;code class=&quot;highlighter-rouge&quot;&gt;Haskell&lt;/code&gt; 函数，下面就比葫芦画瓢写 C++ 代码出来。&lt;/p&gt;

&lt;h4 id=&quot;改进和完善&quot;&gt;改进和完善&lt;/h4&gt;

&lt;p&gt;很快一个可以工作的基本原型就有了，基本的概念验证宣告结束；当然也有一些问题出来。
第一个技术性的问题，JSON的数字其实不是一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; 类型（详情可以翻看JSON的语法定义），乃至JSON的字符串也不能很好的表示为 &lt;code class=&quot;highlighter-rouge&quot;&gt;string_view&lt;/code&gt; ,
第三个问题则是漫长的编译时间（模板元编程的通病）了；幸好一些优化的手段被发掘出来缓解这些问题。&lt;/p&gt;

&lt;h4 id=&quot;总结&quot;&gt;总结&lt;/h4&gt;

&lt;p&gt;最后作者们给出了一些结论&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;所有的标准容器和算法其实都有潜力&lt;/strong&gt;被改写为 &lt;code class=&quot;highlighter-rouge&quot;&gt;constexpr&lt;/code&gt; 友好的&lt;/li&gt;
  &lt;li&gt;标准库的设施需要通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;constexpr&lt;/code&gt; 的测试来发现问题，这里已经发现了几个&lt;/li&gt;
  &lt;li&gt;许多迭代器算法和结构需要改写为 &lt;code class=&quot;highlighter-rouge&quot;&gt;constexpr&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lambda&lt;/code&gt; 表达式的 &lt;code class=&quot;highlighter-rouge&quot;&gt;constexpr&lt;/code&gt; 释放了很多未来的扩展空间&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;自动假设系统架构中的现代c规范&quot;&gt;自动假设系统架构中的现代C++规范&lt;/h3&gt;

&lt;p&gt;Jan Babst探索了自动驾驶领域(AutoSAR)对新的C++编程语言的使用并给出了他们的编程规范和使用建议，非常值得思考和借鉴。&lt;/p&gt;

&lt;h4 id=&quot;背景&quot;&gt;背景&lt;/h4&gt;

&lt;p&gt;现代的自动驾驶对软件的需求显著有别于传统的汽车控制软件；传统上来说汽车上的软件系统更像是相互隔离的“孤岛”式系统；各个软件模块各司其职即可。
自动驾驶则需要更多的互操作和中心控制，其&lt;strong&gt;软件架构更接近于一个小型的分布式系统&lt;/strong&gt;，同时对性能和时延有极高的要求，稍有延迟则可能引起严重的后果，
这是一个C++占有极大优势的领域，毕竟C++的设计哲学是零成本的抽象。
更多信息可以查看开放自动驾驶系统架构的&lt;a href=&quot;www.autosar.org&quot;&gt;官方网站&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;Jan大概简述了这一领域为什么期望现代的C++语言：尽管很多嵌入式开发软件仍然在使用老旧的C++版本，ISO的安全标准建议最好使用更为现代的技术；
新的开发者当然更喜欢一门现代一点的语言而不是20年前的语言（Bjarne也说过需要像学习一门新语言一样学习现代C++），
更不必说新的C++规范提供了很多标准的简化特性诸如自动类型推导、一致的初始化列表、可变长参数模板、并发和并行支持等。
简而言之，不管是从吸引开发者的角度还是提高代码生产率的角度看，使用&lt;strong&gt;新标准都好处多多，嵌入式领域也不例外&lt;/strong&gt;。&lt;/p&gt;

&lt;h4 id=&quot;编程规范&quot;&gt;编程规范&lt;/h4&gt;
&lt;p&gt;接下来的部分就是对编程规范的选择和思考了，详细的文档在&lt;a href=&quot;https://www.autosar.org/fileadmin/files/standards/adaptive/17-03/general/specs/AUTOSAR_RS_CPP14Guidelines.pdf&quot;&gt;这里&lt;/a&gt;,
这里Jan介绍了一些重要的规则及为什么这样选择。&lt;/p&gt;

&lt;h5 id=&quot;是否坚持单一返回&quot;&gt;是否坚持单一返回&lt;/h5&gt;
&lt;p&gt;函数里面是否允许只有一个地方返回，是一个C/C++里很有争议的话题；C++语言的自动析构和异常机制使得这一问题更加突出。
保守的策略是坚持函数只能在一个地方返回以避免多返回带来的不确定行为和维护难题，原因是多处返回和GOTO是一样的，
而伟大的Dijkstra几十年前就提出了有名的论断给GOTO判了死刑，不是吗？&lt;/p&gt;

&lt;p&gt;该标准的前一个版本（2008版，在C++11引入之前）是明确建议单一返回原则的，并且将可能抛异常的情况视作例外规则，
认为异常处理过程不属于返回点；这本质上是自相矛盾的，属于无奈之举。&lt;/p&gt;

&lt;p&gt;新的版本里他们认为这条应该被废弃并允许多处返回，因为&lt;strong&gt;如果使用RAII机制，那么天然就会有多个地方的返回处理&lt;/strong&gt;；
只要想想自定义对象的析构是应用层代码自己写的就明白，外部使用者在退出作用域的时候就隐式地引入了不同的处理。&lt;/p&gt;

&lt;p&gt;代码的复杂性是另外一个问题，强制单一返回势必引入许多额外的条件判断和退出控制逻辑，使得代码的可读性急剧下降，
有时候很难看清楚应该被重点关注的业务逻辑。变量未被初始化引入的未定义行为在复杂的逻辑掩盖下，甚至很难被直接发现；
这些在无形之中都提高了软件维护的成本。&lt;/p&gt;

&lt;p&gt;综合来考虑，还是&lt;strong&gt;允许可以在多处返回&lt;/strong&gt;好，代码的清晰度会极大提高，方便代码评审和长期维护。&lt;/p&gt;

&lt;h5 id=&quot;异常的使用&quot;&gt;异常的使用&lt;/h5&gt;
&lt;p&gt;是否允许使用异常是另外一个极具争议的话题，一方面有Google不许使用异常的先例在前，另一方面的现实情况是，
现代的标准语言库自身就大量使用了异常来处理各个边边角角的情况。
同时 &lt;a href=&quot;http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Re-errors&quot;&gt;Core Guideline&lt;/a&gt; 建议使用异常来传递错误。&lt;/p&gt;

&lt;p&gt;AuotSAR的做法是可以使用异常，只要满足&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;不强制用异常来做错误报告&lt;/li&gt;
  &lt;li&gt;不能假设代码可以忽略异常&lt;/li&gt;
  &lt;li&gt;正确使用它并在合适的地方用，譬如&lt;strong&gt;不能用异常来控制业务逻辑&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;在main函数出需要捕获所有可能的异常，避免默认的coredump引起线上事故&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其它一些关于异常的思考还包括，如何避免异常的滥用，比如如果函数所作的事情可以正常继续下去，就不要使用异常；
异常安全保证的考虑方面，不强制很高的安全保证等级，仅支持基本的安全约束，因为&lt;strong&gt;写出异常安全的代码在C++里面是极其复杂的&lt;/strong&gt;，
只要想想Herb Sutter在这方面也写了三本书就知道其中的水有多深了。&lt;/p&gt;

&lt;p&gt;性能损失上的考量，这个其实是和你所用的编译器密切相关的。幸运的是GCC和Clang这两大主流编译器都提供了保证，
在异常没有被触发的情况下，基本&lt;strong&gt;可以做到没有额外开销&lt;/strong&gt;。同时他们的规范还额外谨慎地加上了如下&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;最坏的可能情况必须被仔细分析&lt;/li&gt;
  &lt;li&gt;最坏情况下，行为必须是确定的&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;动态内存分配&quot;&gt;动态内存分配&lt;/h5&gt;
&lt;p&gt;这又是一个嵌入式开发中绕不开的基本问题：很多传统的嵌入式开发都是不允许动态申请和释放内存的；
然而这在现代的C++语言中是几乎不可能的任务，因为标准语言库自身会默默分配、释放内存。
有采用极端策略的规范禁止使用标准库，那么你的工程师得花费大量的时间造一些质量低劣的轮子。
AutoSAR的策略是允许使用动态内存分配，前提是仔细的使用。&lt;/p&gt;

&lt;p&gt;首先一个需要考虑的问题是内存泄漏，应对之道是尽可能使用RAII机制来封装，不使用裸的new/delete;毕竟标准库中的智能指针可以满足所有的情况。
内存碎片的问题，可以使用订制内存分配器的方法来缓解，而Jan认为默认的分配器已经足够好了；没有特殊原因可以先从标准库提供的开始；
因为过早优化是万恶之源，怎样界定优化是否太早还是恰当其实是个复杂的问题。
分配器的执行时间必须是确定可分析的是另外一个需要保证的地方；默认的分配器满足这个约束，如果自己订制分配器，那么必须也满足这个要求，
否则会带来意料不到的后果。&lt;/p&gt;

&lt;h5 id=&quot;其它一些语言特性&quot;&gt;其它一些语言特性&lt;/h5&gt;

&lt;p&gt;Jan 也谈到了其他一些考虑的特性，这里简要记述一些重要的。&lt;/p&gt;

&lt;p&gt;现代C++最显著的特性之一就是lambda表达式和函数式编程的支持；他们的策略是可以使用，但是应该谨慎使用&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;必须显示指定lambda中需要捕获的上下文变量，避免可能的对象生存期的诡异问题&lt;/li&gt;
  &lt;li&gt;总是显示列出参数列表，即使是空函数；这样可以极大提高代码的可读性&lt;/li&gt;
  &lt;li&gt;禁止嵌套的lambda表达式，因为可读性实在太差了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自动类型推导是另外一个有趣的语言特性，然而其对代码可读性的影响可以是有好有坏，同样需要谨慎使用&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;可以用在函数调用返回参数的类型声明上&lt;/li&gt;
  &lt;li&gt;或者声明一个非基本类型并且这个类型写起来比较臃肿时&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AutoSAR也禁用了一些标准库设施以便提高代码的可维护性，譬如基本的原子类型、线程和同步原语等都不让在应用层代码中使用，
也许是考虑到应用层代码的程序员大多很难驾驭这些复杂的语言特性吧。&lt;/p&gt;

&lt;h2 id=&quot;参考和引用&quot;&gt;参考和引用&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://hackernoon.com/a-tour-of-c-17-if-constexpr-3ea62f62ff65&quot;&gt;A tour of C++ 17: if constexpr&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;en.cppreference.com&quot;&gt;CPP Reference&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/CppCon/CppCon2017&quot;&gt;CppCon 2017 Github Repo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Fei Yan</name><email>skyscribe.yf@gmail.com</email></author><category term="programming" /><category term="cpp" /><category term="language" /><category term="fp" /><summary type="html">9月份对于C++社区而言绝对是个令人振奋的收获季节。</summary></entry></feed>